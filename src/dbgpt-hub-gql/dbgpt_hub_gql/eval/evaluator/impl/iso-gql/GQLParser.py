# Generated from ./GQL.g4 by ANTLR 4.13.2
import sys

from antlr4 import (
    ATN,
    DFA,
    ATNDeserializer,
    NoViableAltException,
    Parser,
    ParserATNSimulator,
    ParserRuleContext,
    ParseTreeListener,
    ParseTreeVisitor,
    PredictionContextCache,
    RecognitionException,
    RuleContext,
    Token,
    TokenStream,
)

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        390,
        4603,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        2,
        45,
        7,
        45,
        2,
        46,
        7,
        46,
        2,
        47,
        7,
        47,
        2,
        48,
        7,
        48,
        2,
        49,
        7,
        49,
        2,
        50,
        7,
        50,
        2,
        51,
        7,
        51,
        2,
        52,
        7,
        52,
        2,
        53,
        7,
        53,
        2,
        54,
        7,
        54,
        2,
        55,
        7,
        55,
        2,
        56,
        7,
        56,
        2,
        57,
        7,
        57,
        2,
        58,
        7,
        58,
        2,
        59,
        7,
        59,
        2,
        60,
        7,
        60,
        2,
        61,
        7,
        61,
        2,
        62,
        7,
        62,
        2,
        63,
        7,
        63,
        2,
        64,
        7,
        64,
        2,
        65,
        7,
        65,
        2,
        66,
        7,
        66,
        2,
        67,
        7,
        67,
        2,
        68,
        7,
        68,
        2,
        69,
        7,
        69,
        2,
        70,
        7,
        70,
        2,
        71,
        7,
        71,
        2,
        72,
        7,
        72,
        2,
        73,
        7,
        73,
        2,
        74,
        7,
        74,
        2,
        75,
        7,
        75,
        2,
        76,
        7,
        76,
        2,
        77,
        7,
        77,
        2,
        78,
        7,
        78,
        2,
        79,
        7,
        79,
        2,
        80,
        7,
        80,
        2,
        81,
        7,
        81,
        2,
        82,
        7,
        82,
        2,
        83,
        7,
        83,
        2,
        84,
        7,
        84,
        2,
        85,
        7,
        85,
        2,
        86,
        7,
        86,
        2,
        87,
        7,
        87,
        2,
        88,
        7,
        88,
        2,
        89,
        7,
        89,
        2,
        90,
        7,
        90,
        2,
        91,
        7,
        91,
        2,
        92,
        7,
        92,
        2,
        93,
        7,
        93,
        2,
        94,
        7,
        94,
        2,
        95,
        7,
        95,
        2,
        96,
        7,
        96,
        2,
        97,
        7,
        97,
        2,
        98,
        7,
        98,
        2,
        99,
        7,
        99,
        2,
        100,
        7,
        100,
        2,
        101,
        7,
        101,
        2,
        102,
        7,
        102,
        2,
        103,
        7,
        103,
        2,
        104,
        7,
        104,
        2,
        105,
        7,
        105,
        2,
        106,
        7,
        106,
        2,
        107,
        7,
        107,
        2,
        108,
        7,
        108,
        2,
        109,
        7,
        109,
        2,
        110,
        7,
        110,
        2,
        111,
        7,
        111,
        2,
        112,
        7,
        112,
        2,
        113,
        7,
        113,
        2,
        114,
        7,
        114,
        2,
        115,
        7,
        115,
        2,
        116,
        7,
        116,
        2,
        117,
        7,
        117,
        2,
        118,
        7,
        118,
        2,
        119,
        7,
        119,
        2,
        120,
        7,
        120,
        2,
        121,
        7,
        121,
        2,
        122,
        7,
        122,
        2,
        123,
        7,
        123,
        2,
        124,
        7,
        124,
        2,
        125,
        7,
        125,
        2,
        126,
        7,
        126,
        2,
        127,
        7,
        127,
        2,
        128,
        7,
        128,
        2,
        129,
        7,
        129,
        2,
        130,
        7,
        130,
        2,
        131,
        7,
        131,
        2,
        132,
        7,
        132,
        2,
        133,
        7,
        133,
        2,
        134,
        7,
        134,
        2,
        135,
        7,
        135,
        2,
        136,
        7,
        136,
        2,
        137,
        7,
        137,
        2,
        138,
        7,
        138,
        2,
        139,
        7,
        139,
        2,
        140,
        7,
        140,
        2,
        141,
        7,
        141,
        2,
        142,
        7,
        142,
        2,
        143,
        7,
        143,
        2,
        144,
        7,
        144,
        2,
        145,
        7,
        145,
        2,
        146,
        7,
        146,
        2,
        147,
        7,
        147,
        2,
        148,
        7,
        148,
        2,
        149,
        7,
        149,
        2,
        150,
        7,
        150,
        2,
        151,
        7,
        151,
        2,
        152,
        7,
        152,
        2,
        153,
        7,
        153,
        2,
        154,
        7,
        154,
        2,
        155,
        7,
        155,
        2,
        156,
        7,
        156,
        2,
        157,
        7,
        157,
        2,
        158,
        7,
        158,
        2,
        159,
        7,
        159,
        2,
        160,
        7,
        160,
        2,
        161,
        7,
        161,
        2,
        162,
        7,
        162,
        2,
        163,
        7,
        163,
        2,
        164,
        7,
        164,
        2,
        165,
        7,
        165,
        2,
        166,
        7,
        166,
        2,
        167,
        7,
        167,
        2,
        168,
        7,
        168,
        2,
        169,
        7,
        169,
        2,
        170,
        7,
        170,
        2,
        171,
        7,
        171,
        2,
        172,
        7,
        172,
        2,
        173,
        7,
        173,
        2,
        174,
        7,
        174,
        2,
        175,
        7,
        175,
        2,
        176,
        7,
        176,
        2,
        177,
        7,
        177,
        2,
        178,
        7,
        178,
        2,
        179,
        7,
        179,
        2,
        180,
        7,
        180,
        2,
        181,
        7,
        181,
        2,
        182,
        7,
        182,
        2,
        183,
        7,
        183,
        2,
        184,
        7,
        184,
        2,
        185,
        7,
        185,
        2,
        186,
        7,
        186,
        2,
        187,
        7,
        187,
        2,
        188,
        7,
        188,
        2,
        189,
        7,
        189,
        2,
        190,
        7,
        190,
        2,
        191,
        7,
        191,
        2,
        192,
        7,
        192,
        2,
        193,
        7,
        193,
        2,
        194,
        7,
        194,
        2,
        195,
        7,
        195,
        2,
        196,
        7,
        196,
        2,
        197,
        7,
        197,
        2,
        198,
        7,
        198,
        2,
        199,
        7,
        199,
        2,
        200,
        7,
        200,
        2,
        201,
        7,
        201,
        2,
        202,
        7,
        202,
        2,
        203,
        7,
        203,
        2,
        204,
        7,
        204,
        2,
        205,
        7,
        205,
        2,
        206,
        7,
        206,
        2,
        207,
        7,
        207,
        2,
        208,
        7,
        208,
        2,
        209,
        7,
        209,
        2,
        210,
        7,
        210,
        2,
        211,
        7,
        211,
        2,
        212,
        7,
        212,
        2,
        213,
        7,
        213,
        2,
        214,
        7,
        214,
        2,
        215,
        7,
        215,
        2,
        216,
        7,
        216,
        2,
        217,
        7,
        217,
        2,
        218,
        7,
        218,
        2,
        219,
        7,
        219,
        2,
        220,
        7,
        220,
        2,
        221,
        7,
        221,
        2,
        222,
        7,
        222,
        2,
        223,
        7,
        223,
        2,
        224,
        7,
        224,
        2,
        225,
        7,
        225,
        2,
        226,
        7,
        226,
        2,
        227,
        7,
        227,
        2,
        228,
        7,
        228,
        2,
        229,
        7,
        229,
        2,
        230,
        7,
        230,
        2,
        231,
        7,
        231,
        2,
        232,
        7,
        232,
        2,
        233,
        7,
        233,
        2,
        234,
        7,
        234,
        2,
        235,
        7,
        235,
        2,
        236,
        7,
        236,
        2,
        237,
        7,
        237,
        2,
        238,
        7,
        238,
        2,
        239,
        7,
        239,
        2,
        240,
        7,
        240,
        2,
        241,
        7,
        241,
        2,
        242,
        7,
        242,
        2,
        243,
        7,
        243,
        2,
        244,
        7,
        244,
        2,
        245,
        7,
        245,
        2,
        246,
        7,
        246,
        2,
        247,
        7,
        247,
        2,
        248,
        7,
        248,
        2,
        249,
        7,
        249,
        2,
        250,
        7,
        250,
        2,
        251,
        7,
        251,
        2,
        252,
        7,
        252,
        2,
        253,
        7,
        253,
        2,
        254,
        7,
        254,
        2,
        255,
        7,
        255,
        2,
        256,
        7,
        256,
        2,
        257,
        7,
        257,
        2,
        258,
        7,
        258,
        2,
        259,
        7,
        259,
        2,
        260,
        7,
        260,
        2,
        261,
        7,
        261,
        2,
        262,
        7,
        262,
        2,
        263,
        7,
        263,
        2,
        264,
        7,
        264,
        2,
        265,
        7,
        265,
        2,
        266,
        7,
        266,
        2,
        267,
        7,
        267,
        2,
        268,
        7,
        268,
        2,
        269,
        7,
        269,
        2,
        270,
        7,
        270,
        2,
        271,
        7,
        271,
        2,
        272,
        7,
        272,
        2,
        273,
        7,
        273,
        2,
        274,
        7,
        274,
        2,
        275,
        7,
        275,
        2,
        276,
        7,
        276,
        2,
        277,
        7,
        277,
        2,
        278,
        7,
        278,
        2,
        279,
        7,
        279,
        2,
        280,
        7,
        280,
        2,
        281,
        7,
        281,
        2,
        282,
        7,
        282,
        2,
        283,
        7,
        283,
        2,
        284,
        7,
        284,
        2,
        285,
        7,
        285,
        2,
        286,
        7,
        286,
        2,
        287,
        7,
        287,
        2,
        288,
        7,
        288,
        2,
        289,
        7,
        289,
        2,
        290,
        7,
        290,
        2,
        291,
        7,
        291,
        2,
        292,
        7,
        292,
        2,
        293,
        7,
        293,
        2,
        294,
        7,
        294,
        2,
        295,
        7,
        295,
        2,
        296,
        7,
        296,
        2,
        297,
        7,
        297,
        2,
        298,
        7,
        298,
        2,
        299,
        7,
        299,
        2,
        300,
        7,
        300,
        2,
        301,
        7,
        301,
        2,
        302,
        7,
        302,
        2,
        303,
        7,
        303,
        2,
        304,
        7,
        304,
        2,
        305,
        7,
        305,
        2,
        306,
        7,
        306,
        2,
        307,
        7,
        307,
        2,
        308,
        7,
        308,
        2,
        309,
        7,
        309,
        2,
        310,
        7,
        310,
        2,
        311,
        7,
        311,
        2,
        312,
        7,
        312,
        2,
        313,
        7,
        313,
        2,
        314,
        7,
        314,
        2,
        315,
        7,
        315,
        2,
        316,
        7,
        316,
        2,
        317,
        7,
        317,
        2,
        318,
        7,
        318,
        2,
        319,
        7,
        319,
        2,
        320,
        7,
        320,
        2,
        321,
        7,
        321,
        2,
        322,
        7,
        322,
        2,
        323,
        7,
        323,
        2,
        324,
        7,
        324,
        2,
        325,
        7,
        325,
        2,
        326,
        7,
        326,
        2,
        327,
        7,
        327,
        2,
        328,
        7,
        328,
        2,
        329,
        7,
        329,
        2,
        330,
        7,
        330,
        2,
        331,
        7,
        331,
        2,
        332,
        7,
        332,
        2,
        333,
        7,
        333,
        2,
        334,
        7,
        334,
        2,
        335,
        7,
        335,
        2,
        336,
        7,
        336,
        2,
        337,
        7,
        337,
        2,
        338,
        7,
        338,
        2,
        339,
        7,
        339,
        2,
        340,
        7,
        340,
        2,
        341,
        7,
        341,
        2,
        342,
        7,
        342,
        2,
        343,
        7,
        343,
        2,
        344,
        7,
        344,
        2,
        345,
        7,
        345,
        2,
        346,
        7,
        346,
        2,
        347,
        7,
        347,
        2,
        348,
        7,
        348,
        2,
        349,
        7,
        349,
        2,
        350,
        7,
        350,
        2,
        351,
        7,
        351,
        2,
        352,
        7,
        352,
        2,
        353,
        7,
        353,
        2,
        354,
        7,
        354,
        2,
        355,
        7,
        355,
        2,
        356,
        7,
        356,
        2,
        357,
        7,
        357,
        2,
        358,
        7,
        358,
        2,
        359,
        7,
        359,
        2,
        360,
        7,
        360,
        2,
        361,
        7,
        361,
        2,
        362,
        7,
        362,
        2,
        363,
        7,
        363,
        2,
        364,
        7,
        364,
        2,
        365,
        7,
        365,
        2,
        366,
        7,
        366,
        2,
        367,
        7,
        367,
        2,
        368,
        7,
        368,
        2,
        369,
        7,
        369,
        2,
        370,
        7,
        370,
        2,
        371,
        7,
        371,
        2,
        372,
        7,
        372,
        2,
        373,
        7,
        373,
        2,
        374,
        7,
        374,
        2,
        375,
        7,
        375,
        2,
        376,
        7,
        376,
        2,
        377,
        7,
        377,
        2,
        378,
        7,
        378,
        2,
        379,
        7,
        379,
        2,
        380,
        7,
        380,
        2,
        381,
        7,
        381,
        2,
        382,
        7,
        382,
        2,
        383,
        7,
        383,
        2,
        384,
        7,
        384,
        2,
        385,
        7,
        385,
        2,
        386,
        7,
        386,
        2,
        387,
        7,
        387,
        2,
        388,
        7,
        388,
        2,
        389,
        7,
        389,
        2,
        390,
        7,
        390,
        2,
        391,
        7,
        391,
        2,
        392,
        7,
        392,
        2,
        393,
        7,
        393,
        2,
        394,
        7,
        394,
        2,
        395,
        7,
        395,
        2,
        396,
        7,
        396,
        2,
        397,
        7,
        397,
        2,
        398,
        7,
        398,
        2,
        399,
        7,
        399,
        2,
        400,
        7,
        400,
        2,
        401,
        7,
        401,
        2,
        402,
        7,
        402,
        2,
        403,
        7,
        403,
        2,
        404,
        7,
        404,
        2,
        405,
        7,
        405,
        2,
        406,
        7,
        406,
        2,
        407,
        7,
        407,
        2,
        408,
        7,
        408,
        2,
        409,
        7,
        409,
        2,
        410,
        7,
        410,
        2,
        411,
        7,
        411,
        2,
        412,
        7,
        412,
        2,
        413,
        7,
        413,
        2,
        414,
        7,
        414,
        2,
        415,
        7,
        415,
        2,
        416,
        7,
        416,
        2,
        417,
        7,
        417,
        2,
        418,
        7,
        418,
        2,
        419,
        7,
        419,
        2,
        420,
        7,
        420,
        2,
        421,
        7,
        421,
        2,
        422,
        7,
        422,
        2,
        423,
        7,
        423,
        2,
        424,
        7,
        424,
        2,
        425,
        7,
        425,
        2,
        426,
        7,
        426,
        2,
        427,
        7,
        427,
        2,
        428,
        7,
        428,
        2,
        429,
        7,
        429,
        2,
        430,
        7,
        430,
        2,
        431,
        7,
        431,
        2,
        432,
        7,
        432,
        2,
        433,
        7,
        433,
        2,
        434,
        7,
        434,
        2,
        435,
        7,
        435,
        2,
        436,
        7,
        436,
        2,
        437,
        7,
        437,
        2,
        438,
        7,
        438,
        2,
        439,
        7,
        439,
        2,
        440,
        7,
        440,
        2,
        441,
        7,
        441,
        2,
        442,
        7,
        442,
        2,
        443,
        7,
        443,
        2,
        444,
        7,
        444,
        2,
        445,
        7,
        445,
        2,
        446,
        7,
        446,
        2,
        447,
        7,
        447,
        2,
        448,
        7,
        448,
        2,
        449,
        7,
        449,
        2,
        450,
        7,
        450,
        2,
        451,
        7,
        451,
        2,
        452,
        7,
        452,
        2,
        453,
        7,
        453,
        2,
        454,
        7,
        454,
        2,
        455,
        7,
        455,
        2,
        456,
        7,
        456,
        2,
        457,
        7,
        457,
        2,
        458,
        7,
        458,
        2,
        459,
        7,
        459,
        2,
        460,
        7,
        460,
        2,
        461,
        7,
        461,
        2,
        462,
        7,
        462,
        2,
        463,
        7,
        463,
        2,
        464,
        7,
        464,
        2,
        465,
        7,
        465,
        2,
        466,
        7,
        466,
        2,
        467,
        7,
        467,
        2,
        468,
        7,
        468,
        2,
        469,
        7,
        469,
        2,
        470,
        7,
        470,
        2,
        471,
        7,
        471,
        2,
        472,
        7,
        472,
        2,
        473,
        7,
        473,
        2,
        474,
        7,
        474,
        2,
        475,
        7,
        475,
        2,
        476,
        7,
        476,
        2,
        477,
        7,
        477,
        2,
        478,
        7,
        478,
        2,
        479,
        7,
        479,
        2,
        480,
        7,
        480,
        2,
        481,
        7,
        481,
        2,
        482,
        7,
        482,
        2,
        483,
        7,
        483,
        2,
        484,
        7,
        484,
        2,
        485,
        7,
        485,
        2,
        486,
        7,
        486,
        2,
        487,
        7,
        487,
        2,
        488,
        7,
        488,
        2,
        489,
        7,
        489,
        2,
        490,
        7,
        490,
        2,
        491,
        7,
        491,
        2,
        492,
        7,
        492,
        2,
        493,
        7,
        493,
        2,
        494,
        7,
        494,
        2,
        495,
        7,
        495,
        2,
        496,
        7,
        496,
        2,
        497,
        7,
        497,
        2,
        498,
        7,
        498,
        2,
        499,
        7,
        499,
        2,
        500,
        7,
        500,
        2,
        501,
        7,
        501,
        2,
        502,
        7,
        502,
        2,
        503,
        7,
        503,
        2,
        504,
        7,
        504,
        2,
        505,
        7,
        505,
        2,
        506,
        7,
        506,
        2,
        507,
        7,
        507,
        2,
        508,
        7,
        508,
        2,
        509,
        7,
        509,
        2,
        510,
        7,
        510,
        2,
        511,
        7,
        511,
        2,
        512,
        7,
        512,
        2,
        513,
        7,
        513,
        2,
        514,
        7,
        514,
        2,
        515,
        7,
        515,
        2,
        516,
        7,
        516,
        2,
        517,
        7,
        517,
        2,
        518,
        7,
        518,
        2,
        519,
        7,
        519,
        2,
        520,
        7,
        520,
        2,
        521,
        7,
        521,
        2,
        522,
        7,
        522,
        2,
        523,
        7,
        523,
        2,
        524,
        7,
        524,
        2,
        525,
        7,
        525,
        2,
        526,
        7,
        526,
        2,
        527,
        7,
        527,
        2,
        528,
        7,
        528,
        2,
        529,
        7,
        529,
        2,
        530,
        7,
        530,
        2,
        531,
        7,
        531,
        2,
        532,
        7,
        532,
        2,
        533,
        7,
        533,
        2,
        534,
        7,
        534,
        2,
        535,
        7,
        535,
        2,
        536,
        7,
        536,
        2,
        537,
        7,
        537,
        2,
        538,
        7,
        538,
        2,
        539,
        7,
        539,
        2,
        540,
        7,
        540,
        2,
        541,
        7,
        541,
        2,
        542,
        7,
        542,
        2,
        543,
        7,
        543,
        2,
        544,
        7,
        544,
        2,
        545,
        7,
        545,
        2,
        546,
        7,
        546,
        2,
        547,
        7,
        547,
        2,
        548,
        7,
        548,
        2,
        549,
        7,
        549,
        2,
        550,
        7,
        550,
        2,
        551,
        7,
        551,
        2,
        552,
        7,
        552,
        2,
        553,
        7,
        553,
        2,
        554,
        7,
        554,
        2,
        555,
        7,
        555,
        2,
        556,
        7,
        556,
        2,
        557,
        7,
        557,
        2,
        558,
        7,
        558,
        2,
        559,
        7,
        559,
        2,
        560,
        7,
        560,
        2,
        561,
        7,
        561,
        2,
        562,
        7,
        562,
        2,
        563,
        7,
        563,
        2,
        564,
        7,
        564,
        2,
        565,
        7,
        565,
        2,
        566,
        7,
        566,
        2,
        567,
        7,
        567,
        2,
        568,
        7,
        568,
        2,
        569,
        7,
        569,
        2,
        570,
        7,
        570,
        2,
        571,
        7,
        571,
        2,
        572,
        7,
        572,
        2,
        573,
        7,
        573,
        1,
        0,
        1,
        0,
        3,
        0,
        1151,
        8,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        3,
        0,
        1158,
        8,
        0,
        1,
        1,
        1,
        1,
        3,
        1,
        1162,
        8,
        1,
        1,
        2,
        4,
        2,
        1165,
        8,
        2,
        11,
        2,
        12,
        2,
        1166,
        1,
        2,
        4,
        2,
        1170,
        8,
        2,
        11,
        2,
        12,
        2,
        1171,
        1,
        2,
        5,
        2,
        1175,
        8,
        2,
        10,
        2,
        12,
        2,
        1178,
        9,
        2,
        3,
        2,
        1180,
        8,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        1185,
        8,
        3,
        3,
        3,
        1187,
        8,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        1191,
        8,
        3,
        1,
        3,
        3,
        3,
        1194,
        8,
        3,
        1,
        4,
        1,
        4,
        3,
        4,
        1198,
        8,
        4,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        3,
        5,
        1206,
        8,
        5,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        7,
        3,
        7,
        1212,
        8,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        9,
        1,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        1226,
        8,
        10,
        1,
        11,
        3,
        11,
        1229,
        8,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        12,
        3,
        12,
        1236,
        8,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        3,
        14,
        1249,
        8,
        14,
        1,
        14,
        1,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        3,
        15,
        1256,
        8,
        15,
        1,
        16,
        3,
        16,
        1259,
        8,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        3,
        16,
        1264,
        8,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        3,
        16,
        1270,
        8,
        16,
        1,
        16,
        3,
        16,
        1273,
        8,
        16,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        18,
        1,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        1283,
        8,
        19,
        1,
        20,
        1,
        20,
        1,
        20,
        5,
        20,
        1288,
        8,
        20,
        10,
        20,
        12,
        20,
        1291,
        9,
        20,
        1,
        21,
        1,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        1299,
        8,
        22,
        1,
        23,
        1,
        23,
        1,
        24,
        1,
        24,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        26,
        1,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        29,
        3,
        29,
        1320,
        8,
        29,
        1,
        29,
        3,
        29,
        1323,
        8,
        29,
        1,
        29,
        1,
        29,
        1,
        30,
        4,
        30,
        1328,
        8,
        30,
        11,
        30,
        12,
        30,
        1329,
        1,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        1335,
        8,
        31,
        1,
        32,
        1,
        32,
        5,
        32,
        1339,
        8,
        32,
        10,
        32,
        12,
        32,
        1342,
        9,
        32,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        1347,
        8,
        33,
        1,
        34,
        1,
        34,
        3,
        34,
        1351,
        8,
        34,
        1,
        34,
        1,
        34,
        1,
        35,
        3,
        35,
        1356,
        8,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        36,
        3,
        36,
        1363,
        8,
        36,
        1,
        36,
        3,
        36,
        1366,
        8,
        36,
        1,
        36,
        1,
        36,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        38,
        3,
        38,
        1374,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        39,
        3,
        39,
        1381,
        8,
        39,
        1,
        39,
        3,
        39,
        1384,
        8,
        39,
        1,
        39,
        1,
        39,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        42,
        3,
        42,
        1396,
        8,
        42,
        1,
        42,
        3,
        42,
        1399,
        8,
        42,
        1,
        42,
        1,
        42,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        3,
        44,
        1410,
        8,
        44,
        1,
        45,
        1,
        45,
        1,
        46,
        1,
        46,
        1,
        46,
        1,
        46,
        3,
        46,
        1418,
        8,
        46,
        1,
        47,
        1,
        47,
        1,
        48,
        1,
        48,
        1,
        48,
        1,
        48,
        3,
        48,
        1426,
        8,
        48,
        1,
        49,
        4,
        49,
        1429,
        8,
        49,
        11,
        49,
        12,
        49,
        1430,
        1,
        50,
        1,
        50,
        3,
        50,
        1435,
        8,
        50,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        51,
        3,
        51,
        1443,
        8,
        51,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        3,
        52,
        1450,
        8,
        52,
        1,
        52,
        1,
        52,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        3,
        53,
        1458,
        8,
        53,
        1,
        53,
        1,
        53,
        1,
        54,
        1,
        54,
        3,
        54,
        1464,
        8,
        54,
        1,
        54,
        1,
        54,
        1,
        54,
        1,
        54,
        3,
        54,
        1470,
        8,
        54,
        1,
        54,
        1,
        54,
        1,
        54,
        3,
        54,
        1475,
        8,
        54,
        1,
        54,
        3,
        54,
        1478,
        8,
        54,
        1,
        54,
        1,
        54,
        1,
        54,
        3,
        54,
        1483,
        8,
        54,
        1,
        54,
        3,
        54,
        1486,
        8,
        54,
        1,
        55,
        3,
        55,
        1489,
        8,
        55,
        1,
        55,
        1,
        55,
        3,
        55,
        1493,
        8,
        55,
        1,
        55,
        3,
        55,
        1496,
        8,
        55,
        1,
        56,
        1,
        56,
        3,
        56,
        1500,
        8,
        56,
        1,
        56,
        1,
        56,
        3,
        56,
        1504,
        8,
        56,
        1,
        56,
        3,
        56,
        1507,
        8,
        56,
        1,
        56,
        3,
        56,
        1510,
        8,
        56,
        1,
        56,
        3,
        56,
        1513,
        8,
        56,
        1,
        57,
        1,
        57,
        1,
        57,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        59,
        1,
        59,
        3,
        59,
        1525,
        8,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        3,
        59,
        1530,
        8,
        59,
        1,
        59,
        1,
        59,
        1,
        60,
        1,
        60,
        3,
        60,
        1536,
        8,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        3,
        60,
        1543,
        8,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        3,
        60,
        1548,
        8,
        60,
        1,
        60,
        1,
        60,
        3,
        60,
        1552,
        8,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        61,
        3,
        61,
        1558,
        8,
        61,
        1,
        61,
        1,
        61,
        1,
        61,
        3,
        61,
        1563,
        8,
        61,
        1,
        61,
        3,
        61,
        1566,
        8,
        61,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        62,
        1,
        63,
        1,
        63,
        3,
        63,
        1574,
        8,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        3,
        63,
        1580,
        8,
        63,
        1,
        63,
        1,
        63,
        1,
        64,
        1,
        64,
        1,
        65,
        1,
        65,
        3,
        65,
        1588,
        8,
        65,
        1,
        66,
        1,
        66,
        3,
        66,
        1592,
        8,
        66,
        1,
        67,
        1,
        67,
        1,
        67,
        3,
        67,
        1597,
        8,
        67,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        69,
        1,
        69,
        3,
        69,
        1604,
        8,
        69,
        1,
        70,
        1,
        70,
        3,
        70,
        1608,
        8,
        70,
        1,
        71,
        4,
        71,
        1611,
        8,
        71,
        11,
        71,
        12,
        71,
        1612,
        1,
        72,
        1,
        72,
        3,
        72,
        1617,
        8,
        72,
        1,
        73,
        1,
        73,
        3,
        73,
        1621,
        8,
        73,
        1,
        74,
        1,
        74,
        1,
        74,
        1,
        74,
        3,
        74,
        1627,
        8,
        74,
        1,
        75,
        1,
        75,
        1,
        75,
        1,
        76,
        1,
        76,
        1,
        76,
        1,
        77,
        1,
        77,
        1,
        77,
        5,
        77,
        1638,
        8,
        77,
        10,
        77,
        12,
        77,
        1641,
        9,
        77,
        1,
        78,
        1,
        78,
        1,
        78,
        3,
        78,
        1646,
        8,
        78,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        79,
        1,
        80,
        1,
        80,
        1,
        80,
        1,
        80,
        3,
        80,
        1658,
        8,
        80,
        1,
        80,
        1,
        80,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        81,
        1,
        82,
        1,
        82,
        1,
        82,
        1,
        83,
        1,
        83,
        1,
        83,
        5,
        83,
        1672,
        8,
        83,
        10,
        83,
        12,
        83,
        1675,
        9,
        83,
        1,
        84,
        1,
        84,
        3,
        84,
        1679,
        8,
        84,
        1,
        85,
        1,
        85,
        1,
        85,
        1,
        85,
        1,
        86,
        1,
        86,
        1,
        86,
        1,
        86,
        1,
        87,
        3,
        87,
        1690,
        8,
        87,
        1,
        87,
        1,
        87,
        1,
        87,
        1,
        88,
        1,
        88,
        1,
        88,
        5,
        88,
        1698,
        8,
        88,
        10,
        88,
        12,
        88,
        1701,
        9,
        88,
        1,
        89,
        1,
        89,
        1,
        90,
        1,
        90,
        1,
        91,
        1,
        91,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        1,
        92,
        5,
        92,
        1716,
        8,
        92,
        10,
        92,
        12,
        92,
        1719,
        9,
        92,
        1,
        93,
        1,
        93,
        3,
        93,
        1723,
        8,
        93,
        1,
        94,
        1,
        94,
        3,
        94,
        1727,
        8,
        94,
        1,
        94,
        1,
        94,
        3,
        94,
        1731,
        8,
        94,
        1,
        94,
        1,
        94,
        3,
        94,
        1735,
        8,
        94,
        3,
        94,
        1737,
        8,
        94,
        1,
        95,
        1,
        95,
        1,
        96,
        1,
        96,
        3,
        96,
        1743,
        8,
        96,
        1,
        97,
        5,
        97,
        1746,
        8,
        97,
        10,
        97,
        12,
        97,
        1749,
        9,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        1,
        97,
        3,
        97,
        1755,
        8,
        97,
        1,
        98,
        1,
        98,
        1,
        98,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        99,
        1,
        100,
        1,
        100,
        1,
        100,
        1,
        101,
        1,
        101,
        1,
        101,
        1,
        102,
        3,
        102,
        1771,
        8,
        102,
        1,
        102,
        1,
        102,
        3,
        102,
        1775,
        8,
        102,
        1,
        103,
        4,
        103,
        1778,
        8,
        103,
        11,
        103,
        12,
        103,
        1779,
        1,
        104,
        1,
        104,
        3,
        104,
        1784,
        8,
        104,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        1,
        105,
        3,
        105,
        1791,
        8,
        105,
        1,
        106,
        1,
        106,
        3,
        106,
        1795,
        8,
        106,
        1,
        107,
        1,
        107,
        1,
        107,
        1,
        108,
        1,
        108,
        1,
        108,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        1,
        109,
        3,
        109,
        1812,
        8,
        109,
        1,
        110,
        4,
        110,
        1815,
        8,
        110,
        11,
        110,
        12,
        110,
        1816,
        1,
        111,
        1,
        111,
        1,
        112,
        1,
        112,
        1,
        112,
        3,
        112,
        1824,
        8,
        112,
        1,
        113,
        1,
        113,
        1,
        113,
        1,
        114,
        1,
        114,
        1,
        114,
        5,
        114,
        1832,
        8,
        114,
        10,
        114,
        12,
        114,
        1835,
        9,
        114,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        1,
        115,
        3,
        115,
        1842,
        8,
        115,
        1,
        116,
        1,
        116,
        1,
        116,
        3,
        116,
        1847,
        8,
        116,
        1,
        117,
        1,
        117,
        1,
        117,
        1,
        118,
        1,
        118,
        1,
        118,
        1,
        119,
        1,
        119,
        1,
        120,
        1,
        120,
        1,
        120,
        1,
        120,
        1,
        121,
        1,
        121,
        3,
        121,
        1863,
        8,
        121,
        1,
        121,
        3,
        121,
        1866,
        8,
        121,
        1,
        121,
        1,
        121,
        3,
        121,
        1870,
        8,
        121,
        1,
        121,
        3,
        121,
        1873,
        8,
        121,
        1,
        122,
        1,
        122,
        3,
        122,
        1877,
        8,
        122,
        1,
        122,
        3,
        122,
        1880,
        8,
        122,
        1,
        123,
        1,
        123,
        1,
        123,
        1,
        124,
        3,
        124,
        1886,
        8,
        124,
        1,
        124,
        1,
        124,
        3,
        124,
        1890,
        8,
        124,
        1,
        124,
        3,
        124,
        1893,
        8,
        124,
        1,
        125,
        1,
        125,
        1,
        125,
        5,
        125,
        1898,
        8,
        125,
        10,
        125,
        12,
        125,
        1901,
        9,
        125,
        1,
        126,
        1,
        126,
        3,
        126,
        1905,
        8,
        126,
        1,
        127,
        1,
        127,
        1,
        127,
        1,
        128,
        1,
        128,
        3,
        128,
        1912,
        8,
        128,
        1,
        128,
        1,
        128,
        3,
        128,
        1916,
        8,
        128,
        1,
        128,
        1,
        128,
        3,
        128,
        1920,
        8,
        128,
        1,
        128,
        3,
        128,
        1923,
        8,
        128,
        1,
        128,
        3,
        128,
        1926,
        8,
        128,
        1,
        128,
        3,
        128,
        1929,
        8,
        128,
        1,
        128,
        3,
        128,
        1932,
        8,
        128,
        1,
        128,
        3,
        128,
        1935,
        8,
        128,
        3,
        128,
        1937,
        8,
        128,
        1,
        129,
        1,
        129,
        1,
        129,
        5,
        129,
        1942,
        8,
        129,
        10,
        129,
        12,
        129,
        1945,
        9,
        129,
        1,
        130,
        1,
        130,
        3,
        130,
        1949,
        8,
        130,
        1,
        131,
        1,
        131,
        1,
        131,
        1,
        132,
        1,
        132,
        1,
        132,
        1,
        133,
        1,
        133,
        1,
        133,
        3,
        133,
        1960,
        8,
        133,
        1,
        134,
        1,
        134,
        1,
        134,
        5,
        134,
        1965,
        8,
        134,
        10,
        134,
        12,
        134,
        1968,
        9,
        134,
        1,
        135,
        1,
        135,
        1,
        135,
        1,
        136,
        1,
        136,
        1,
        136,
        1,
        136,
        3,
        136,
        1977,
        8,
        136,
        1,
        137,
        3,
        137,
        1980,
        8,
        137,
        1,
        137,
        1,
        137,
        1,
        137,
        1,
        138,
        1,
        138,
        3,
        138,
        1987,
        8,
        138,
        1,
        139,
        3,
        139,
        1990,
        8,
        139,
        1,
        139,
        1,
        139,
        1,
        140,
        1,
        140,
        3,
        140,
        1996,
        8,
        140,
        1,
        140,
        1,
        140,
        1,
        141,
        1,
        141,
        1,
        141,
        5,
        141,
        2003,
        8,
        141,
        10,
        141,
        12,
        141,
        2006,
        9,
        141,
        1,
        142,
        1,
        142,
        1,
        142,
        3,
        142,
        2011,
        8,
        142,
        1,
        142,
        1,
        142,
        3,
        142,
        2015,
        8,
        142,
        1,
        143,
        1,
        143,
        1,
        143,
        5,
        143,
        2020,
        8,
        143,
        10,
        143,
        12,
        143,
        2023,
        9,
        143,
        1,
        144,
        1,
        144,
        1,
        145,
        1,
        145,
        1,
        145,
        1,
        146,
        1,
        146,
        1,
        146,
        1,
        147,
        1,
        147,
        3,
        147,
        2035,
        8,
        147,
        1,
        148,
        1,
        148,
        1,
        148,
        1,
        149,
        1,
        149,
        1,
        149,
        5,
        149,
        2043,
        8,
        149,
        10,
        149,
        12,
        149,
        2046,
        9,
        149,
        1,
        150,
        1,
        150,
        1,
        151,
        3,
        151,
        2051,
        8,
        151,
        1,
        151,
        1,
        151,
        3,
        151,
        2055,
        8,
        151,
        1,
        151,
        3,
        151,
        2058,
        8,
        151,
        1,
        152,
        1,
        152,
        3,
        152,
        2062,
        8,
        152,
        1,
        153,
        1,
        153,
        1,
        153,
        1,
        154,
        1,
        154,
        1,
        154,
        1,
        155,
        1,
        155,
        3,
        155,
        2072,
        8,
        155,
        1,
        155,
        3,
        155,
        2075,
        8,
        155,
        1,
        156,
        1,
        156,
        3,
        156,
        2079,
        8,
        156,
        1,
        156,
        3,
        156,
        2082,
        8,
        156,
        1,
        157,
        1,
        157,
        1,
        157,
        5,
        157,
        2087,
        8,
        157,
        10,
        157,
        12,
        157,
        2090,
        9,
        157,
        1,
        158,
        3,
        158,
        2093,
        8,
        158,
        1,
        158,
        3,
        158,
        2096,
        8,
        158,
        1,
        158,
        1,
        158,
        1,
        159,
        1,
        159,
        1,
        159,
        1,
        160,
        1,
        160,
        1,
        160,
        1,
        161,
        1,
        161,
        1,
        161,
        1,
        162,
        1,
        162,
        1,
        163,
        1,
        163,
        1,
        163,
        5,
        163,
        2114,
        8,
        163,
        10,
        163,
        12,
        163,
        2117,
        9,
        163,
        1,
        164,
        1,
        164,
        1,
        164,
        1,
        164,
        5,
        164,
        2123,
        8,
        164,
        10,
        164,
        12,
        164,
        2126,
        9,
        164,
        1,
        165,
        1,
        165,
        3,
        165,
        2130,
        8,
        165,
        1,
        165,
        1,
        165,
        1,
        166,
        1,
        166,
        1,
        166,
        3,
        166,
        2137,
        8,
        166,
        1,
        167,
        1,
        167,
        3,
        167,
        2141,
        8,
        167,
        1,
        167,
        1,
        167,
        1,
        168,
        1,
        168,
        3,
        168,
        2147,
        8,
        168,
        1,
        168,
        1,
        168,
        1,
        169,
        1,
        169,
        3,
        169,
        2153,
        8,
        169,
        1,
        169,
        1,
        169,
        1,
        170,
        1,
        170,
        3,
        170,
        2159,
        8,
        170,
        1,
        170,
        3,
        170,
        2162,
        8,
        170,
        1,
        170,
        3,
        170,
        2165,
        8,
        170,
        1,
        171,
        1,
        171,
        1,
        171,
        3,
        171,
        2170,
        8,
        171,
        1,
        171,
        1,
        171,
        1,
        171,
        3,
        171,
        2175,
        8,
        171,
        1,
        171,
        3,
        171,
        2178,
        8,
        171,
        1,
        172,
        1,
        172,
        3,
        172,
        2182,
        8,
        172,
        1,
        173,
        1,
        173,
        3,
        173,
        2186,
        8,
        173,
        1,
        174,
        1,
        174,
        1,
        175,
        1,
        175,
        1,
        175,
        3,
        175,
        2193,
        8,
        175,
        1,
        176,
        1,
        176,
        3,
        176,
        2197,
        8,
        176,
        1,
        176,
        3,
        176,
        2200,
        8,
        176,
        1,
        177,
        1,
        177,
        1,
        178,
        1,
        178,
        3,
        178,
        2206,
        8,
        178,
        1,
        178,
        3,
        178,
        2209,
        8,
        178,
        1,
        178,
        3,
        178,
        2212,
        8,
        178,
        1,
        179,
        1,
        179,
        1,
        180,
        1,
        180,
        1,
        180,
        1,
        180,
        3,
        180,
        2220,
        8,
        180,
        1,
        181,
        1,
        181,
        1,
        181,
        3,
        181,
        2225,
        8,
        181,
        1,
        181,
        3,
        181,
        2228,
        8,
        181,
        1,
        182,
        1,
        182,
        1,
        182,
        3,
        182,
        2233,
        8,
        182,
        1,
        182,
        3,
        182,
        2236,
        8,
        182,
        1,
        183,
        1,
        183,
        1,
        183,
        3,
        183,
        2241,
        8,
        183,
        1,
        183,
        3,
        183,
        2244,
        8,
        183,
        1,
        184,
        1,
        184,
        3,
        184,
        2248,
        8,
        184,
        1,
        184,
        3,
        184,
        2251,
        8,
        184,
        1,
        184,
        3,
        184,
        2254,
        8,
        184,
        1,
        184,
        1,
        184,
        1,
        185,
        1,
        185,
        1,
        186,
        1,
        186,
        1,
        186,
        1,
        186,
        4,
        186,
        2264,
        8,
        186,
        11,
        186,
        12,
        186,
        2265,
        1,
        186,
        1,
        186,
        1,
        186,
        4,
        186,
        2271,
        8,
        186,
        11,
        186,
        12,
        186,
        2272,
        3,
        186,
        2275,
        8,
        186,
        1,
        187,
        4,
        187,
        2278,
        8,
        187,
        11,
        187,
        12,
        187,
        2279,
        1,
        188,
        1,
        188,
        1,
        188,
        1,
        188,
        1,
        188,
        1,
        188,
        1,
        188,
        3,
        188,
        2289,
        8,
        188,
        1,
        189,
        1,
        189,
        1,
        189,
        3,
        189,
        2294,
        8,
        189,
        1,
        190,
        1,
        190,
        3,
        190,
        2298,
        8,
        190,
        1,
        191,
        1,
        191,
        1,
        191,
        1,
        191,
        1,
        192,
        3,
        192,
        2305,
        8,
        192,
        1,
        192,
        3,
        192,
        2308,
        8,
        192,
        1,
        192,
        3,
        192,
        2311,
        8,
        192,
        1,
        193,
        1,
        193,
        1,
        194,
        1,
        194,
        1,
        194,
        1,
        195,
        1,
        195,
        1,
        196,
        1,
        196,
        3,
        196,
        2322,
        8,
        196,
        1,
        197,
        1,
        197,
        1,
        197,
        1,
        198,
        1,
        198,
        1,
        198,
        1,
        198,
        1,
        199,
        1,
        199,
        1,
        199,
        5,
        199,
        2334,
        8,
        199,
        10,
        199,
        12,
        199,
        2337,
        9,
        199,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        200,
        1,
        201,
        1,
        201,
        3,
        201,
        2345,
        8,
        201,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        1,
        202,
        3,
        202,
        2354,
        8,
        202,
        1,
        203,
        1,
        203,
        1,
        203,
        1,
        203,
        1,
        204,
        1,
        204,
        1,
        204,
        1,
        204,
        1,
        205,
        1,
        205,
        1,
        205,
        1,
        205,
        1,
        206,
        1,
        206,
        1,
        206,
        1,
        206,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        207,
        1,
        208,
        1,
        208,
        1,
        208,
        1,
        208,
        1,
        209,
        1,
        209,
        1,
        209,
        1,
        209,
        1,
        210,
        1,
        210,
        1,
        211,
        1,
        211,
        3,
        211,
        2388,
        8,
        211,
        1,
        211,
        3,
        211,
        2391,
        8,
        211,
        1,
        211,
        1,
        211,
        3,
        211,
        2395,
        8,
        211,
        1,
        211,
        1,
        211,
        1,
        212,
        1,
        212,
        1,
        212,
        1,
        213,
        1,
        213,
        1,
        213,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        3,
        214,
        2414,
        8,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        1,
        214,
        5,
        214,
        2422,
        8,
        214,
        10,
        214,
        12,
        214,
        2425,
        9,
        214,
        1,
        215,
        1,
        215,
        1,
        216,
        1,
        216,
        1,
        217,
        1,
        217,
        1,
        217,
        1,
        217,
        3,
        217,
        2435,
        8,
        217,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        218,
        1,
        219,
        1,
        219,
        3,
        219,
        2443,
        8,
        219,
        1,
        219,
        1,
        219,
        3,
        219,
        2447,
        8,
        219,
        1,
        219,
        1,
        219,
        1,
        220,
        1,
        220,
        1,
        221,
        1,
        221,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        1,
        222,
        3,
        222,
        2462,
        8,
        222,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        223,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        224,
        1,
        225,
        1,
        225,
        1,
        225,
        1,
        225,
        1,
        226,
        1,
        226,
        1,
        226,
        1,
        226,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        227,
        1,
        228,
        1,
        228,
        1,
        228,
        1,
        228,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        229,
        1,
        230,
        1,
        230,
        1,
        230,
        3,
        230,
        2495,
        8,
        230,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        231,
        1,
        231,
        5,
        231,
        2502,
        8,
        231,
        10,
        231,
        12,
        231,
        2505,
        9,
        231,
        1,
        232,
        1,
        232,
        1,
        232,
        1,
        232,
        1,
        232,
        5,
        232,
        2512,
        8,
        232,
        10,
        232,
        12,
        232,
        2515,
        9,
        232,
        1,
        233,
        1,
        233,
        1,
        233,
        1,
        233,
        1,
        233,
        5,
        233,
        2522,
        8,
        233,
        10,
        233,
        12,
        233,
        2525,
        9,
        233,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        1,
        234,
        5,
        234,
        2533,
        8,
        234,
        10,
        234,
        12,
        234,
        2536,
        9,
        234,
        1,
        235,
        1,
        235,
        1,
        235,
        3,
        235,
        2541,
        8,
        235,
        1,
        236,
        1,
        236,
        1,
        236,
        1,
        237,
        1,
        237,
        1,
        237,
        1,
        238,
        1,
        238,
        3,
        238,
        2551,
        8,
        238,
        1,
        239,
        1,
        239,
        1,
        239,
        1,
        239,
        1,
        239,
        1,
        239,
        1,
        239,
        3,
        239,
        2560,
        8,
        239,
        1,
        240,
        1,
        240,
        1,
        240,
        1,
        241,
        1,
        241,
        1,
        241,
        1,
        242,
        1,
        242,
        1,
        242,
        1,
        243,
        1,
        243,
        1,
        243,
        1,
        244,
        1,
        244,
        1,
        244,
        1,
        244,
        1,
        245,
        1,
        245,
        1,
        245,
        1,
        245,
        1,
        246,
        1,
        246,
        1,
        246,
        1,
        247,
        1,
        247,
        3,
        247,
        2587,
        8,
        247,
        1,
        248,
        1,
        248,
        1,
        248,
        1,
        249,
        1,
        249,
        1,
        249,
        1,
        249,
        1,
        249,
        3,
        249,
        2597,
        8,
        249,
        1,
        250,
        1,
        250,
        1,
        250,
        1,
        251,
        1,
        251,
        1,
        251,
        1,
        252,
        1,
        252,
        1,
        252,
        5,
        252,
        2608,
        8,
        252,
        10,
        252,
        12,
        252,
        2611,
        9,
        252,
        1,
        253,
        1,
        253,
        3,
        253,
        2615,
        8,
        253,
        1,
        254,
        1,
        254,
        1,
        255,
        1,
        255,
        1,
        255,
        1,
        256,
        1,
        256,
        1,
        256,
        1,
        256,
        1,
        257,
        1,
        257,
        1,
        257,
        5,
        257,
        2629,
        8,
        257,
        10,
        257,
        12,
        257,
        2632,
        9,
        257,
        1,
        257,
        3,
        257,
        2635,
        8,
        257,
        1,
        258,
        1,
        258,
        1,
        259,
        1,
        259,
        1,
        259,
        1,
        260,
        1,
        260,
        1,
        260,
        1,
        260,
        1,
        261,
        1,
        261,
        1,
        261,
        5,
        261,
        2649,
        8,
        261,
        10,
        261,
        12,
        261,
        2652,
        9,
        261,
        1,
        262,
        1,
        262,
        3,
        262,
        2656,
        8,
        262,
        1,
        262,
        3,
        262,
        2659,
        8,
        262,
        1,
        263,
        1,
        263,
        1,
        264,
        1,
        264,
        1,
        265,
        1,
        265,
        1,
        265,
        1,
        265,
        3,
        265,
        2669,
        8,
        265,
        1,
        266,
        1,
        266,
        1,
        266,
        1,
        267,
        1,
        267,
        1,
        267,
        1,
        268,
        1,
        268,
        1,
        269,
        1,
        269,
        1,
        269,
        3,
        269,
        2682,
        8,
        269,
        1,
        270,
        1,
        270,
        1,
        270,
        1,
        270,
        3,
        270,
        2688,
        8,
        270,
        1,
        271,
        1,
        271,
        1,
        271,
        1,
        272,
        1,
        272,
        1,
        272,
        1,
        272,
        3,
        272,
        2697,
        8,
        272,
        1,
        273,
        1,
        273,
        1,
        274,
        1,
        274,
        3,
        274,
        2703,
        8,
        274,
        1,
        275,
        1,
        275,
        1,
        275,
        5,
        275,
        2708,
        8,
        275,
        10,
        275,
        12,
        275,
        2711,
        9,
        275,
        1,
        275,
        1,
        275,
        3,
        275,
        2715,
        8,
        275,
        1,
        276,
        1,
        276,
        1,
        276,
        4,
        276,
        2720,
        8,
        276,
        11,
        276,
        12,
        276,
        2721,
        1,
        277,
        1,
        277,
        1,
        277,
        1,
        277,
        1,
        277,
        1,
        277,
        3,
        277,
        2730,
        8,
        277,
        1,
        278,
        3,
        278,
        2733,
        8,
        278,
        1,
        278,
        1,
        278,
        1,
        279,
        1,
        279,
        1,
        280,
        1,
        280,
        3,
        280,
        2741,
        8,
        280,
        1,
        281,
        3,
        281,
        2744,
        8,
        281,
        1,
        281,
        1,
        281,
        1,
        282,
        1,
        282,
        1,
        282,
        1,
        282,
        1,
        282,
        3,
        282,
        2753,
        8,
        282,
        1,
        283,
        1,
        283,
        3,
        283,
        2757,
        8,
        283,
        1,
        284,
        3,
        284,
        2760,
        8,
        284,
        1,
        284,
        1,
        284,
        1,
        285,
        1,
        285,
        3,
        285,
        2766,
        8,
        285,
        1,
        285,
        1,
        285,
        1,
        285,
        5,
        285,
        2771,
        8,
        285,
        10,
        285,
        12,
        285,
        2774,
        9,
        285,
        1,
        285,
        1,
        285,
        1,
        285,
        4,
        285,
        2779,
        8,
        285,
        11,
        285,
        12,
        285,
        2780,
        3,
        285,
        2783,
        8,
        285,
        1,
        286,
        1,
        286,
        1,
        287,
        1,
        287,
        1,
        287,
        1,
        287,
        1,
        288,
        1,
        288,
        1,
        289,
        1,
        289,
        1,
        289,
        5,
        289,
        2796,
        8,
        289,
        10,
        289,
        12,
        289,
        2799,
        9,
        289,
        1,
        290,
        1,
        290,
        3,
        290,
        2803,
        8,
        290,
        1,
        291,
        1,
        291,
        3,
        291,
        2807,
        8,
        291,
        1,
        292,
        1,
        292,
        3,
        292,
        2811,
        8,
        292,
        1,
        292,
        1,
        292,
        3,
        292,
        2815,
        8,
        292,
        1,
        292,
        1,
        292,
        3,
        292,
        2819,
        8,
        292,
        1,
        292,
        3,
        292,
        2822,
        8,
        292,
        1,
        292,
        1,
        292,
        1,
        293,
        1,
        293,
        3,
        293,
        2828,
        8,
        293,
        1,
        293,
        1,
        293,
        1,
        293,
        3,
        293,
        2833,
        8,
        293,
        1,
        294,
        1,
        294,
        3,
        294,
        2837,
        8,
        294,
        1,
        294,
        3,
        294,
        2840,
        8,
        294,
        1,
        295,
        1,
        295,
        3,
        295,
        2844,
        8,
        295,
        1,
        295,
        3,
        295,
        2847,
        8,
        295,
        1,
        296,
        1,
        296,
        1,
        297,
        1,
        297,
        1,
        297,
        1,
        297,
        1,
        297,
        3,
        297,
        2856,
        8,
        297,
        1,
        298,
        3,
        298,
        2859,
        8,
        298,
        1,
        298,
        1,
        298,
        1,
        299,
        1,
        299,
        1,
        300,
        1,
        300,
        1,
        301,
        1,
        301,
        3,
        301,
        2869,
        8,
        301,
        1,
        302,
        3,
        302,
        2872,
        8,
        302,
        1,
        302,
        1,
        302,
        3,
        302,
        2876,
        8,
        302,
        1,
        302,
        1,
        302,
        3,
        302,
        2880,
        8,
        302,
        1,
        302,
        1,
        302,
        3,
        302,
        2884,
        8,
        302,
        1,
        303,
        1,
        303,
        1,
        303,
        3,
        303,
        2889,
        8,
        303,
        1,
        303,
        1,
        303,
        1,
        303,
        1,
        304,
        1,
        304,
        3,
        304,
        2896,
        8,
        304,
        1,
        304,
        3,
        304,
        2899,
        8,
        304,
        1,
        305,
        1,
        305,
        3,
        305,
        2903,
        8,
        305,
        1,
        305,
        3,
        305,
        2906,
        8,
        305,
        1,
        306,
        1,
        306,
        1,
        306,
        1,
        306,
        1,
        306,
        3,
        306,
        2913,
        8,
        306,
        1,
        307,
        3,
        307,
        2916,
        8,
        307,
        1,
        307,
        1,
        307,
        1,
        308,
        1,
        308,
        1,
        309,
        1,
        309,
        1,
        310,
        1,
        310,
        3,
        310,
        2926,
        8,
        310,
        1,
        311,
        1,
        311,
        1,
        311,
        1,
        311,
        1,
        312,
        1,
        312,
        1,
        312,
        1,
        312,
        1,
        313,
        1,
        313,
        1,
        313,
        1,
        313,
        1,
        314,
        1,
        314,
        1,
        314,
        1,
        314,
        1,
        315,
        1,
        315,
        1,
        315,
        1,
        315,
        1,
        316,
        1,
        316,
        1,
        316,
        1,
        316,
        1,
        317,
        1,
        317,
        1,
        317,
        1,
        317,
        1,
        317,
        1,
        317,
        3,
        317,
        2958,
        8,
        317,
        1,
        317,
        3,
        317,
        2961,
        8,
        317,
        1,
        318,
        1,
        318,
        1,
        318,
        1,
        318,
        1,
        318,
        1,
        318,
        3,
        318,
        2969,
        8,
        318,
        1,
        318,
        3,
        318,
        2972,
        8,
        318,
        1,
        319,
        1,
        319,
        1,
        320,
        1,
        320,
        1,
        320,
        1,
        321,
        1,
        321,
        3,
        321,
        2981,
        8,
        321,
        1,
        322,
        1,
        322,
        3,
        322,
        2985,
        8,
        322,
        1,
        323,
        1,
        323,
        1,
        323,
        1,
        323,
        1,
        323,
        1,
        323,
        1,
        324,
        1,
        324,
        1,
        324,
        1,
        324,
        1,
        324,
        1,
        324,
        1,
        325,
        1,
        325,
        1,
        325,
        1,
        325,
        1,
        325,
        1,
        325,
        1,
        326,
        1,
        326,
        1,
        327,
        1,
        327,
        1,
        328,
        1,
        328,
        1,
        329,
        1,
        329,
        1,
        330,
        1,
        330,
        1,
        330,
        1,
        330,
        1,
        330,
        1,
        330,
        1,
        330,
        3,
        330,
        3020,
        8,
        330,
        1,
        331,
        1,
        331,
        1,
        331,
        5,
        331,
        3025,
        8,
        331,
        10,
        331,
        12,
        331,
        3028,
        9,
        331,
        1,
        332,
        1,
        332,
        3,
        332,
        3032,
        8,
        332,
        1,
        332,
        1,
        332,
        1,
        333,
        1,
        333,
        1,
        333,
        5,
        333,
        3039,
        8,
        333,
        10,
        333,
        12,
        333,
        3042,
        9,
        333,
        1,
        334,
        1,
        334,
        3,
        334,
        3046,
        8,
        334,
        1,
        334,
        1,
        334,
        1,
        335,
        1,
        335,
        1,
        336,
        3,
        336,
        3053,
        8,
        336,
        1,
        336,
        1,
        336,
        1,
        336,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        3,
        337,
        3069,
        8,
        337,
        1,
        337,
        3,
        337,
        3072,
        8,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        3,
        337,
        3079,
        8,
        337,
        1,
        337,
        3,
        337,
        3082,
        8,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        3,
        337,
        3087,
        8,
        337,
        1,
        337,
        3,
        337,
        3090,
        8,
        337,
        1,
        337,
        3,
        337,
        3093,
        8,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        3,
        337,
        3098,
        8,
        337,
        1,
        337,
        1,
        337,
        3,
        337,
        3102,
        8,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        5,
        337,
        3108,
        8,
        337,
        10,
        337,
        12,
        337,
        3111,
        9,
        337,
        1,
        337,
        1,
        337,
        3,
        337,
        3115,
        8,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        1,
        337,
        3,
        337,
        3126,
        8,
        337,
        1,
        337,
        3,
        337,
        3129,
        8,
        337,
        5,
        337,
        3131,
        8,
        337,
        10,
        337,
        12,
        337,
        3134,
        9,
        337,
        1,
        338,
        1,
        338,
        1,
        339,
        1,
        339,
        1,
        339,
        1,
        339,
        1,
        339,
        1,
        339,
        1,
        339,
        3,
        339,
        3145,
        8,
        339,
        1,
        340,
        1,
        340,
        3,
        340,
        3149,
        8,
        340,
        1,
        341,
        1,
        341,
        1,
        341,
        1,
        341,
        1,
        341,
        3,
        341,
        3156,
        8,
        341,
        1,
        341,
        1,
        341,
        1,
        341,
        3,
        341,
        3161,
        8,
        341,
        1,
        341,
        3,
        341,
        3164,
        8,
        341,
        1,
        341,
        1,
        341,
        1,
        341,
        1,
        341,
        1,
        341,
        3,
        341,
        3171,
        8,
        341,
        1,
        341,
        3,
        341,
        3174,
        8,
        341,
        1,
        341,
        1,
        341,
        1,
        341,
        1,
        341,
        1,
        341,
        3,
        341,
        3181,
        8,
        341,
        1,
        341,
        3,
        341,
        3184,
        8,
        341,
        3,
        341,
        3186,
        8,
        341,
        1,
        342,
        1,
        342,
        1,
        342,
        1,
        342,
        1,
        342,
        3,
        342,
        3193,
        8,
        342,
        1,
        342,
        1,
        342,
        1,
        342,
        3,
        342,
        3198,
        8,
        342,
        1,
        342,
        3,
        342,
        3201,
        8,
        342,
        1,
        342,
        1,
        342,
        1,
        342,
        1,
        342,
        1,
        342,
        3,
        342,
        3208,
        8,
        342,
        1,
        342,
        3,
        342,
        3211,
        8,
        342,
        1,
        342,
        1,
        342,
        1,
        342,
        1,
        342,
        1,
        342,
        3,
        342,
        3218,
        8,
        342,
        1,
        342,
        3,
        342,
        3221,
        8,
        342,
        3,
        342,
        3223,
        8,
        342,
        1,
        343,
        1,
        343,
        1,
        344,
        1,
        344,
        1,
        345,
        1,
        345,
        1,
        346,
        1,
        346,
        3,
        346,
        3233,
        8,
        346,
        1,
        347,
        1,
        347,
        3,
        347,
        3237,
        8,
        347,
        1,
        348,
        1,
        348,
        3,
        348,
        3241,
        8,
        348,
        1,
        349,
        1,
        349,
        3,
        349,
        3245,
        8,
        349,
        1,
        349,
        1,
        349,
        3,
        349,
        3249,
        8,
        349,
        1,
        349,
        1,
        349,
        3,
        349,
        3253,
        8,
        349,
        1,
        349,
        1,
        349,
        3,
        349,
        3257,
        8,
        349,
        1,
        349,
        1,
        349,
        3,
        349,
        3261,
        8,
        349,
        1,
        349,
        1,
        349,
        3,
        349,
        3265,
        8,
        349,
        1,
        349,
        1,
        349,
        3,
        349,
        3269,
        8,
        349,
        1,
        349,
        1,
        349,
        1,
        349,
        1,
        349,
        1,
        349,
        3,
        349,
        3276,
        8,
        349,
        1,
        349,
        3,
        349,
        3279,
        8,
        349,
        1,
        349,
        1,
        349,
        3,
        349,
        3283,
        8,
        349,
        1,
        349,
        3,
        349,
        3286,
        8,
        349,
        1,
        349,
        3,
        349,
        3289,
        8,
        349,
        1,
        350,
        1,
        350,
        3,
        350,
        3293,
        8,
        350,
        1,
        350,
        1,
        350,
        3,
        350,
        3297,
        8,
        350,
        1,
        350,
        1,
        350,
        3,
        350,
        3301,
        8,
        350,
        1,
        350,
        1,
        350,
        3,
        350,
        3305,
        8,
        350,
        1,
        350,
        1,
        350,
        3,
        350,
        3309,
        8,
        350,
        1,
        350,
        1,
        350,
        3,
        350,
        3313,
        8,
        350,
        1,
        350,
        1,
        350,
        3,
        350,
        3317,
        8,
        350,
        1,
        350,
        1,
        350,
        1,
        350,
        1,
        350,
        1,
        350,
        3,
        350,
        3324,
        8,
        350,
        1,
        350,
        3,
        350,
        3327,
        8,
        350,
        1,
        350,
        1,
        350,
        3,
        350,
        3331,
        8,
        350,
        1,
        350,
        1,
        350,
        3,
        350,
        3335,
        8,
        350,
        1,
        351,
        1,
        351,
        3,
        351,
        3339,
        8,
        351,
        1,
        351,
        1,
        351,
        3,
        351,
        3343,
        8,
        351,
        1,
        351,
        1,
        351,
        3,
        351,
        3347,
        8,
        351,
        1,
        351,
        1,
        351,
        3,
        351,
        3351,
        8,
        351,
        1,
        351,
        1,
        351,
        3,
        351,
        3355,
        8,
        351,
        1,
        351,
        1,
        351,
        3,
        351,
        3359,
        8,
        351,
        1,
        351,
        1,
        351,
        1,
        351,
        3,
        351,
        3364,
        8,
        351,
        1,
        351,
        1,
        351,
        1,
        351,
        1,
        351,
        1,
        351,
        3,
        351,
        3371,
        8,
        351,
        1,
        351,
        3,
        351,
        3374,
        8,
        351,
        1,
        351,
        1,
        351,
        1,
        351,
        3,
        351,
        3379,
        8,
        351,
        3,
        351,
        3381,
        8,
        351,
        1,
        352,
        1,
        352,
        1,
        352,
        1,
        352,
        1,
        352,
        3,
        352,
        3388,
        8,
        352,
        1,
        352,
        1,
        352,
        3,
        352,
        3392,
        8,
        352,
        3,
        352,
        3394,
        8,
        352,
        1,
        353,
        1,
        353,
        1,
        354,
        1,
        354,
        1,
        355,
        1,
        355,
        3,
        355,
        3402,
        8,
        355,
        1,
        355,
        1,
        355,
        3,
        355,
        3406,
        8,
        355,
        1,
        355,
        1,
        355,
        3,
        355,
        3410,
        8,
        355,
        1,
        355,
        1,
        355,
        3,
        355,
        3414,
        8,
        355,
        1,
        355,
        1,
        355,
        3,
        355,
        3418,
        8,
        355,
        1,
        355,
        1,
        355,
        1,
        355,
        1,
        355,
        1,
        355,
        3,
        355,
        3425,
        8,
        355,
        1,
        355,
        1,
        355,
        3,
        355,
        3429,
        8,
        355,
        1,
        355,
        3,
        355,
        3432,
        8,
        355,
        1,
        355,
        1,
        355,
        3,
        355,
        3436,
        8,
        355,
        1,
        355,
        1,
        355,
        3,
        355,
        3440,
        8,
        355,
        1,
        355,
        3,
        355,
        3443,
        8,
        355,
        3,
        355,
        3445,
        8,
        355,
        1,
        356,
        1,
        356,
        3,
        356,
        3449,
        8,
        356,
        1,
        357,
        1,
        357,
        1,
        357,
        1,
        357,
        1,
        357,
        3,
        357,
        3456,
        8,
        357,
        1,
        358,
        1,
        358,
        1,
        358,
        3,
        358,
        3461,
        8,
        358,
        1,
        358,
        1,
        358,
        1,
        358,
        1,
        358,
        1,
        358,
        3,
        358,
        3468,
        8,
        358,
        3,
        358,
        3470,
        8,
        358,
        1,
        359,
        1,
        359,
        1,
        359,
        3,
        359,
        3475,
        8,
        359,
        1,
        359,
        1,
        359,
        1,
        359,
        1,
        359,
        3,
        359,
        3481,
        8,
        359,
        1,
        359,
        3,
        359,
        3484,
        8,
        359,
        3,
        359,
        3486,
        8,
        359,
        1,
        360,
        1,
        360,
        3,
        360,
        3490,
        8,
        360,
        1,
        361,
        1,
        361,
        1,
        361,
        3,
        361,
        3495,
        8,
        361,
        1,
        361,
        1,
        361,
        1,
        361,
        1,
        361,
        1,
        361,
        3,
        361,
        3502,
        8,
        361,
        3,
        361,
        3504,
        8,
        361,
        1,
        362,
        1,
        362,
        1,
        362,
        3,
        362,
        3509,
        8,
        362,
        1,
        362,
        1,
        362,
        1,
        362,
        1,
        362,
        1,
        362,
        3,
        362,
        3516,
        8,
        362,
        3,
        362,
        3518,
        8,
        362,
        1,
        363,
        1,
        363,
        1,
        363,
        1,
        363,
        1,
        363,
        3,
        363,
        3525,
        8,
        363,
        1,
        364,
        1,
        364,
        1,
        364,
        1,
        364,
        1,
        364,
        1,
        364,
        3,
        364,
        3533,
        8,
        364,
        1,
        365,
        1,
        365,
        1,
        365,
        1,
        365,
        3,
        365,
        3539,
        8,
        365,
        1,
        366,
        1,
        366,
        3,
        366,
        3543,
        8,
        366,
        1,
        367,
        1,
        367,
        1,
        368,
        1,
        368,
        1,
        368,
        3,
        368,
        3550,
        8,
        368,
        1,
        369,
        1,
        369,
        3,
        369,
        3554,
        8,
        369,
        1,
        370,
        3,
        370,
        3557,
        8,
        370,
        1,
        370,
        1,
        370,
        1,
        370,
        3,
        370,
        3562,
        8,
        370,
        1,
        371,
        1,
        371,
        3,
        371,
        3566,
        8,
        371,
        1,
        371,
        1,
        371,
        3,
        371,
        3570,
        8,
        371,
        1,
        372,
        1,
        372,
        3,
        372,
        3574,
        8,
        372,
        1,
        373,
        1,
        373,
        3,
        373,
        3578,
        8,
        373,
        1,
        374,
        1,
        374,
        3,
        374,
        3582,
        8,
        374,
        1,
        375,
        3,
        375,
        3585,
        8,
        375,
        1,
        375,
        1,
        375,
        3,
        375,
        3589,
        8,
        375,
        1,
        376,
        1,
        376,
        3,
        376,
        3593,
        8,
        376,
        1,
        377,
        1,
        377,
        3,
        377,
        3597,
        8,
        377,
        1,
        378,
        3,
        378,
        3600,
        8,
        378,
        1,
        378,
        1,
        378,
        3,
        378,
        3604,
        8,
        378,
        1,
        379,
        1,
        379,
        3,
        379,
        3608,
        8,
        379,
        1,
        380,
        1,
        380,
        1,
        381,
        1,
        381,
        1,
        382,
        3,
        382,
        3615,
        8,
        382,
        1,
        382,
        1,
        382,
        3,
        382,
        3619,
        8,
        382,
        1,
        382,
        3,
        382,
        3622,
        8,
        382,
        1,
        382,
        1,
        382,
        3,
        382,
        3626,
        8,
        382,
        3,
        382,
        3628,
        8,
        382,
        1,
        383,
        1,
        383,
        3,
        383,
        3632,
        8,
        383,
        1,
        383,
        1,
        383,
        1,
        384,
        1,
        384,
        1,
        384,
        5,
        384,
        3639,
        8,
        384,
        10,
        384,
        12,
        384,
        3642,
        9,
        384,
        1,
        385,
        1,
        385,
        1,
        385,
        1,
        386,
        1,
        386,
        3,
        386,
        3649,
        8,
        386,
        1,
        386,
        1,
        386,
        1,
        387,
        1,
        387,
        1,
        388,
        1,
        388,
        1,
        388,
        1,
        388,
        1,
        388,
        1,
        388,
        1,
        388,
        1,
        388,
        1,
        388,
        3,
        388,
        3664,
        8,
        388,
        1,
        389,
        1,
        389,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        1,
        390,
        3,
        390,
        3686,
        8,
        390,
        1,
        391,
        1,
        391,
        1,
        391,
        1,
        392,
        1,
        392,
        3,
        392,
        3693,
        8,
        392,
        1,
        392,
        1,
        392,
        1,
        393,
        1,
        393,
        1,
        393,
        1,
        394,
        1,
        394,
        3,
        394,
        3702,
        8,
        394,
        1,
        394,
        1,
        394,
        1,
        394,
        1,
        395,
        1,
        395,
        3,
        395,
        3709,
        8,
        395,
        1,
        395,
        3,
        395,
        3712,
        8,
        395,
        1,
        395,
        1,
        395,
        1,
        396,
        1,
        396,
        1,
        396,
        1,
        397,
        1,
        397,
        3,
        397,
        3721,
        8,
        397,
        1,
        397,
        1,
        397,
        1,
        398,
        1,
        398,
        1,
        398,
        1,
        399,
        1,
        399,
        1,
        399,
        1,
        400,
        1,
        400,
        3,
        400,
        3733,
        8,
        400,
        1,
        400,
        1,
        400,
        3,
        400,
        3737,
        8,
        400,
        1,
        401,
        1,
        401,
        1,
        401,
        1,
        401,
        1,
        401,
        1,
        401,
        3,
        401,
        3745,
        8,
        401,
        1,
        402,
        1,
        402,
        1,
        403,
        1,
        403,
        3,
        403,
        3751,
        8,
        403,
        1,
        403,
        1,
        403,
        1,
        403,
        1,
        403,
        1,
        404,
        1,
        404,
        3,
        404,
        3759,
        8,
        404,
        1,
        404,
        1,
        404,
        1,
        404,
        1,
        404,
        1,
        405,
        1,
        405,
        1,
        406,
        1,
        406,
        1,
        406,
        1,
        406,
        1,
        406,
        1,
        406,
        1,
        406,
        5,
        406,
        3774,
        8,
        406,
        10,
        406,
        12,
        406,
        3777,
        9,
        406,
        1,
        406,
        1,
        406,
        1,
        407,
        1,
        407,
        1,
        407,
        1,
        407,
        1,
        407,
        1,
        407,
        1,
        407,
        5,
        407,
        3788,
        8,
        407,
        10,
        407,
        12,
        407,
        3791,
        9,
        407,
        1,
        407,
        1,
        407,
        1,
        408,
        1,
        408,
        1,
        408,
        1,
        408,
        1,
        408,
        1,
        408,
        1,
        408,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        3,
        409,
        3809,
        8,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        3,
        409,
        3814,
        8,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        3,
        409,
        3820,
        8,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        1,
        409,
        3,
        409,
        3846,
        8,
        409,
        1,
        409,
        5,
        409,
        3849,
        8,
        409,
        10,
        409,
        12,
        409,
        3852,
        9,
        409,
        1,
        410,
        1,
        410,
        1,
        410,
        1,
        410,
        1,
        410,
        1,
        410,
        3,
        410,
        3860,
        8,
        410,
        1,
        411,
        1,
        411,
        1,
        412,
        1,
        412,
        1,
        412,
        1,
        412,
        1,
        412,
        3,
        412,
        3869,
        8,
        412,
        1,
        413,
        1,
        413,
        1,
        413,
        1,
        413,
        1,
        413,
        1,
        413,
        1,
        413,
        1,
        414,
        1,
        414,
        1,
        414,
        1,
        414,
        1,
        414,
        1,
        415,
        1,
        415,
        1,
        415,
        1,
        415,
        1,
        415,
        1,
        416,
        1,
        416,
        1,
        416,
        1,
        416,
        1,
        416,
        3,
        416,
        3893,
        8,
        416,
        1,
        416,
        1,
        416,
        1,
        417,
        1,
        417,
        1,
        417,
        1,
        417,
        1,
        417,
        3,
        417,
        3902,
        8,
        417,
        1,
        417,
        1,
        417,
        1,
        418,
        1,
        418,
        1,
        419,
        1,
        419,
        1,
        420,
        1,
        420,
        1,
        421,
        1,
        421,
        1,
        421,
        1,
        421,
        1,
        421,
        1,
        421,
        1,
        421,
        1,
        421,
        1,
        421,
        1,
        421,
        1,
        421,
        3,
        421,
        3923,
        8,
        421,
        1,
        421,
        1,
        421,
        1,
        421,
        5,
        421,
        3928,
        8,
        421,
        10,
        421,
        12,
        421,
        3931,
        9,
        421,
        1,
        422,
        1,
        422,
        1,
        422,
        1,
        422,
        1,
        423,
        1,
        423,
        3,
        423,
        3939,
        8,
        423,
        1,
        424,
        1,
        424,
        1,
        424,
        1,
        424,
        1,
        424,
        1,
        424,
        1,
        424,
        1,
        424,
        1,
        424,
        1,
        424,
        1,
        424,
        1,
        424,
        3,
        424,
        3953,
        8,
        424,
        1,
        425,
        1,
        425,
        3,
        425,
        3957,
        8,
        425,
        1,
        426,
        1,
        426,
        3,
        426,
        3961,
        8,
        426,
        1,
        427,
        1,
        427,
        3,
        427,
        3965,
        8,
        427,
        1,
        428,
        1,
        428,
        1,
        429,
        1,
        429,
        1,
        429,
        1,
        429,
        1,
        429,
        1,
        429,
        1,
        430,
        1,
        430,
        1,
        430,
        1,
        431,
        1,
        431,
        3,
        431,
        3980,
        8,
        431,
        1,
        432,
        1,
        432,
        1,
        432,
        1,
        432,
        1,
        432,
        1,
        432,
        1,
        432,
        1,
        432,
        1,
        432,
        1,
        432,
        1,
        432,
        1,
        432,
        4,
        432,
        3994,
        8,
        432,
        11,
        432,
        12,
        432,
        3995,
        1,
        432,
        1,
        432,
        3,
        432,
        4000,
        8,
        432,
        1,
        433,
        1,
        433,
        3,
        433,
        4004,
        8,
        433,
        1,
        434,
        1,
        434,
        1,
        434,
        4,
        434,
        4009,
        8,
        434,
        11,
        434,
        12,
        434,
        4010,
        1,
        434,
        3,
        434,
        4014,
        8,
        434,
        1,
        434,
        1,
        434,
        1,
        435,
        1,
        435,
        4,
        435,
        4020,
        8,
        435,
        11,
        435,
        12,
        435,
        4021,
        1,
        435,
        3,
        435,
        4025,
        8,
        435,
        1,
        435,
        1,
        435,
        1,
        436,
        1,
        436,
        1,
        436,
        1,
        436,
        1,
        436,
        1,
        437,
        1,
        437,
        1,
        437,
        1,
        437,
        1,
        437,
        1,
        438,
        1,
        438,
        1,
        438,
        1,
        439,
        1,
        439,
        3,
        439,
        4044,
        8,
        439,
        1,
        440,
        1,
        440,
        1,
        440,
        5,
        440,
        4049,
        8,
        440,
        10,
        440,
        12,
        440,
        4052,
        9,
        440,
        1,
        441,
        1,
        441,
        1,
        441,
        1,
        441,
        1,
        441,
        1,
        441,
        1,
        441,
        1,
        441,
        1,
        441,
        1,
        441,
        1,
        441,
        3,
        441,
        4065,
        8,
        441,
        1,
        442,
        1,
        442,
        3,
        442,
        4069,
        8,
        442,
        1,
        443,
        1,
        443,
        1,
        444,
        1,
        444,
        1,
        444,
        1,
        444,
        1,
        444,
        1,
        444,
        1,
        444,
        1,
        445,
        1,
        445,
        3,
        445,
        4082,
        8,
        445,
        1,
        446,
        1,
        446,
        1,
        447,
        1,
        447,
        1,
        447,
        1,
        447,
        1,
        447,
        1,
        447,
        3,
        447,
        4092,
        8,
        447,
        1,
        448,
        1,
        448,
        1,
        448,
        3,
        448,
        4097,
        8,
        448,
        1,
        448,
        1,
        448,
        1,
        448,
        1,
        449,
        1,
        449,
        1,
        449,
        1,
        449,
        1,
        449,
        1,
        449,
        1,
        449,
        1,
        450,
        1,
        450,
        1,
        451,
        1,
        451,
        1,
        452,
        1,
        452,
        1,
        453,
        3,
        453,
        4116,
        8,
        453,
        1,
        453,
        1,
        453,
        1,
        454,
        1,
        454,
        1,
        455,
        1,
        455,
        1,
        455,
        1,
        455,
        1,
        455,
        1,
        456,
        1,
        456,
        1,
        457,
        1,
        457,
        1,
        458,
        1,
        458,
        1,
        459,
        1,
        459,
        1,
        459,
        1,
        459,
        1,
        459,
        1,
        460,
        1,
        460,
        5,
        460,
        4140,
        8,
        460,
        10,
        460,
        12,
        460,
        4143,
        9,
        460,
        1,
        461,
        1,
        461,
        1,
        462,
        1,
        462,
        1,
        462,
        1,
        462,
        1,
        462,
        1,
        463,
        1,
        463,
        1,
        464,
        1,
        464,
        3,
        464,
        4156,
        8,
        464,
        1,
        465,
        1,
        465,
        1,
        465,
        1,
        465,
        1,
        465,
        1,
        465,
        1,
        465,
        1,
        466,
        1,
        466,
        1,
        466,
        1,
        466,
        1,
        466,
        1,
        467,
        1,
        467,
        1,
        468,
        3,
        468,
        4173,
        8,
        468,
        1,
        468,
        1,
        468,
        3,
        468,
        4177,
        8,
        468,
        1,
        468,
        1,
        468,
        1,
        469,
        1,
        469,
        1,
        469,
        5,
        469,
        4184,
        8,
        469,
        10,
        469,
        12,
        469,
        4187,
        9,
        469,
        1,
        470,
        1,
        470,
        1,
        471,
        3,
        471,
        4192,
        8,
        471,
        1,
        471,
        1,
        471,
        1,
        472,
        1,
        472,
        3,
        472,
        4198,
        8,
        472,
        1,
        472,
        1,
        472,
        1,
        473,
        1,
        473,
        1,
        473,
        5,
        473,
        4205,
        8,
        473,
        10,
        473,
        12,
        473,
        4208,
        9,
        473,
        1,
        474,
        1,
        474,
        1,
        474,
        1,
        474,
        1,
        475,
        1,
        475,
        1,
        476,
        1,
        476,
        1,
        476,
        1,
        476,
        1,
        476,
        3,
        476,
        4221,
        8,
        476,
        1,
        476,
        1,
        476,
        1,
        476,
        1,
        476,
        1,
        476,
        1,
        476,
        5,
        476,
        4229,
        8,
        476,
        10,
        476,
        12,
        476,
        4232,
        9,
        476,
        1,
        477,
        1,
        477,
        1,
        477,
        1,
        477,
        1,
        477,
        1,
        477,
        1,
        477,
        1,
        477,
        1,
        477,
        1,
        477,
        1,
        477,
        1,
        477,
        1,
        477,
        3,
        477,
        4247,
        8,
        477,
        1,
        478,
        1,
        478,
        1,
        478,
        3,
        478,
        4252,
        8,
        478,
        1,
        479,
        1,
        479,
        1,
        479,
        1,
        479,
        1,
        479,
        1,
        479,
        1,
        479,
        1,
        479,
        1,
        479,
        1,
        479,
        3,
        479,
        4264,
        8,
        479,
        1,
        480,
        1,
        480,
        1,
        481,
        1,
        481,
        1,
        481,
        1,
        481,
        1,
        481,
        1,
        482,
        1,
        482,
        1,
        482,
        1,
        482,
        1,
        482,
        1,
        483,
        1,
        483,
        1,
        483,
        1,
        483,
        1,
        483,
        1,
        484,
        1,
        484,
        1,
        484,
        1,
        484,
        1,
        484,
        1,
        485,
        1,
        485,
        1,
        485,
        1,
        485,
        1,
        485,
        1,
        485,
        1,
        485,
        1,
        486,
        1,
        486,
        1,
        487,
        1,
        487,
        1,
        488,
        1,
        488,
        1,
        488,
        1,
        488,
        1,
        488,
        1,
        489,
        1,
        489,
        1,
        490,
        1,
        490,
        1,
        490,
        1,
        490,
        1,
        490,
        1,
        490,
        1,
        490,
        1,
        491,
        1,
        491,
        1,
        492,
        1,
        492,
        1,
        493,
        1,
        493,
        1,
        493,
        1,
        493,
        1,
        493,
        1,
        494,
        1,
        494,
        1,
        494,
        1,
        494,
        1,
        494,
        1,
        495,
        1,
        495,
        1,
        495,
        1,
        495,
        1,
        495,
        1,
        496,
        1,
        496,
        1,
        496,
        1,
        496,
        1,
        496,
        1,
        496,
        1,
        496,
        1,
        497,
        1,
        497,
        1,
        498,
        1,
        498,
        1,
        499,
        1,
        499,
        1,
        499,
        1,
        499,
        1,
        499,
        1,
        500,
        1,
        500,
        1,
        500,
        1,
        500,
        1,
        500,
        1,
        501,
        1,
        501,
        1,
        501,
        1,
        501,
        1,
        501,
        1,
        502,
        1,
        502,
        1,
        503,
        1,
        503,
        1,
        504,
        3,
        504,
        4363,
        8,
        504,
        1,
        504,
        3,
        504,
        4366,
        8,
        504,
        1,
        504,
        3,
        504,
        4369,
        8,
        504,
        1,
        504,
        1,
        504,
        1,
        505,
        1,
        505,
        1,
        506,
        1,
        506,
        1,
        507,
        1,
        507,
        1,
        508,
        1,
        508,
        1,
        509,
        1,
        509,
        1,
        510,
        1,
        510,
        1,
        511,
        1,
        511,
        1,
        511,
        1,
        511,
        1,
        511,
        3,
        511,
        4390,
        8,
        511,
        1,
        512,
        1,
        512,
        1,
        512,
        1,
        512,
        3,
        512,
        4396,
        8,
        512,
        1,
        512,
        3,
        512,
        4399,
        8,
        512,
        1,
        513,
        1,
        513,
        1,
        513,
        1,
        513,
        3,
        513,
        4405,
        8,
        513,
        1,
        513,
        3,
        513,
        4408,
        8,
        513,
        1,
        514,
        1,
        514,
        1,
        514,
        3,
        514,
        4413,
        8,
        514,
        1,
        514,
        3,
        514,
        4416,
        8,
        514,
        1,
        515,
        1,
        515,
        1,
        515,
        1,
        515,
        3,
        515,
        4422,
        8,
        515,
        1,
        515,
        3,
        515,
        4425,
        8,
        515,
        1,
        516,
        1,
        516,
        1,
        516,
        1,
        516,
        3,
        516,
        4431,
        8,
        516,
        1,
        516,
        3,
        516,
        4434,
        8,
        516,
        1,
        517,
        1,
        517,
        3,
        517,
        4438,
        8,
        517,
        1,
        518,
        1,
        518,
        3,
        518,
        4442,
        8,
        518,
        1,
        519,
        1,
        519,
        3,
        519,
        4446,
        8,
        519,
        1,
        520,
        1,
        520,
        1,
        521,
        1,
        521,
        1,
        521,
        1,
        521,
        1,
        521,
        3,
        521,
        4455,
        8,
        521,
        1,
        522,
        1,
        522,
        1,
        522,
        1,
        522,
        1,
        523,
        1,
        523,
        1,
        524,
        1,
        524,
        1,
        525,
        1,
        525,
        3,
        525,
        4467,
        8,
        525,
        1,
        526,
        1,
        526,
        1,
        526,
        1,
        526,
        1,
        526,
        1,
        527,
        1,
        527,
        3,
        527,
        4476,
        8,
        527,
        1,
        528,
        1,
        528,
        1,
        529,
        1,
        529,
        1,
        530,
        1,
        530,
        1,
        531,
        1,
        531,
        1,
        532,
        1,
        532,
        3,
        532,
        4488,
        8,
        532,
        1,
        533,
        1,
        533,
        1,
        534,
        1,
        534,
        1,
        535,
        1,
        535,
        1,
        536,
        1,
        536,
        1,
        537,
        1,
        537,
        3,
        537,
        4500,
        8,
        537,
        1,
        538,
        1,
        538,
        1,
        539,
        1,
        539,
        1,
        540,
        1,
        540,
        1,
        541,
        1,
        541,
        1,
        542,
        1,
        542,
        1,
        543,
        1,
        543,
        1,
        544,
        1,
        544,
        1,
        545,
        1,
        545,
        1,
        546,
        1,
        546,
        1,
        547,
        1,
        547,
        3,
        547,
        4522,
        8,
        547,
        1,
        548,
        1,
        548,
        1,
        548,
        1,
        548,
        1,
        548,
        1,
        548,
        1,
        548,
        1,
        548,
        3,
        548,
        4532,
        8,
        548,
        1,
        549,
        1,
        549,
        1,
        549,
        3,
        549,
        4537,
        8,
        549,
        1,
        550,
        1,
        550,
        1,
        550,
        1,
        551,
        1,
        551,
        1,
        551,
        1,
        552,
        1,
        552,
        1,
        552,
        1,
        553,
        1,
        553,
        1,
        554,
        1,
        554,
        1,
        555,
        1,
        555,
        1,
        555,
        3,
        555,
        4555,
        8,
        555,
        1,
        556,
        1,
        556,
        3,
        556,
        4559,
        8,
        556,
        1,
        557,
        1,
        557,
        1,
        558,
        1,
        558,
        1,
        559,
        1,
        559,
        3,
        559,
        4567,
        8,
        559,
        1,
        560,
        1,
        560,
        1,
        560,
        1,
        560,
        1,
        560,
        3,
        560,
        4574,
        8,
        560,
        1,
        561,
        1,
        561,
        1,
        562,
        1,
        562,
        1,
        563,
        1,
        563,
        1,
        564,
        1,
        564,
        1,
        565,
        1,
        565,
        1,
        566,
        1,
        566,
        1,
        567,
        1,
        567,
        1,
        568,
        1,
        568,
        1,
        568,
        1,
        569,
        1,
        569,
        1,
        570,
        1,
        570,
        1,
        571,
        1,
        571,
        1,
        572,
        1,
        572,
        1,
        573,
        1,
        573,
        1,
        573,
        0,
        8,
        184,
        428,
        466,
        468,
        674,
        818,
        842,
        952,
        574,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        122,
        124,
        126,
        128,
        130,
        132,
        134,
        136,
        138,
        140,
        142,
        144,
        146,
        148,
        150,
        152,
        154,
        156,
        158,
        160,
        162,
        164,
        166,
        168,
        170,
        172,
        174,
        176,
        178,
        180,
        182,
        184,
        186,
        188,
        190,
        192,
        194,
        196,
        198,
        200,
        202,
        204,
        206,
        208,
        210,
        212,
        214,
        216,
        218,
        220,
        222,
        224,
        226,
        228,
        230,
        232,
        234,
        236,
        238,
        240,
        242,
        244,
        246,
        248,
        250,
        252,
        254,
        256,
        258,
        260,
        262,
        264,
        266,
        268,
        270,
        272,
        274,
        276,
        278,
        280,
        282,
        284,
        286,
        288,
        290,
        292,
        294,
        296,
        298,
        300,
        302,
        304,
        306,
        308,
        310,
        312,
        314,
        316,
        318,
        320,
        322,
        324,
        326,
        328,
        330,
        332,
        334,
        336,
        338,
        340,
        342,
        344,
        346,
        348,
        350,
        352,
        354,
        356,
        358,
        360,
        362,
        364,
        366,
        368,
        370,
        372,
        374,
        376,
        378,
        380,
        382,
        384,
        386,
        388,
        390,
        392,
        394,
        396,
        398,
        400,
        402,
        404,
        406,
        408,
        410,
        412,
        414,
        416,
        418,
        420,
        422,
        424,
        426,
        428,
        430,
        432,
        434,
        436,
        438,
        440,
        442,
        444,
        446,
        448,
        450,
        452,
        454,
        456,
        458,
        460,
        462,
        464,
        466,
        468,
        470,
        472,
        474,
        476,
        478,
        480,
        482,
        484,
        486,
        488,
        490,
        492,
        494,
        496,
        498,
        500,
        502,
        504,
        506,
        508,
        510,
        512,
        514,
        516,
        518,
        520,
        522,
        524,
        526,
        528,
        530,
        532,
        534,
        536,
        538,
        540,
        542,
        544,
        546,
        548,
        550,
        552,
        554,
        556,
        558,
        560,
        562,
        564,
        566,
        568,
        570,
        572,
        574,
        576,
        578,
        580,
        582,
        584,
        586,
        588,
        590,
        592,
        594,
        596,
        598,
        600,
        602,
        604,
        606,
        608,
        610,
        612,
        614,
        616,
        618,
        620,
        622,
        624,
        626,
        628,
        630,
        632,
        634,
        636,
        638,
        640,
        642,
        644,
        646,
        648,
        650,
        652,
        654,
        656,
        658,
        660,
        662,
        664,
        666,
        668,
        670,
        672,
        674,
        676,
        678,
        680,
        682,
        684,
        686,
        688,
        690,
        692,
        694,
        696,
        698,
        700,
        702,
        704,
        706,
        708,
        710,
        712,
        714,
        716,
        718,
        720,
        722,
        724,
        726,
        728,
        730,
        732,
        734,
        736,
        738,
        740,
        742,
        744,
        746,
        748,
        750,
        752,
        754,
        756,
        758,
        760,
        762,
        764,
        766,
        768,
        770,
        772,
        774,
        776,
        778,
        780,
        782,
        784,
        786,
        788,
        790,
        792,
        794,
        796,
        798,
        800,
        802,
        804,
        806,
        808,
        810,
        812,
        814,
        816,
        818,
        820,
        822,
        824,
        826,
        828,
        830,
        832,
        834,
        836,
        838,
        840,
        842,
        844,
        846,
        848,
        850,
        852,
        854,
        856,
        858,
        860,
        862,
        864,
        866,
        868,
        870,
        872,
        874,
        876,
        878,
        880,
        882,
        884,
        886,
        888,
        890,
        892,
        894,
        896,
        898,
        900,
        902,
        904,
        906,
        908,
        910,
        912,
        914,
        916,
        918,
        920,
        922,
        924,
        926,
        928,
        930,
        932,
        934,
        936,
        938,
        940,
        942,
        944,
        946,
        948,
        950,
        952,
        954,
        956,
        958,
        960,
        962,
        964,
        966,
        968,
        970,
        972,
        974,
        976,
        978,
        980,
        982,
        984,
        986,
        988,
        990,
        992,
        994,
        996,
        998,
        1000,
        1002,
        1004,
        1006,
        1008,
        1010,
        1012,
        1014,
        1016,
        1018,
        1020,
        1022,
        1024,
        1026,
        1028,
        1030,
        1032,
        1034,
        1036,
        1038,
        1040,
        1042,
        1044,
        1046,
        1048,
        1050,
        1052,
        1054,
        1056,
        1058,
        1060,
        1062,
        1064,
        1066,
        1068,
        1070,
        1072,
        1074,
        1076,
        1078,
        1080,
        1082,
        1084,
        1086,
        1088,
        1090,
        1092,
        1094,
        1096,
        1098,
        1100,
        1102,
        1104,
        1106,
        1108,
        1110,
        1112,
        1114,
        1116,
        1118,
        1120,
        1122,
        1124,
        1126,
        1128,
        1130,
        1132,
        1134,
        1136,
        1138,
        1140,
        1142,
        1144,
        1146,
        0,
        45,
        2,
        0,
        53,
        53,
        165,
        165,
        1,
        0,
        65,
        66,
        2,
        0,
        79,
        79,
        150,
        150,
        2,
        0,
        159,
        159,
        304,
        304,
        4,
        0,
        277,
        277,
        311,
        311,
        315,
        315,
        320,
        320,
        2,
        0,
        166,
        166,
        168,
        168,
        2,
        0,
        102,
        102,
        290,
        290,
        2,
        0,
        127,
        127,
        359,
        359,
        6,
        0,
        335,
        336,
        339,
        339,
        346,
        346,
        355,
        355,
        372,
        372,
        383,
        383,
        2,
        0,
        28,
        29,
        77,
        78,
        2,
        0,
        159,
        159,
        195,
        195,
        3,
        0,
        67,
        67,
        106,
        106,
        374,
        374,
        1,
        0,
        104,
        105,
        2,
        0,
        283,
        283,
        318,
        318,
        2,
        0,
        314,
        314,
        346,
        346,
        2,
        0,
        314,
        314,
        383,
        383,
        2,
        0,
        211,
        211,
        331,
        331,
        1,
        0,
        37,
        38,
        1,
        0,
        73,
        74,
        2,
        0,
        26,
        26,
        133,
        133,
        6,
        0,
        334,
        334,
        342,
        342,
        345,
        345,
        364,
        364,
        366,
        366,
        371,
        371,
        2,
        0,
        372,
        372,
        375,
        375,
        2,
        0,
        358,
        358,
        382,
        382,
        2,
        0,
        161,
        161,
        232,
        232,
        2,
        0,
        129,
        129,
        181,
        181,
        2,
        0,
        141,
        141,
        222,
        222,
        3,
        0,
        40,
        40,
        142,
        142,
        183,
        183,
        6,
        0,
        33,
        33,
        56,
        56,
        62,
        62,
        144,
        145,
        200,
        201,
        203,
        203,
        2,
        0,
        22,
        22,
        80,
        80,
        1,
        0,
        169,
        170,
        1,
        0,
        51,
        52,
        2,
        0,
        42,
        42,
        157,
        157,
        8,
        0,
        21,
        21,
        30,
        30,
        32,
        32,
        59,
        61,
        75,
        75,
        174,
        174,
        192,
        193,
        204,
        205,
        1,
        0,
        48,
        49,
        3,
        0,
        39,
        39,
        128,
        128,
        209,
        209,
        1,
        0,
        296,
        299,
        1,
        0,
        4,
        5,
        2,
        0,
        71,
        71,
        208,
        208,
        1,
        0,
        3,
        4,
        3,
        0,
        9,
        10,
        13,
        13,
        15,
        15,
        1,
        0,
        16,
        19,
        2,
        0,
        301,
        301,
        319,
        319,
        2,
        0,
        285,
        285,
        308,
        308,
        2,
        0,
        284,
        284,
        307,
        307,
        1,
        0,
        277,
        323,
        4726,
        0,
        1157,
        1,
        0,
        0,
        0,
        2,
        1161,
        1,
        0,
        0,
        0,
        4,
        1179,
        1,
        0,
        0,
        0,
        6,
        1193,
        1,
        0,
        0,
        0,
        8,
        1197,
        1,
        0,
        0,
        0,
        10,
        1199,
        1,
        0,
        0,
        0,
        12,
        1207,
        1,
        0,
        0,
        0,
        14,
        1211,
        1,
        0,
        0,
        0,
        16,
        1216,
        1,
        0,
        0,
        0,
        18,
        1220,
        1,
        0,
        0,
        0,
        20,
        1225,
        1,
        0,
        0,
        0,
        22,
        1228,
        1,
        0,
        0,
        0,
        24,
        1235,
        1,
        0,
        0,
        0,
        26,
        1241,
        1,
        0,
        0,
        0,
        28,
        1248,
        1,
        0,
        0,
        0,
        30,
        1252,
        1,
        0,
        0,
        0,
        32,
        1272,
        1,
        0,
        0,
        0,
        34,
        1274,
        1,
        0,
        0,
        0,
        36,
        1277,
        1,
        0,
        0,
        0,
        38,
        1279,
        1,
        0,
        0,
        0,
        40,
        1284,
        1,
        0,
        0,
        0,
        42,
        1292,
        1,
        0,
        0,
        0,
        44,
        1298,
        1,
        0,
        0,
        0,
        46,
        1300,
        1,
        0,
        0,
        0,
        48,
        1302,
        1,
        0,
        0,
        0,
        50,
        1304,
        1,
        0,
        0,
        0,
        52,
        1308,
        1,
        0,
        0,
        0,
        54,
        1310,
        1,
        0,
        0,
        0,
        56,
        1314,
        1,
        0,
        0,
        0,
        58,
        1319,
        1,
        0,
        0,
        0,
        60,
        1327,
        1,
        0,
        0,
        0,
        62,
        1334,
        1,
        0,
        0,
        0,
        64,
        1336,
        1,
        0,
        0,
        0,
        66,
        1346,
        1,
        0,
        0,
        0,
        68,
        1348,
        1,
        0,
        0,
        0,
        70,
        1355,
        1,
        0,
        0,
        0,
        72,
        1365,
        1,
        0,
        0,
        0,
        74,
        1369,
        1,
        0,
        0,
        0,
        76,
        1373,
        1,
        0,
        0,
        0,
        78,
        1383,
        1,
        0,
        0,
        0,
        80,
        1387,
        1,
        0,
        0,
        0,
        82,
        1390,
        1,
        0,
        0,
        0,
        84,
        1398,
        1,
        0,
        0,
        0,
        86,
        1402,
        1,
        0,
        0,
        0,
        88,
        1409,
        1,
        0,
        0,
        0,
        90,
        1411,
        1,
        0,
        0,
        0,
        92,
        1417,
        1,
        0,
        0,
        0,
        94,
        1419,
        1,
        0,
        0,
        0,
        96,
        1425,
        1,
        0,
        0,
        0,
        98,
        1428,
        1,
        0,
        0,
        0,
        100,
        1434,
        1,
        0,
        0,
        0,
        102,
        1442,
        1,
        0,
        0,
        0,
        104,
        1444,
        1,
        0,
        0,
        0,
        106,
        1453,
        1,
        0,
        0,
        0,
        108,
        1461,
        1,
        0,
        0,
        0,
        110,
        1488,
        1,
        0,
        0,
        0,
        112,
        1512,
        1,
        0,
        0,
        0,
        114,
        1514,
        1,
        0,
        0,
        0,
        116,
        1517,
        1,
        0,
        0,
        0,
        118,
        1522,
        1,
        0,
        0,
        0,
        120,
        1533,
        1,
        0,
        0,
        0,
        122,
        1565,
        1,
        0,
        0,
        0,
        124,
        1567,
        1,
        0,
        0,
        0,
        126,
        1571,
        1,
        0,
        0,
        0,
        128,
        1583,
        1,
        0,
        0,
        0,
        130,
        1587,
        1,
        0,
        0,
        0,
        132,
        1591,
        1,
        0,
        0,
        0,
        134,
        1593,
        1,
        0,
        0,
        0,
        136,
        1598,
        1,
        0,
        0,
        0,
        138,
        1603,
        1,
        0,
        0,
        0,
        140,
        1605,
        1,
        0,
        0,
        0,
        142,
        1610,
        1,
        0,
        0,
        0,
        144,
        1616,
        1,
        0,
        0,
        0,
        146,
        1620,
        1,
        0,
        0,
        0,
        148,
        1626,
        1,
        0,
        0,
        0,
        150,
        1628,
        1,
        0,
        0,
        0,
        152,
        1631,
        1,
        0,
        0,
        0,
        154,
        1634,
        1,
        0,
        0,
        0,
        156,
        1645,
        1,
        0,
        0,
        0,
        158,
        1647,
        1,
        0,
        0,
        0,
        160,
        1653,
        1,
        0,
        0,
        0,
        162,
        1661,
        1,
        0,
        0,
        0,
        164,
        1665,
        1,
        0,
        0,
        0,
        166,
        1668,
        1,
        0,
        0,
        0,
        168,
        1678,
        1,
        0,
        0,
        0,
        170,
        1680,
        1,
        0,
        0,
        0,
        172,
        1684,
        1,
        0,
        0,
        0,
        174,
        1689,
        1,
        0,
        0,
        0,
        176,
        1694,
        1,
        0,
        0,
        0,
        178,
        1702,
        1,
        0,
        0,
        0,
        180,
        1704,
        1,
        0,
        0,
        0,
        182,
        1706,
        1,
        0,
        0,
        0,
        184,
        1708,
        1,
        0,
        0,
        0,
        186,
        1722,
        1,
        0,
        0,
        0,
        188,
        1736,
        1,
        0,
        0,
        0,
        190,
        1738,
        1,
        0,
        0,
        0,
        192,
        1742,
        1,
        0,
        0,
        0,
        194,
        1754,
        1,
        0,
        0,
        0,
        196,
        1756,
        1,
        0,
        0,
        0,
        198,
        1759,
        1,
        0,
        0,
        0,
        200,
        1763,
        1,
        0,
        0,
        0,
        202,
        1766,
        1,
        0,
        0,
        0,
        204,
        1774,
        1,
        0,
        0,
        0,
        206,
        1777,
        1,
        0,
        0,
        0,
        208,
        1783,
        1,
        0,
        0,
        0,
        210,
        1790,
        1,
        0,
        0,
        0,
        212,
        1794,
        1,
        0,
        0,
        0,
        214,
        1796,
        1,
        0,
        0,
        0,
        216,
        1799,
        1,
        0,
        0,
        0,
        218,
        1811,
        1,
        0,
        0,
        0,
        220,
        1814,
        1,
        0,
        0,
        0,
        222,
        1818,
        1,
        0,
        0,
        0,
        224,
        1820,
        1,
        0,
        0,
        0,
        226,
        1825,
        1,
        0,
        0,
        0,
        228,
        1828,
        1,
        0,
        0,
        0,
        230,
        1841,
        1,
        0,
        0,
        0,
        232,
        1843,
        1,
        0,
        0,
        0,
        234,
        1848,
        1,
        0,
        0,
        0,
        236,
        1851,
        1,
        0,
        0,
        0,
        238,
        1854,
        1,
        0,
        0,
        0,
        240,
        1856,
        1,
        0,
        0,
        0,
        242,
        1872,
        1,
        0,
        0,
        0,
        244,
        1879,
        1,
        0,
        0,
        0,
        246,
        1881,
        1,
        0,
        0,
        0,
        248,
        1885,
        1,
        0,
        0,
        0,
        250,
        1894,
        1,
        0,
        0,
        0,
        252,
        1902,
        1,
        0,
        0,
        0,
        254,
        1906,
        1,
        0,
        0,
        0,
        256,
        1909,
        1,
        0,
        0,
        0,
        258,
        1938,
        1,
        0,
        0,
        0,
        260,
        1946,
        1,
        0,
        0,
        0,
        262,
        1950,
        1,
        0,
        0,
        0,
        264,
        1953,
        1,
        0,
        0,
        0,
        266,
        1956,
        1,
        0,
        0,
        0,
        268,
        1961,
        1,
        0,
        0,
        0,
        270,
        1969,
        1,
        0,
        0,
        0,
        272,
        1976,
        1,
        0,
        0,
        0,
        274,
        1979,
        1,
        0,
        0,
        0,
        276,
        1986,
        1,
        0,
        0,
        0,
        278,
        1989,
        1,
        0,
        0,
        0,
        280,
        1993,
        1,
        0,
        0,
        0,
        282,
        1999,
        1,
        0,
        0,
        0,
        284,
        2007,
        1,
        0,
        0,
        0,
        286,
        2016,
        1,
        0,
        0,
        0,
        288,
        2024,
        1,
        0,
        0,
        0,
        290,
        2026,
        1,
        0,
        0,
        0,
        292,
        2029,
        1,
        0,
        0,
        0,
        294,
        2032,
        1,
        0,
        0,
        0,
        296,
        2036,
        1,
        0,
        0,
        0,
        298,
        2039,
        1,
        0,
        0,
        0,
        300,
        2047,
        1,
        0,
        0,
        0,
        302,
        2050,
        1,
        0,
        0,
        0,
        304,
        2061,
        1,
        0,
        0,
        0,
        306,
        2063,
        1,
        0,
        0,
        0,
        308,
        2066,
        1,
        0,
        0,
        0,
        310,
        2074,
        1,
        0,
        0,
        0,
        312,
        2081,
        1,
        0,
        0,
        0,
        314,
        2083,
        1,
        0,
        0,
        0,
        316,
        2092,
        1,
        0,
        0,
        0,
        318,
        2099,
        1,
        0,
        0,
        0,
        320,
        2102,
        1,
        0,
        0,
        0,
        322,
        2105,
        1,
        0,
        0,
        0,
        324,
        2108,
        1,
        0,
        0,
        0,
        326,
        2110,
        1,
        0,
        0,
        0,
        328,
        2118,
        1,
        0,
        0,
        0,
        330,
        2127,
        1,
        0,
        0,
        0,
        332,
        2136,
        1,
        0,
        0,
        0,
        334,
        2138,
        1,
        0,
        0,
        0,
        336,
        2144,
        1,
        0,
        0,
        0,
        338,
        2150,
        1,
        0,
        0,
        0,
        340,
        2164,
        1,
        0,
        0,
        0,
        342,
        2177,
        1,
        0,
        0,
        0,
        344,
        2181,
        1,
        0,
        0,
        0,
        346,
        2183,
        1,
        0,
        0,
        0,
        348,
        2187,
        1,
        0,
        0,
        0,
        350,
        2192,
        1,
        0,
        0,
        0,
        352,
        2194,
        1,
        0,
        0,
        0,
        354,
        2201,
        1,
        0,
        0,
        0,
        356,
        2203,
        1,
        0,
        0,
        0,
        358,
        2213,
        1,
        0,
        0,
        0,
        360,
        2219,
        1,
        0,
        0,
        0,
        362,
        2221,
        1,
        0,
        0,
        0,
        364,
        2229,
        1,
        0,
        0,
        0,
        366,
        2237,
        1,
        0,
        0,
        0,
        368,
        2245,
        1,
        0,
        0,
        0,
        370,
        2257,
        1,
        0,
        0,
        0,
        372,
        2274,
        1,
        0,
        0,
        0,
        374,
        2277,
        1,
        0,
        0,
        0,
        376,
        2288,
        1,
        0,
        0,
        0,
        378,
        2293,
        1,
        0,
        0,
        0,
        380,
        2297,
        1,
        0,
        0,
        0,
        382,
        2299,
        1,
        0,
        0,
        0,
        384,
        2304,
        1,
        0,
        0,
        0,
        386,
        2312,
        1,
        0,
        0,
        0,
        388,
        2314,
        1,
        0,
        0,
        0,
        390,
        2317,
        1,
        0,
        0,
        0,
        392,
        2321,
        1,
        0,
        0,
        0,
        394,
        2323,
        1,
        0,
        0,
        0,
        396,
        2326,
        1,
        0,
        0,
        0,
        398,
        2330,
        1,
        0,
        0,
        0,
        400,
        2338,
        1,
        0,
        0,
        0,
        402,
        2344,
        1,
        0,
        0,
        0,
        404,
        2353,
        1,
        0,
        0,
        0,
        406,
        2355,
        1,
        0,
        0,
        0,
        408,
        2359,
        1,
        0,
        0,
        0,
        410,
        2363,
        1,
        0,
        0,
        0,
        412,
        2367,
        1,
        0,
        0,
        0,
        414,
        2371,
        1,
        0,
        0,
        0,
        416,
        2375,
        1,
        0,
        0,
        0,
        418,
        2379,
        1,
        0,
        0,
        0,
        420,
        2383,
        1,
        0,
        0,
        0,
        422,
        2385,
        1,
        0,
        0,
        0,
        424,
        2398,
        1,
        0,
        0,
        0,
        426,
        2401,
        1,
        0,
        0,
        0,
        428,
        2413,
        1,
        0,
        0,
        0,
        430,
        2426,
        1,
        0,
        0,
        0,
        432,
        2428,
        1,
        0,
        0,
        0,
        434,
        2434,
        1,
        0,
        0,
        0,
        436,
        2436,
        1,
        0,
        0,
        0,
        438,
        2440,
        1,
        0,
        0,
        0,
        440,
        2450,
        1,
        0,
        0,
        0,
        442,
        2452,
        1,
        0,
        0,
        0,
        444,
        2461,
        1,
        0,
        0,
        0,
        446,
        2463,
        1,
        0,
        0,
        0,
        448,
        2467,
        1,
        0,
        0,
        0,
        450,
        2471,
        1,
        0,
        0,
        0,
        452,
        2475,
        1,
        0,
        0,
        0,
        454,
        2479,
        1,
        0,
        0,
        0,
        456,
        2483,
        1,
        0,
        0,
        0,
        458,
        2487,
        1,
        0,
        0,
        0,
        460,
        2494,
        1,
        0,
        0,
        0,
        462,
        2496,
        1,
        0,
        0,
        0,
        464,
        2506,
        1,
        0,
        0,
        0,
        466,
        2516,
        1,
        0,
        0,
        0,
        468,
        2526,
        1,
        0,
        0,
        0,
        470,
        2540,
        1,
        0,
        0,
        0,
        472,
        2542,
        1,
        0,
        0,
        0,
        474,
        2545,
        1,
        0,
        0,
        0,
        476,
        2550,
        1,
        0,
        0,
        0,
        478,
        2559,
        1,
        0,
        0,
        0,
        480,
        2561,
        1,
        0,
        0,
        0,
        482,
        2564,
        1,
        0,
        0,
        0,
        484,
        2567,
        1,
        0,
        0,
        0,
        486,
        2570,
        1,
        0,
        0,
        0,
        488,
        2573,
        1,
        0,
        0,
        0,
        490,
        2577,
        1,
        0,
        0,
        0,
        492,
        2581,
        1,
        0,
        0,
        0,
        494,
        2586,
        1,
        0,
        0,
        0,
        496,
        2588,
        1,
        0,
        0,
        0,
        498,
        2596,
        1,
        0,
        0,
        0,
        500,
        2598,
        1,
        0,
        0,
        0,
        502,
        2601,
        1,
        0,
        0,
        0,
        504,
        2604,
        1,
        0,
        0,
        0,
        506,
        2612,
        1,
        0,
        0,
        0,
        508,
        2616,
        1,
        0,
        0,
        0,
        510,
        2618,
        1,
        0,
        0,
        0,
        512,
        2621,
        1,
        0,
        0,
        0,
        514,
        2634,
        1,
        0,
        0,
        0,
        516,
        2636,
        1,
        0,
        0,
        0,
        518,
        2638,
        1,
        0,
        0,
        0,
        520,
        2641,
        1,
        0,
        0,
        0,
        522,
        2645,
        1,
        0,
        0,
        0,
        524,
        2653,
        1,
        0,
        0,
        0,
        526,
        2660,
        1,
        0,
        0,
        0,
        528,
        2662,
        1,
        0,
        0,
        0,
        530,
        2668,
        1,
        0,
        0,
        0,
        532,
        2670,
        1,
        0,
        0,
        0,
        534,
        2673,
        1,
        0,
        0,
        0,
        536,
        2676,
        1,
        0,
        0,
        0,
        538,
        2681,
        1,
        0,
        0,
        0,
        540,
        2687,
        1,
        0,
        0,
        0,
        542,
        2689,
        1,
        0,
        0,
        0,
        544,
        2696,
        1,
        0,
        0,
        0,
        546,
        2698,
        1,
        0,
        0,
        0,
        548,
        2700,
        1,
        0,
        0,
        0,
        550,
        2704,
        1,
        0,
        0,
        0,
        552,
        2719,
        1,
        0,
        0,
        0,
        554,
        2729,
        1,
        0,
        0,
        0,
        556,
        2732,
        1,
        0,
        0,
        0,
        558,
        2736,
        1,
        0,
        0,
        0,
        560,
        2740,
        1,
        0,
        0,
        0,
        562,
        2743,
        1,
        0,
        0,
        0,
        564,
        2752,
        1,
        0,
        0,
        0,
        566,
        2756,
        1,
        0,
        0,
        0,
        568,
        2759,
        1,
        0,
        0,
        0,
        570,
        2782,
        1,
        0,
        0,
        0,
        572,
        2784,
        1,
        0,
        0,
        0,
        574,
        2786,
        1,
        0,
        0,
        0,
        576,
        2790,
        1,
        0,
        0,
        0,
        578,
        2792,
        1,
        0,
        0,
        0,
        580,
        2802,
        1,
        0,
        0,
        0,
        582,
        2806,
        1,
        0,
        0,
        0,
        584,
        2814,
        1,
        0,
        0,
        0,
        586,
        2825,
        1,
        0,
        0,
        0,
        588,
        2839,
        1,
        0,
        0,
        0,
        590,
        2846,
        1,
        0,
        0,
        0,
        592,
        2848,
        1,
        0,
        0,
        0,
        594,
        2855,
        1,
        0,
        0,
        0,
        596,
        2858,
        1,
        0,
        0,
        0,
        598,
        2862,
        1,
        0,
        0,
        0,
        600,
        2864,
        1,
        0,
        0,
        0,
        602,
        2868,
        1,
        0,
        0,
        0,
        604,
        2879,
        1,
        0,
        0,
        0,
        606,
        2885,
        1,
        0,
        0,
        0,
        608,
        2898,
        1,
        0,
        0,
        0,
        610,
        2905,
        1,
        0,
        0,
        0,
        612,
        2912,
        1,
        0,
        0,
        0,
        614,
        2915,
        1,
        0,
        0,
        0,
        616,
        2919,
        1,
        0,
        0,
        0,
        618,
        2921,
        1,
        0,
        0,
        0,
        620,
        2925,
        1,
        0,
        0,
        0,
        622,
        2927,
        1,
        0,
        0,
        0,
        624,
        2931,
        1,
        0,
        0,
        0,
        626,
        2935,
        1,
        0,
        0,
        0,
        628,
        2939,
        1,
        0,
        0,
        0,
        630,
        2943,
        1,
        0,
        0,
        0,
        632,
        2947,
        1,
        0,
        0,
        0,
        634,
        2960,
        1,
        0,
        0,
        0,
        636,
        2971,
        1,
        0,
        0,
        0,
        638,
        2973,
        1,
        0,
        0,
        0,
        640,
        2975,
        1,
        0,
        0,
        0,
        642,
        2980,
        1,
        0,
        0,
        0,
        644,
        2984,
        1,
        0,
        0,
        0,
        646,
        2986,
        1,
        0,
        0,
        0,
        648,
        2992,
        1,
        0,
        0,
        0,
        650,
        2998,
        1,
        0,
        0,
        0,
        652,
        3004,
        1,
        0,
        0,
        0,
        654,
        3006,
        1,
        0,
        0,
        0,
        656,
        3008,
        1,
        0,
        0,
        0,
        658,
        3010,
        1,
        0,
        0,
        0,
        660,
        3019,
        1,
        0,
        0,
        0,
        662,
        3021,
        1,
        0,
        0,
        0,
        664,
        3029,
        1,
        0,
        0,
        0,
        666,
        3035,
        1,
        0,
        0,
        0,
        668,
        3043,
        1,
        0,
        0,
        0,
        670,
        3049,
        1,
        0,
        0,
        0,
        672,
        3052,
        1,
        0,
        0,
        0,
        674,
        3114,
        1,
        0,
        0,
        0,
        676,
        3135,
        1,
        0,
        0,
        0,
        678,
        3144,
        1,
        0,
        0,
        0,
        680,
        3146,
        1,
        0,
        0,
        0,
        682,
        3185,
        1,
        0,
        0,
        0,
        684,
        3222,
        1,
        0,
        0,
        0,
        686,
        3224,
        1,
        0,
        0,
        0,
        688,
        3226,
        1,
        0,
        0,
        0,
        690,
        3228,
        1,
        0,
        0,
        0,
        692,
        3232,
        1,
        0,
        0,
        0,
        694,
        3236,
        1,
        0,
        0,
        0,
        696,
        3240,
        1,
        0,
        0,
        0,
        698,
        3288,
        1,
        0,
        0,
        0,
        700,
        3334,
        1,
        0,
        0,
        0,
        702,
        3380,
        1,
        0,
        0,
        0,
        704,
        3382,
        1,
        0,
        0,
        0,
        706,
        3395,
        1,
        0,
        0,
        0,
        708,
        3397,
        1,
        0,
        0,
        0,
        710,
        3444,
        1,
        0,
        0,
        0,
        712,
        3448,
        1,
        0,
        0,
        0,
        714,
        3455,
        1,
        0,
        0,
        0,
        716,
        3469,
        1,
        0,
        0,
        0,
        718,
        3485,
        1,
        0,
        0,
        0,
        720,
        3487,
        1,
        0,
        0,
        0,
        722,
        3503,
        1,
        0,
        0,
        0,
        724,
        3517,
        1,
        0,
        0,
        0,
        726,
        3519,
        1,
        0,
        0,
        0,
        728,
        3532,
        1,
        0,
        0,
        0,
        730,
        3538,
        1,
        0,
        0,
        0,
        732,
        3542,
        1,
        0,
        0,
        0,
        734,
        3544,
        1,
        0,
        0,
        0,
        736,
        3549,
        1,
        0,
        0,
        0,
        738,
        3553,
        1,
        0,
        0,
        0,
        740,
        3556,
        1,
        0,
        0,
        0,
        742,
        3563,
        1,
        0,
        0,
        0,
        744,
        3571,
        1,
        0,
        0,
        0,
        746,
        3577,
        1,
        0,
        0,
        0,
        748,
        3579,
        1,
        0,
        0,
        0,
        750,
        3584,
        1,
        0,
        0,
        0,
        752,
        3592,
        1,
        0,
        0,
        0,
        754,
        3594,
        1,
        0,
        0,
        0,
        756,
        3599,
        1,
        0,
        0,
        0,
        758,
        3605,
        1,
        0,
        0,
        0,
        760,
        3609,
        1,
        0,
        0,
        0,
        762,
        3611,
        1,
        0,
        0,
        0,
        764,
        3627,
        1,
        0,
        0,
        0,
        766,
        3629,
        1,
        0,
        0,
        0,
        768,
        3635,
        1,
        0,
        0,
        0,
        770,
        3643,
        1,
        0,
        0,
        0,
        772,
        3646,
        1,
        0,
        0,
        0,
        774,
        3652,
        1,
        0,
        0,
        0,
        776,
        3663,
        1,
        0,
        0,
        0,
        778,
        3665,
        1,
        0,
        0,
        0,
        780,
        3667,
        1,
        0,
        0,
        0,
        782,
        3687,
        1,
        0,
        0,
        0,
        784,
        3690,
        1,
        0,
        0,
        0,
        786,
        3696,
        1,
        0,
        0,
        0,
        788,
        3699,
        1,
        0,
        0,
        0,
        790,
        3706,
        1,
        0,
        0,
        0,
        792,
        3715,
        1,
        0,
        0,
        0,
        794,
        3718,
        1,
        0,
        0,
        0,
        796,
        3724,
        1,
        0,
        0,
        0,
        798,
        3727,
        1,
        0,
        0,
        0,
        800,
        3736,
        1,
        0,
        0,
        0,
        802,
        3744,
        1,
        0,
        0,
        0,
        804,
        3746,
        1,
        0,
        0,
        0,
        806,
        3748,
        1,
        0,
        0,
        0,
        808,
        3756,
        1,
        0,
        0,
        0,
        810,
        3764,
        1,
        0,
        0,
        0,
        812,
        3766,
        1,
        0,
        0,
        0,
        814,
        3780,
        1,
        0,
        0,
        0,
        816,
        3794,
        1,
        0,
        0,
        0,
        818,
        3819,
        1,
        0,
        0,
        0,
        820,
        3859,
        1,
        0,
        0,
        0,
        822,
        3861,
        1,
        0,
        0,
        0,
        824,
        3868,
        1,
        0,
        0,
        0,
        826,
        3870,
        1,
        0,
        0,
        0,
        828,
        3877,
        1,
        0,
        0,
        0,
        830,
        3882,
        1,
        0,
        0,
        0,
        832,
        3887,
        1,
        0,
        0,
        0,
        834,
        3896,
        1,
        0,
        0,
        0,
        836,
        3905,
        1,
        0,
        0,
        0,
        838,
        3907,
        1,
        0,
        0,
        0,
        840,
        3909,
        1,
        0,
        0,
        0,
        842,
        3922,
        1,
        0,
        0,
        0,
        844,
        3932,
        1,
        0,
        0,
        0,
        846,
        3938,
        1,
        0,
        0,
        0,
        848,
        3952,
        1,
        0,
        0,
        0,
        850,
        3956,
        1,
        0,
        0,
        0,
        852,
        3960,
        1,
        0,
        0,
        0,
        854,
        3964,
        1,
        0,
        0,
        0,
        856,
        3966,
        1,
        0,
        0,
        0,
        858,
        3968,
        1,
        0,
        0,
        0,
        860,
        3974,
        1,
        0,
        0,
        0,
        862,
        3979,
        1,
        0,
        0,
        0,
        864,
        3999,
        1,
        0,
        0,
        0,
        866,
        4003,
        1,
        0,
        0,
        0,
        868,
        4005,
        1,
        0,
        0,
        0,
        870,
        4017,
        1,
        0,
        0,
        0,
        872,
        4028,
        1,
        0,
        0,
        0,
        874,
        4033,
        1,
        0,
        0,
        0,
        876,
        4038,
        1,
        0,
        0,
        0,
        878,
        4043,
        1,
        0,
        0,
        0,
        880,
        4045,
        1,
        0,
        0,
        0,
        882,
        4064,
        1,
        0,
        0,
        0,
        884,
        4068,
        1,
        0,
        0,
        0,
        886,
        4070,
        1,
        0,
        0,
        0,
        888,
        4072,
        1,
        0,
        0,
        0,
        890,
        4081,
        1,
        0,
        0,
        0,
        892,
        4083,
        1,
        0,
        0,
        0,
        894,
        4091,
        1,
        0,
        0,
        0,
        896,
        4093,
        1,
        0,
        0,
        0,
        898,
        4101,
        1,
        0,
        0,
        0,
        900,
        4108,
        1,
        0,
        0,
        0,
        902,
        4110,
        1,
        0,
        0,
        0,
        904,
        4112,
        1,
        0,
        0,
        0,
        906,
        4115,
        1,
        0,
        0,
        0,
        908,
        4119,
        1,
        0,
        0,
        0,
        910,
        4121,
        1,
        0,
        0,
        0,
        912,
        4126,
        1,
        0,
        0,
        0,
        914,
        4128,
        1,
        0,
        0,
        0,
        916,
        4130,
        1,
        0,
        0,
        0,
        918,
        4132,
        1,
        0,
        0,
        0,
        920,
        4137,
        1,
        0,
        0,
        0,
        922,
        4144,
        1,
        0,
        0,
        0,
        924,
        4146,
        1,
        0,
        0,
        0,
        926,
        4151,
        1,
        0,
        0,
        0,
        928,
        4155,
        1,
        0,
        0,
        0,
        930,
        4157,
        1,
        0,
        0,
        0,
        932,
        4164,
        1,
        0,
        0,
        0,
        934,
        4169,
        1,
        0,
        0,
        0,
        936,
        4172,
        1,
        0,
        0,
        0,
        938,
        4180,
        1,
        0,
        0,
        0,
        940,
        4188,
        1,
        0,
        0,
        0,
        942,
        4191,
        1,
        0,
        0,
        0,
        944,
        4195,
        1,
        0,
        0,
        0,
        946,
        4201,
        1,
        0,
        0,
        0,
        948,
        4209,
        1,
        0,
        0,
        0,
        950,
        4213,
        1,
        0,
        0,
        0,
        952,
        4220,
        1,
        0,
        0,
        0,
        954,
        4246,
        1,
        0,
        0,
        0,
        956,
        4251,
        1,
        0,
        0,
        0,
        958,
        4263,
        1,
        0,
        0,
        0,
        960,
        4265,
        1,
        0,
        0,
        0,
        962,
        4267,
        1,
        0,
        0,
        0,
        964,
        4272,
        1,
        0,
        0,
        0,
        966,
        4277,
        1,
        0,
        0,
        0,
        968,
        4282,
        1,
        0,
        0,
        0,
        970,
        4287,
        1,
        0,
        0,
        0,
        972,
        4294,
        1,
        0,
        0,
        0,
        974,
        4296,
        1,
        0,
        0,
        0,
        976,
        4298,
        1,
        0,
        0,
        0,
        978,
        4303,
        1,
        0,
        0,
        0,
        980,
        4305,
        1,
        0,
        0,
        0,
        982,
        4312,
        1,
        0,
        0,
        0,
        984,
        4314,
        1,
        0,
        0,
        0,
        986,
        4316,
        1,
        0,
        0,
        0,
        988,
        4321,
        1,
        0,
        0,
        0,
        990,
        4326,
        1,
        0,
        0,
        0,
        992,
        4331,
        1,
        0,
        0,
        0,
        994,
        4338,
        1,
        0,
        0,
        0,
        996,
        4340,
        1,
        0,
        0,
        0,
        998,
        4342,
        1,
        0,
        0,
        0,
        1000,
        4347,
        1,
        0,
        0,
        0,
        1002,
        4352,
        1,
        0,
        0,
        0,
        1004,
        4357,
        1,
        0,
        0,
        0,
        1006,
        4359,
        1,
        0,
        0,
        0,
        1008,
        4368,
        1,
        0,
        0,
        0,
        1010,
        4372,
        1,
        0,
        0,
        0,
        1012,
        4374,
        1,
        0,
        0,
        0,
        1014,
        4376,
        1,
        0,
        0,
        0,
        1016,
        4378,
        1,
        0,
        0,
        0,
        1018,
        4380,
        1,
        0,
        0,
        0,
        1020,
        4382,
        1,
        0,
        0,
        0,
        1022,
        4389,
        1,
        0,
        0,
        0,
        1024,
        4398,
        1,
        0,
        0,
        0,
        1026,
        4407,
        1,
        0,
        0,
        0,
        1028,
        4409,
        1,
        0,
        0,
        0,
        1030,
        4424,
        1,
        0,
        0,
        0,
        1032,
        4433,
        1,
        0,
        0,
        0,
        1034,
        4437,
        1,
        0,
        0,
        0,
        1036,
        4441,
        1,
        0,
        0,
        0,
        1038,
        4445,
        1,
        0,
        0,
        0,
        1040,
        4447,
        1,
        0,
        0,
        0,
        1042,
        4449,
        1,
        0,
        0,
        0,
        1044,
        4456,
        1,
        0,
        0,
        0,
        1046,
        4460,
        1,
        0,
        0,
        0,
        1048,
        4462,
        1,
        0,
        0,
        0,
        1050,
        4466,
        1,
        0,
        0,
        0,
        1052,
        4468,
        1,
        0,
        0,
        0,
        1054,
        4475,
        1,
        0,
        0,
        0,
        1056,
        4477,
        1,
        0,
        0,
        0,
        1058,
        4479,
        1,
        0,
        0,
        0,
        1060,
        4481,
        1,
        0,
        0,
        0,
        1062,
        4483,
        1,
        0,
        0,
        0,
        1064,
        4487,
        1,
        0,
        0,
        0,
        1066,
        4489,
        1,
        0,
        0,
        0,
        1068,
        4491,
        1,
        0,
        0,
        0,
        1070,
        4493,
        1,
        0,
        0,
        0,
        1072,
        4495,
        1,
        0,
        0,
        0,
        1074,
        4499,
        1,
        0,
        0,
        0,
        1076,
        4501,
        1,
        0,
        0,
        0,
        1078,
        4503,
        1,
        0,
        0,
        0,
        1080,
        4505,
        1,
        0,
        0,
        0,
        1082,
        4507,
        1,
        0,
        0,
        0,
        1084,
        4509,
        1,
        0,
        0,
        0,
        1086,
        4511,
        1,
        0,
        0,
        0,
        1088,
        4513,
        1,
        0,
        0,
        0,
        1090,
        4515,
        1,
        0,
        0,
        0,
        1092,
        4517,
        1,
        0,
        0,
        0,
        1094,
        4521,
        1,
        0,
        0,
        0,
        1096,
        4531,
        1,
        0,
        0,
        0,
        1098,
        4536,
        1,
        0,
        0,
        0,
        1100,
        4538,
        1,
        0,
        0,
        0,
        1102,
        4541,
        1,
        0,
        0,
        0,
        1104,
        4544,
        1,
        0,
        0,
        0,
        1106,
        4547,
        1,
        0,
        0,
        0,
        1108,
        4549,
        1,
        0,
        0,
        0,
        1110,
        4554,
        1,
        0,
        0,
        0,
        1112,
        4558,
        1,
        0,
        0,
        0,
        1114,
        4560,
        1,
        0,
        0,
        0,
        1116,
        4562,
        1,
        0,
        0,
        0,
        1118,
        4566,
        1,
        0,
        0,
        0,
        1120,
        4573,
        1,
        0,
        0,
        0,
        1122,
        4575,
        1,
        0,
        0,
        0,
        1124,
        4577,
        1,
        0,
        0,
        0,
        1126,
        4579,
        1,
        0,
        0,
        0,
        1128,
        4581,
        1,
        0,
        0,
        0,
        1130,
        4583,
        1,
        0,
        0,
        0,
        1132,
        4585,
        1,
        0,
        0,
        0,
        1134,
        4587,
        1,
        0,
        0,
        0,
        1136,
        4589,
        1,
        0,
        0,
        0,
        1138,
        4592,
        1,
        0,
        0,
        0,
        1140,
        4594,
        1,
        0,
        0,
        0,
        1142,
        4596,
        1,
        0,
        0,
        0,
        1144,
        4598,
        1,
        0,
        0,
        0,
        1146,
        4600,
        1,
        0,
        0,
        0,
        1148,
        1150,
        3,
        2,
        1,
        0,
        1149,
        1151,
        3,
        34,
        17,
        0,
        1150,
        1149,
        1,
        0,
        0,
        0,
        1150,
        1151,
        1,
        0,
        0,
        0,
        1151,
        1152,
        1,
        0,
        0,
        0,
        1152,
        1153,
        5,
        0,
        0,
        1,
        1153,
        1158,
        1,
        0,
        0,
        0,
        1154,
        1155,
        3,
        34,
        17,
        0,
        1155,
        1156,
        5,
        0,
        0,
        1,
        1156,
        1158,
        1,
        0,
        0,
        0,
        1157,
        1148,
        1,
        0,
        0,
        0,
        1157,
        1154,
        1,
        0,
        0,
        0,
        1158,
        1,
        1,
        0,
        0,
        0,
        1159,
        1162,
        3,
        4,
        2,
        0,
        1160,
        1162,
        3,
        6,
        3,
        0,
        1161,
        1159,
        1,
        0,
        0,
        0,
        1161,
        1160,
        1,
        0,
        0,
        0,
        1162,
        3,
        1,
        0,
        0,
        0,
        1163,
        1165,
        3,
        30,
        15,
        0,
        1164,
        1163,
        1,
        0,
        0,
        0,
        1165,
        1166,
        1,
        0,
        0,
        0,
        1166,
        1164,
        1,
        0,
        0,
        0,
        1166,
        1167,
        1,
        0,
        0,
        0,
        1167,
        1180,
        1,
        0,
        0,
        0,
        1168,
        1170,
        3,
        10,
        5,
        0,
        1169,
        1168,
        1,
        0,
        0,
        0,
        1170,
        1171,
        1,
        0,
        0,
        0,
        1171,
        1169,
        1,
        0,
        0,
        0,
        1171,
        1172,
        1,
        0,
        0,
        0,
        1172,
        1176,
        1,
        0,
        0,
        0,
        1173,
        1175,
        3,
        30,
        15,
        0,
        1174,
        1173,
        1,
        0,
        0,
        0,
        1175,
        1178,
        1,
        0,
        0,
        0,
        1176,
        1174,
        1,
        0,
        0,
        0,
        1176,
        1177,
        1,
        0,
        0,
        0,
        1177,
        1180,
        1,
        0,
        0,
        0,
        1178,
        1176,
        1,
        0,
        0,
        0,
        1179,
        1164,
        1,
        0,
        0,
        0,
        1179,
        1169,
        1,
        0,
        0,
        0,
        1180,
        5,
        1,
        0,
        0,
        0,
        1181,
        1186,
        3,
        38,
        19,
        0,
        1182,
        1184,
        3,
        52,
        26,
        0,
        1183,
        1185,
        3,
        8,
        4,
        0,
        1184,
        1183,
        1,
        0,
        0,
        0,
        1184,
        1185,
        1,
        0,
        0,
        0,
        1185,
        1187,
        1,
        0,
        0,
        0,
        1186,
        1182,
        1,
        0,
        0,
        0,
        1186,
        1187,
        1,
        0,
        0,
        0,
        1187,
        1194,
        1,
        0,
        0,
        0,
        1188,
        1190,
        3,
        52,
        26,
        0,
        1189,
        1191,
        3,
        8,
        4,
        0,
        1190,
        1189,
        1,
        0,
        0,
        0,
        1190,
        1191,
        1,
        0,
        0,
        0,
        1191,
        1194,
        1,
        0,
        0,
        0,
        1192,
        1194,
        3,
        8,
        4,
        0,
        1193,
        1181,
        1,
        0,
        0,
        0,
        1193,
        1188,
        1,
        0,
        0,
        0,
        1193,
        1192,
        1,
        0,
        0,
        0,
        1194,
        7,
        1,
        0,
        0,
        0,
        1195,
        1198,
        3,
        46,
        23,
        0,
        1196,
        1198,
        3,
        48,
        24,
        0,
        1197,
        1195,
        1,
        0,
        0,
        0,
        1197,
        1196,
        1,
        0,
        0,
        0,
        1198,
        9,
        1,
        0,
        0,
        0,
        1199,
        1200,
        5,
        188,
        0,
        0,
        1200,
        1205,
        5,
        190,
        0,
        0,
        1201,
        1206,
        3,
        12,
        6,
        0,
        1202,
        1206,
        3,
        14,
        7,
        0,
        1203,
        1206,
        3,
        16,
        8,
        0,
        1204,
        1206,
        3,
        20,
        10,
        0,
        1205,
        1201,
        1,
        0,
        0,
        0,
        1205,
        1202,
        1,
        0,
        0,
        0,
        1205,
        1203,
        1,
        0,
        0,
        0,
        1205,
        1204,
        1,
        0,
        0,
        0,
        1206,
        11,
        1,
        0,
        0,
        0,
        1207,
        1208,
        5,
        185,
        0,
        0,
        1208,
        1209,
        3,
        538,
        269,
        0,
        1209,
        13,
        1,
        0,
        0,
        0,
        1210,
        1212,
        5,
        305,
        0,
        0,
        1211,
        1210,
        1,
        0,
        0,
        0,
        1211,
        1212,
        1,
        0,
        0,
        0,
        1212,
        1213,
        1,
        0,
        0,
        0,
        1213,
        1214,
        5,
        289,
        0,
        0,
        1214,
        1215,
        3,
        88,
        44,
        0,
        1215,
        15,
        1,
        0,
        0,
        0,
        1216,
        1217,
        5,
        207,
        0,
        0,
        1217,
        1218,
        5,
        323,
        0,
        0,
        1218,
        1219,
        3,
        18,
        9,
        0,
        1219,
        17,
        1,
        0,
        0,
        0,
        1220,
        1221,
        3,
        1114,
        557,
        0,
        1221,
        19,
        1,
        0,
        0,
        0,
        1222,
        1226,
        3,
        22,
        11,
        0,
        1223,
        1226,
        3,
        24,
        12,
        0,
        1224,
        1226,
        3,
        26,
        13,
        0,
        1225,
        1222,
        1,
        0,
        0,
        0,
        1225,
        1223,
        1,
        0,
        0,
        0,
        1225,
        1224,
        1,
        0,
        0,
        0,
        1226,
        21,
        1,
        0,
        0,
        0,
        1227,
        1229,
        5,
        305,
        0,
        0,
        1228,
        1227,
        1,
        0,
        0,
        0,
        1228,
        1229,
        1,
        0,
        0,
        0,
        1229,
        1230,
        1,
        0,
        0,
        0,
        1230,
        1231,
        5,
        289,
        0,
        0,
        1231,
        1232,
        3,
        28,
        14,
        0,
        1232,
        1233,
        3,
        72,
        36,
        0,
        1233,
        23,
        1,
        0,
        0,
        0,
        1234,
        1236,
        5,
        278,
        0,
        0,
        1235,
        1234,
        1,
        0,
        0,
        0,
        1235,
        1236,
        1,
        0,
        0,
        0,
        1236,
        1237,
        1,
        0,
        0,
        0,
        1237,
        1238,
        5,
        313,
        0,
        0,
        1238,
        1239,
        3,
        28,
        14,
        0,
        1239,
        1240,
        3,
        78,
        39,
        0,
        1240,
        25,
        1,
        0,
        0,
        0,
        1241,
        1242,
        5,
        225,
        0,
        0,
        1242,
        1243,
        3,
        28,
        14,
        0,
        1243,
        1244,
        3,
        84,
        42,
        0,
        1244,
        27,
        1,
        0,
        0,
        0,
        1245,
        1246,
        5,
        108,
        0,
        0,
        1246,
        1247,
        5,
        152,
        0,
        0,
        1247,
        1249,
        5,
        89,
        0,
        0,
        1248,
        1245,
        1,
        0,
        0,
        0,
        1248,
        1249,
        1,
        0,
        0,
        0,
        1249,
        1250,
        1,
        0,
        0,
        0,
        1250,
        1251,
        3,
        36,
        18,
        0,
        1251,
        29,
        1,
        0,
        0,
        0,
        1252,
        1253,
        5,
        188,
        0,
        0,
        1253,
        1255,
        5,
        179,
        0,
        0,
        1254,
        1256,
        3,
        32,
        16,
        0,
        1255,
        1254,
        1,
        0,
        0,
        0,
        1255,
        1256,
        1,
        0,
        0,
        0,
        1256,
        31,
        1,
        0,
        0,
        0,
        1257,
        1259,
        5,
        22,
        0,
        0,
        1258,
        1257,
        1,
        0,
        0,
        0,
        1258,
        1259,
        1,
        0,
        0,
        0,
        1259,
        1260,
        1,
        0,
        0,
        0,
        1260,
        1273,
        7,
        0,
        0,
        0,
        1261,
        1273,
        5,
        185,
        0,
        0,
        1262,
        1264,
        5,
        305,
        0,
        0,
        1263,
        1262,
        1,
        0,
        0,
        0,
        1263,
        1264,
        1,
        0,
        0,
        0,
        1264,
        1265,
        1,
        0,
        0,
        0,
        1265,
        1273,
        5,
        289,
        0,
        0,
        1266,
        1267,
        5,
        207,
        0,
        0,
        1267,
        1273,
        5,
        323,
        0,
        0,
        1268,
        1270,
        5,
        164,
        0,
        0,
        1269,
        1268,
        1,
        0,
        0,
        0,
        1269,
        1270,
        1,
        0,
        0,
        0,
        1270,
        1271,
        1,
        0,
        0,
        0,
        1271,
        1273,
        3,
        36,
        18,
        0,
        1272,
        1258,
        1,
        0,
        0,
        0,
        1272,
        1261,
        1,
        0,
        0,
        0,
        1272,
        1263,
        1,
        0,
        0,
        0,
        1272,
        1266,
        1,
        0,
        0,
        0,
        1272,
        1269,
        1,
        0,
        0,
        0,
        1273,
        33,
        1,
        0,
        0,
        0,
        1274,
        1275,
        5,
        188,
        0,
        0,
        1275,
        1276,
        5,
        54,
        0,
        0,
        1276,
        35,
        1,
        0,
        0,
        0,
        1277,
        1278,
        5,
        326,
        0,
        0,
        1278,
        37,
        1,
        0,
        0,
        0,
        1279,
        1280,
        5,
        199,
        0,
        0,
        1280,
        1282,
        5,
        316,
        0,
        0,
        1281,
        1283,
        3,
        40,
        20,
        0,
        1282,
        1281,
        1,
        0,
        0,
        0,
        1282,
        1283,
        1,
        0,
        0,
        0,
        1283,
        39,
        1,
        0,
        0,
        0,
        1284,
        1289,
        3,
        42,
        21,
        0,
        1285,
        1286,
        5,
        360,
        0,
        0,
        1286,
        1288,
        3,
        42,
        21,
        0,
        1287,
        1285,
        1,
        0,
        0,
        0,
        1288,
        1291,
        1,
        0,
        0,
        0,
        1289,
        1287,
        1,
        0,
        0,
        0,
        1289,
        1290,
        1,
        0,
        0,
        0,
        1290,
        41,
        1,
        0,
        0,
        0,
        1291,
        1289,
        1,
        0,
        0,
        0,
        1292,
        1293,
        3,
        44,
        22,
        0,
        1293,
        43,
        1,
        0,
        0,
        0,
        1294,
        1295,
        5,
        306,
        0,
        0,
        1295,
        1299,
        5,
        303,
        0,
        0,
        1296,
        1297,
        5,
        306,
        0,
        0,
        1297,
        1299,
        5,
        322,
        0,
        0,
        1298,
        1294,
        1,
        0,
        0,
        0,
        1298,
        1296,
        1,
        0,
        0,
        0,
        1299,
        45,
        1,
        0,
        0,
        0,
        1300,
        1301,
        5,
        182,
        0,
        0,
        1301,
        47,
        1,
        0,
        0,
        0,
        1302,
        1303,
        5,
        57,
        0,
        0,
        1303,
        49,
        1,
        0,
        0,
        0,
        1304,
        1305,
        5,
        368,
        0,
        0,
        1305,
        1306,
        3,
        52,
        26,
        0,
        1306,
        1307,
        5,
        379,
        0,
        0,
        1307,
        51,
        1,
        0,
        0,
        0,
        1308,
        1309,
        3,
        58,
        29,
        0,
        1309,
        53,
        1,
        0,
        0,
        0,
        1310,
        1311,
        5,
        368,
        0,
        0,
        1311,
        1312,
        3,
        58,
        29,
        0,
        1312,
        1313,
        5,
        379,
        0,
        0,
        1313,
        55,
        1,
        0,
        0,
        0,
        1314,
        1315,
        5,
        368,
        0,
        0,
        1315,
        1316,
        3,
        58,
        29,
        0,
        1316,
        1317,
        5,
        379,
        0,
        0,
        1317,
        57,
        1,
        0,
        0,
        0,
        1318,
        1320,
        3,
        290,
        145,
        0,
        1319,
        1318,
        1,
        0,
        0,
        0,
        1319,
        1320,
        1,
        0,
        0,
        0,
        1320,
        1322,
        1,
        0,
        0,
        0,
        1321,
        1323,
        3,
        60,
        30,
        0,
        1322,
        1321,
        1,
        0,
        0,
        0,
        1322,
        1323,
        1,
        0,
        0,
        0,
        1323,
        1324,
        1,
        0,
        0,
        0,
        1324,
        1325,
        3,
        64,
        32,
        0,
        1325,
        59,
        1,
        0,
        0,
        0,
        1326,
        1328,
        3,
        62,
        31,
        0,
        1327,
        1326,
        1,
        0,
        0,
        0,
        1328,
        1329,
        1,
        0,
        0,
        0,
        1329,
        1327,
        1,
        0,
        0,
        0,
        1329,
        1330,
        1,
        0,
        0,
        0,
        1330,
        61,
        1,
        0,
        0,
        0,
        1331,
        1335,
        3,
        70,
        35,
        0,
        1332,
        1335,
        3,
        76,
        38,
        0,
        1333,
        1335,
        3,
        82,
        41,
        0,
        1334,
        1331,
        1,
        0,
        0,
        0,
        1334,
        1332,
        1,
        0,
        0,
        0,
        1334,
        1333,
        1,
        0,
        0,
        0,
        1335,
        63,
        1,
        0,
        0,
        0,
        1336,
        1340,
        3,
        66,
        33,
        0,
        1337,
        1339,
        3,
        68,
        34,
        0,
        1338,
        1337,
        1,
        0,
        0,
        0,
        1339,
        1342,
        1,
        0,
        0,
        0,
        1340,
        1338,
        1,
        0,
        0,
        0,
        1340,
        1341,
        1,
        0,
        0,
        0,
        1341,
        65,
        1,
        0,
        0,
        0,
        1342,
        1340,
        1,
        0,
        0,
        0,
        1343,
        1347,
        3,
        98,
        49,
        0,
        1344,
        1347,
        3,
        130,
        65,
        0,
        1345,
        1347,
        3,
        182,
        91,
        0,
        1346,
        1343,
        1,
        0,
        0,
        0,
        1346,
        1344,
        1,
        0,
        0,
        0,
        1346,
        1345,
        1,
        0,
        0,
        0,
        1347,
        67,
        1,
        0,
        0,
        0,
        1348,
        1350,
        5,
        149,
        0,
        0,
        1349,
        1351,
        3,
        502,
        251,
        0,
        1350,
        1349,
        1,
        0,
        0,
        0,
        1350,
        1351,
        1,
        0,
        0,
        0,
        1351,
        1352,
        1,
        0,
        0,
        0,
        1352,
        1353,
        3,
        66,
        33,
        0,
        1353,
        69,
        1,
        0,
        0,
        0,
        1354,
        1356,
        5,
        305,
        0,
        0,
        1355,
        1354,
        1,
        0,
        0,
        0,
        1355,
        1356,
        1,
        0,
        0,
        0,
        1356,
        1357,
        1,
        0,
        0,
        0,
        1357,
        1358,
        5,
        289,
        0,
        0,
        1358,
        1359,
        3,
        1092,
        546,
        0,
        1359,
        1360,
        3,
        72,
        36,
        0,
        1360,
        71,
        1,
        0,
        0,
        0,
        1361,
        1363,
        3,
        676,
        338,
        0,
        1362,
        1361,
        1,
        0,
        0,
        0,
        1362,
        1363,
        1,
        0,
        0,
        0,
        1363,
        1364,
        1,
        0,
        0,
        0,
        1364,
        1366,
        3,
        738,
        369,
        0,
        1365,
        1362,
        1,
        0,
        0,
        0,
        1365,
        1366,
        1,
        0,
        0,
        0,
        1366,
        1367,
        1,
        0,
        0,
        0,
        1367,
        1368,
        3,
        74,
        37,
        0,
        1368,
        73,
        1,
        0,
        0,
        0,
        1369,
        1370,
        5,
        364,
        0,
        0,
        1370,
        1371,
        3,
        88,
        44,
        0,
        1371,
        75,
        1,
        0,
        0,
        0,
        1372,
        1374,
        5,
        278,
        0,
        0,
        1373,
        1372,
        1,
        0,
        0,
        0,
        1373,
        1374,
        1,
        0,
        0,
        0,
        1374,
        1375,
        1,
        0,
        0,
        0,
        1375,
        1376,
        5,
        313,
        0,
        0,
        1376,
        1377,
        3,
        1092,
        546,
        0,
        1377,
        1378,
        3,
        78,
        39,
        0,
        1378,
        77,
        1,
        0,
        0,
        0,
        1379,
        1381,
        3,
        676,
        338,
        0,
        1380,
        1379,
        1,
        0,
        0,
        0,
        1380,
        1381,
        1,
        0,
        0,
        0,
        1381,
        1382,
        1,
        0,
        0,
        0,
        1382,
        1384,
        3,
        744,
        372,
        0,
        1383,
        1380,
        1,
        0,
        0,
        0,
        1383,
        1384,
        1,
        0,
        0,
        0,
        1384,
        1385,
        1,
        0,
        0,
        0,
        1385,
        1386,
        3,
        80,
        40,
        0,
        1386,
        79,
        1,
        0,
        0,
        0,
        1387,
        1388,
        5,
        364,
        0,
        0,
        1388,
        1389,
        3,
        92,
        46,
        0,
        1389,
        81,
        1,
        0,
        0,
        0,
        1390,
        1391,
        5,
        225,
        0,
        0,
        1391,
        1392,
        3,
        1092,
        546,
        0,
        1392,
        1393,
        3,
        84,
        42,
        0,
        1393,
        83,
        1,
        0,
        0,
        0,
        1394,
        1396,
        3,
        676,
        338,
        0,
        1395,
        1394,
        1,
        0,
        0,
        0,
        1395,
        1396,
        1,
        0,
        0,
        0,
        1396,
        1397,
        1,
        0,
        0,
        0,
        1397,
        1399,
        3,
        674,
        337,
        0,
        1398,
        1395,
        1,
        0,
        0,
        0,
        1398,
        1399,
        1,
        0,
        0,
        0,
        1399,
        1400,
        1,
        0,
        0,
        0,
        1400,
        1401,
        3,
        86,
        43,
        0,
        1401,
        85,
        1,
        0,
        0,
        0,
        1402,
        1403,
        5,
        364,
        0,
        0,
        1403,
        1404,
        3,
        818,
        409,
        0,
        1404,
        87,
        1,
        0,
        0,
        0,
        1405,
        1410,
        3,
        554,
        277,
        0,
        1406,
        1410,
        3,
        96,
        48,
        0,
        1407,
        1410,
        3,
        1058,
        529,
        0,
        1408,
        1410,
        3,
        90,
        45,
        0,
        1409,
        1405,
        1,
        0,
        0,
        0,
        1409,
        1406,
        1,
        0,
        0,
        0,
        1409,
        1407,
        1,
        0,
        0,
        0,
        1409,
        1408,
        1,
        0,
        0,
        0,
        1410,
        89,
        1,
        0,
        0,
        0,
        1411,
        1412,
        7,
        1,
        0,
        0,
        1412,
        91,
        1,
        0,
        0,
        0,
        1413,
        1418,
        3,
        94,
        47,
        0,
        1414,
        1418,
        3,
        564,
        282,
        0,
        1415,
        1418,
        3,
        96,
        48,
        0,
        1416,
        1418,
        3,
        1058,
        529,
        0,
        1417,
        1413,
        1,
        0,
        0,
        0,
        1417,
        1414,
        1,
        0,
        0,
        0,
        1417,
        1415,
        1,
        0,
        0,
        0,
        1417,
        1416,
        1,
        0,
        0,
        0,
        1418,
        93,
        1,
        0,
        0,
        0,
        1419,
        1420,
        3,
        56,
        28,
        0,
        1420,
        95,
        1,
        0,
        0,
        0,
        1421,
        1422,
        5,
        228,
        0,
        0,
        1422,
        1426,
        3,
        842,
        421,
        0,
        1423,
        1426,
        3,
        844,
        422,
        0,
        1424,
        1426,
        3,
        848,
        424,
        0,
        1425,
        1421,
        1,
        0,
        0,
        0,
        1425,
        1423,
        1,
        0,
        0,
        0,
        1425,
        1424,
        1,
        0,
        0,
        0,
        1426,
        97,
        1,
        0,
        0,
        0,
        1427,
        1429,
        3,
        100,
        50,
        0,
        1428,
        1427,
        1,
        0,
        0,
        0,
        1429,
        1430,
        1,
        0,
        0,
        0,
        1430,
        1428,
        1,
        0,
        0,
        0,
        1430,
        1431,
        1,
        0,
        0,
        0,
        1431,
        99,
        1,
        0,
        0,
        0,
        1432,
        1435,
        3,
        102,
        51,
        0,
        1433,
        1435,
        3,
        128,
        64,
        0,
        1434,
        1432,
        1,
        0,
        0,
        0,
        1434,
        1433,
        1,
        0,
        0,
        0,
        1435,
        101,
        1,
        0,
        0,
        0,
        1436,
        1443,
        3,
        104,
        52,
        0,
        1437,
        1443,
        3,
        106,
        53,
        0,
        1438,
        1443,
        3,
        108,
        54,
        0,
        1439,
        1443,
        3,
        118,
        59,
        0,
        1440,
        1443,
        3,
        120,
        60,
        0,
        1441,
        1443,
        3,
        126,
        63,
        0,
        1442,
        1436,
        1,
        0,
        0,
        0,
        1442,
        1437,
        1,
        0,
        0,
        0,
        1442,
        1438,
        1,
        0,
        0,
        0,
        1442,
        1439,
        1,
        0,
        0,
        0,
        1442,
        1440,
        1,
        0,
        0,
        0,
        1442,
        1441,
        1,
        0,
        0,
        0,
        1443,
        103,
        1,
        0,
        0,
        0,
        1444,
        1445,
        5,
        63,
        0,
        0,
        1445,
        1449,
        5,
        185,
        0,
        0,
        1446,
        1447,
        5,
        108,
        0,
        0,
        1447,
        1448,
        5,
        152,
        0,
        0,
        1448,
        1450,
        5,
        89,
        0,
        0,
        1449,
        1446,
        1,
        0,
        0,
        0,
        1449,
        1450,
        1,
        0,
        0,
        0,
        1450,
        1451,
        1,
        0,
        0,
        0,
        1451,
        1452,
        3,
        542,
        271,
        0,
        1452,
        105,
        1,
        0,
        0,
        0,
        1453,
        1454,
        5,
        82,
        0,
        0,
        1454,
        1457,
        5,
        185,
        0,
        0,
        1455,
        1456,
        5,
        108,
        0,
        0,
        1456,
        1458,
        5,
        89,
        0,
        0,
        1457,
        1455,
        1,
        0,
        0,
        0,
        1457,
        1458,
        1,
        0,
        0,
        0,
        1458,
        1459,
        1,
        0,
        0,
        0,
        1459,
        1460,
        3,
        542,
        271,
        0,
        1460,
        107,
        1,
        0,
        0,
        0,
        1461,
        1477,
        5,
        63,
        0,
        0,
        1462,
        1464,
        5,
        305,
        0,
        0,
        1463,
        1462,
        1,
        0,
        0,
        0,
        1463,
        1464,
        1,
        0,
        0,
        0,
        1464,
        1465,
        1,
        0,
        0,
        0,
        1465,
        1469,
        5,
        289,
        0,
        0,
        1466,
        1467,
        5,
        108,
        0,
        0,
        1467,
        1468,
        5,
        152,
        0,
        0,
        1468,
        1470,
        5,
        89,
        0,
        0,
        1469,
        1466,
        1,
        0,
        0,
        0,
        1469,
        1470,
        1,
        0,
        0,
        0,
        1470,
        1478,
        1,
        0,
        0,
        0,
        1471,
        1472,
        5,
        161,
        0,
        0,
        1472,
        1474,
        5,
        178,
        0,
        0,
        1473,
        1475,
        5,
        305,
        0,
        0,
        1474,
        1473,
        1,
        0,
        0,
        0,
        1474,
        1475,
        1,
        0,
        0,
        0,
        1475,
        1476,
        1,
        0,
        0,
        0,
        1476,
        1478,
        5,
        289,
        0,
        0,
        1477,
        1463,
        1,
        0,
        0,
        0,
        1477,
        1471,
        1,
        0,
        0,
        0,
        1478,
        1479,
        1,
        0,
        0,
        0,
        1479,
        1482,
        3,
        556,
        278,
        0,
        1480,
        1483,
        3,
        110,
        55,
        0,
        1481,
        1483,
        3,
        112,
        56,
        0,
        1482,
        1480,
        1,
        0,
        0,
        0,
        1482,
        1481,
        1,
        0,
        0,
        0,
        1483,
        1485,
        1,
        0,
        0,
        0,
        1484,
        1486,
        3,
        116,
        58,
        0,
        1485,
        1484,
        1,
        0,
        0,
        0,
        1485,
        1486,
        1,
        0,
        0,
        0,
        1486,
        109,
        1,
        0,
        0,
        0,
        1487,
        1489,
        3,
        676,
        338,
        0,
        1488,
        1487,
        1,
        0,
        0,
        0,
        1488,
        1489,
        1,
        0,
        0,
        0,
        1489,
        1490,
        1,
        0,
        0,
        0,
        1490,
        1495,
        5,
        25,
        0,
        0,
        1491,
        1493,
        5,
        305,
        0,
        0,
        1492,
        1491,
        1,
        0,
        0,
        0,
        1492,
        1493,
        1,
        0,
        0,
        0,
        1493,
        1494,
        1,
        0,
        0,
        0,
        1494,
        1496,
        5,
        289,
        0,
        0,
        1495,
        1492,
        1,
        0,
        0,
        0,
        1495,
        1496,
        1,
        0,
        0,
        0,
        1496,
        111,
        1,
        0,
        0,
        0,
        1497,
        1513,
        3,
        114,
        57,
        0,
        1498,
        1500,
        3,
        676,
        338,
        0,
        1499,
        1498,
        1,
        0,
        0,
        0,
        1499,
        1500,
        1,
        0,
        0,
        0,
        1500,
        1501,
        1,
        0,
        0,
        0,
        1501,
        1513,
        3,
        560,
        280,
        0,
        1502,
        1504,
        3,
        676,
        338,
        0,
        1503,
        1502,
        1,
        0,
        0,
        0,
        1503,
        1504,
        1,
        0,
        0,
        0,
        1504,
        1509,
        1,
        0,
        0,
        0,
        1505,
        1507,
        5,
        305,
        0,
        0,
        1506,
        1505,
        1,
        0,
        0,
        0,
        1506,
        1507,
        1,
        0,
        0,
        0,
        1507,
        1508,
        1,
        0,
        0,
        0,
        1508,
        1510,
        5,
        289,
        0,
        0,
        1509,
        1506,
        1,
        0,
        0,
        0,
        1509,
        1510,
        1,
        0,
        0,
        0,
        1510,
        1511,
        1,
        0,
        0,
        0,
        1511,
        1513,
        3,
        574,
        287,
        0,
        1512,
        1497,
        1,
        0,
        0,
        0,
        1512,
        1499,
        1,
        0,
        0,
        0,
        1512,
        1503,
        1,
        0,
        0,
        0,
        1513,
        113,
        1,
        0,
        0,
        0,
        1514,
        1515,
        5,
        131,
        0,
        0,
        1515,
        1516,
        3,
        88,
        44,
        0,
        1516,
        115,
        1,
        0,
        0,
        0,
        1517,
        1518,
        5,
        27,
        0,
        0,
        1518,
        1519,
        5,
        58,
        0,
        0,
        1519,
        1520,
        5,
        158,
        0,
        0,
        1520,
        1521,
        3,
        88,
        44,
        0,
        1521,
        117,
        1,
        0,
        0,
        0,
        1522,
        1524,
        5,
        82,
        0,
        0,
        1523,
        1525,
        5,
        305,
        0,
        0,
        1524,
        1523,
        1,
        0,
        0,
        0,
        1524,
        1525,
        1,
        0,
        0,
        0,
        1525,
        1526,
        1,
        0,
        0,
        0,
        1526,
        1529,
        5,
        289,
        0,
        0,
        1527,
        1528,
        5,
        108,
        0,
        0,
        1528,
        1530,
        5,
        89,
        0,
        0,
        1529,
        1527,
        1,
        0,
        0,
        0,
        1529,
        1530,
        1,
        0,
        0,
        0,
        1530,
        1531,
        1,
        0,
        0,
        0,
        1531,
        1532,
        3,
        556,
        278,
        0,
        1532,
        119,
        1,
        0,
        0,
        0,
        1533,
        1551,
        5,
        63,
        0,
        0,
        1534,
        1536,
        5,
        305,
        0,
        0,
        1535,
        1534,
        1,
        0,
        0,
        0,
        1535,
        1536,
        1,
        0,
        0,
        0,
        1536,
        1537,
        1,
        0,
        0,
        0,
        1537,
        1538,
        5,
        289,
        0,
        0,
        1538,
        1542,
        5,
        317,
        0,
        0,
        1539,
        1540,
        5,
        108,
        0,
        0,
        1540,
        1541,
        5,
        152,
        0,
        0,
        1541,
        1543,
        5,
        89,
        0,
        0,
        1542,
        1539,
        1,
        0,
        0,
        0,
        1542,
        1543,
        1,
        0,
        0,
        0,
        1543,
        1552,
        1,
        0,
        0,
        0,
        1544,
        1545,
        5,
        161,
        0,
        0,
        1545,
        1547,
        5,
        178,
        0,
        0,
        1546,
        1548,
        5,
        305,
        0,
        0,
        1547,
        1546,
        1,
        0,
        0,
        0,
        1547,
        1548,
        1,
        0,
        0,
        0,
        1548,
        1549,
        1,
        0,
        0,
        0,
        1549,
        1550,
        5,
        289,
        0,
        0,
        1550,
        1552,
        5,
        317,
        0,
        0,
        1551,
        1535,
        1,
        0,
        0,
        0,
        1551,
        1544,
        1,
        0,
        0,
        0,
        1552,
        1553,
        1,
        0,
        0,
        0,
        1553,
        1554,
        3,
        562,
        281,
        0,
        1554,
        1555,
        3,
        122,
        61,
        0,
        1555,
        121,
        1,
        0,
        0,
        0,
        1556,
        1558,
        5,
        27,
        0,
        0,
        1557,
        1556,
        1,
        0,
        0,
        0,
        1557,
        1558,
        1,
        0,
        0,
        0,
        1558,
        1559,
        1,
        0,
        0,
        0,
        1559,
        1566,
        3,
        124,
        62,
        0,
        1560,
        1566,
        3,
        114,
        57,
        0,
        1561,
        1563,
        5,
        27,
        0,
        0,
        1562,
        1561,
        1,
        0,
        0,
        0,
        1562,
        1563,
        1,
        0,
        0,
        0,
        1563,
        1564,
        1,
        0,
        0,
        0,
        1564,
        1566,
        3,
        574,
        287,
        0,
        1565,
        1557,
        1,
        0,
        0,
        0,
        1565,
        1560,
        1,
        0,
        0,
        0,
        1565,
        1562,
        1,
        0,
        0,
        0,
        1566,
        123,
        1,
        0,
        0,
        0,
        1567,
        1568,
        5,
        58,
        0,
        0,
        1568,
        1569,
        5,
        158,
        0,
        0,
        1569,
        1570,
        3,
        560,
        280,
        0,
        1570,
        125,
        1,
        0,
        0,
        0,
        1571,
        1573,
        5,
        82,
        0,
        0,
        1572,
        1574,
        5,
        305,
        0,
        0,
        1573,
        1572,
        1,
        0,
        0,
        0,
        1573,
        1574,
        1,
        0,
        0,
        0,
        1574,
        1575,
        1,
        0,
        0,
        0,
        1575,
        1576,
        5,
        289,
        0,
        0,
        1576,
        1579,
        5,
        317,
        0,
        0,
        1577,
        1578,
        5,
        108,
        0,
        0,
        1578,
        1580,
        5,
        89,
        0,
        0,
        1579,
        1577,
        1,
        0,
        0,
        0,
        1579,
        1580,
        1,
        0,
        0,
        0,
        1580,
        1581,
        1,
        0,
        0,
        0,
        1581,
        1582,
        3,
        562,
        281,
        0,
        1582,
        127,
        1,
        0,
        0,
        0,
        1583,
        1584,
        3,
        274,
        137,
        0,
        1584,
        129,
        1,
        0,
        0,
        0,
        1585,
        1588,
        3,
        132,
        66,
        0,
        1586,
        1588,
        3,
        138,
        69,
        0,
        1587,
        1585,
        1,
        0,
        0,
        0,
        1587,
        1586,
        1,
        0,
        0,
        0,
        1588,
        131,
        1,
        0,
        0,
        0,
        1589,
        1592,
        3,
        134,
        67,
        0,
        1590,
        1592,
        3,
        136,
        68,
        0,
        1591,
        1589,
        1,
        0,
        0,
        0,
        1591,
        1590,
        1,
        0,
        0,
        0,
        1592,
        133,
        1,
        0,
        0,
        0,
        1593,
        1594,
        3,
        292,
        146,
        0,
        1594,
        1596,
        3,
        142,
        71,
        0,
        1595,
        1597,
        3,
        244,
        122,
        0,
        1596,
        1595,
        1,
        0,
        0,
        0,
        1596,
        1597,
        1,
        0,
        0,
        0,
        1597,
        135,
        1,
        0,
        0,
        0,
        1598,
        1599,
        3,
        292,
        146,
        0,
        1599,
        1600,
        3,
        54,
        27,
        0,
        1600,
        137,
        1,
        0,
        0,
        0,
        1601,
        1604,
        3,
        140,
        70,
        0,
        1602,
        1604,
        3,
        54,
        27,
        0,
        1603,
        1601,
        1,
        0,
        0,
        0,
        1603,
        1602,
        1,
        0,
        0,
        0,
        1604,
        139,
        1,
        0,
        0,
        0,
        1605,
        1607,
        3,
        142,
        71,
        0,
        1606,
        1608,
        3,
        244,
        122,
        0,
        1607,
        1606,
        1,
        0,
        0,
        0,
        1607,
        1608,
        1,
        0,
        0,
        0,
        1608,
        141,
        1,
        0,
        0,
        0,
        1609,
        1611,
        3,
        144,
        72,
        0,
        1610,
        1609,
        1,
        0,
        0,
        0,
        1611,
        1612,
        1,
        0,
        0,
        0,
        1612,
        1610,
        1,
        0,
        0,
        0,
        1612,
        1613,
        1,
        0,
        0,
        0,
        1613,
        143,
        1,
        0,
        0,
        0,
        1614,
        1617,
        3,
        208,
        104,
        0,
        1615,
        1617,
        3,
        146,
        73,
        0,
        1616,
        1614,
        1,
        0,
        0,
        0,
        1616,
        1615,
        1,
        0,
        0,
        0,
        1617,
        145,
        1,
        0,
        0,
        0,
        1618,
        1621,
        3,
        148,
        74,
        0,
        1619,
        1621,
        3,
        180,
        90,
        0,
        1620,
        1618,
        1,
        0,
        0,
        0,
        1620,
        1619,
        1,
        0,
        0,
        0,
        1621,
        147,
        1,
        0,
        0,
        0,
        1622,
        1627,
        3,
        150,
        75,
        0,
        1623,
        1627,
        3,
        152,
        76,
        0,
        1624,
        1627,
        3,
        164,
        82,
        0,
        1625,
        1627,
        3,
        174,
        87,
        0,
        1626,
        1622,
        1,
        0,
        0,
        0,
        1626,
        1623,
        1,
        0,
        0,
        0,
        1626,
        1624,
        1,
        0,
        0,
        0,
        1626,
        1625,
        1,
        0,
        0,
        0,
        1627,
        149,
        1,
        0,
        0,
        0,
        1628,
        1629,
        5,
        110,
        0,
        0,
        1629,
        1630,
        3,
        324,
        162,
        0,
        1630,
        151,
        1,
        0,
        0,
        0,
        1631,
        1632,
        5,
        190,
        0,
        0,
        1632,
        1633,
        3,
        154,
        77,
        0,
        1633,
        153,
        1,
        0,
        0,
        0,
        1634,
        1639,
        3,
        156,
        78,
        0,
        1635,
        1636,
        5,
        360,
        0,
        0,
        1636,
        1638,
        3,
        156,
        78,
        0,
        1637,
        1635,
        1,
        0,
        0,
        0,
        1638,
        1641,
        1,
        0,
        0,
        0,
        1639,
        1637,
        1,
        0,
        0,
        0,
        1639,
        1640,
        1,
        0,
        0,
        0,
        1640,
        155,
        1,
        0,
        0,
        0,
        1641,
        1639,
        1,
        0,
        0,
        0,
        1642,
        1646,
        3,
        158,
        79,
        0,
        1643,
        1646,
        3,
        160,
        80,
        0,
        1644,
        1646,
        3,
        162,
        81,
        0,
        1645,
        1642,
        1,
        0,
        0,
        0,
        1645,
        1643,
        1,
        0,
        0,
        0,
        1645,
        1644,
        1,
        0,
        0,
        0,
        1646,
        157,
        1,
        0,
        0,
        0,
        1647,
        1648,
        3,
        912,
        456,
        0,
        1648,
        1649,
        5,
        374,
        0,
        0,
        1649,
        1650,
        3,
        1082,
        541,
        0,
        1650,
        1651,
        5,
        364,
        0,
        0,
        1651,
        1652,
        3,
        818,
        409,
        0,
        1652,
        159,
        1,
        0,
        0,
        0,
        1653,
        1654,
        3,
        912,
        456,
        0,
        1654,
        1655,
        5,
        364,
        0,
        0,
        1655,
        1657,
        5,
        368,
        0,
        0,
        1656,
        1658,
        3,
        398,
        199,
        0,
        1657,
        1656,
        1,
        0,
        0,
        0,
        1657,
        1658,
        1,
        0,
        0,
        0,
        1658,
        1659,
        1,
        0,
        0,
        0,
        1659,
        1660,
        5,
        379,
        0,
        0,
        1660,
        161,
        1,
        0,
        0,
        0,
        1661,
        1662,
        3,
        912,
        456,
        0,
        1662,
        1663,
        3,
        390,
        195,
        0,
        1663,
        1664,
        3,
        1080,
        540,
        0,
        1664,
        163,
        1,
        0,
        0,
        0,
        1665,
        1666,
        5,
        177,
        0,
        0,
        1666,
        1667,
        3,
        166,
        83,
        0,
        1667,
        165,
        1,
        0,
        0,
        0,
        1668,
        1673,
        3,
        168,
        84,
        0,
        1669,
        1670,
        5,
        360,
        0,
        0,
        1670,
        1672,
        3,
        168,
        84,
        0,
        1671,
        1669,
        1,
        0,
        0,
        0,
        1672,
        1675,
        1,
        0,
        0,
        0,
        1673,
        1671,
        1,
        0,
        0,
        0,
        1673,
        1674,
        1,
        0,
        0,
        0,
        1674,
        167,
        1,
        0,
        0,
        0,
        1675,
        1673,
        1,
        0,
        0,
        0,
        1676,
        1679,
        3,
        170,
        85,
        0,
        1677,
        1679,
        3,
        172,
        86,
        0,
        1678,
        1676,
        1,
        0,
        0,
        0,
        1678,
        1677,
        1,
        0,
        0,
        0,
        1679,
        169,
        1,
        0,
        0,
        0,
        1680,
        1681,
        3,
        912,
        456,
        0,
        1681,
        1682,
        5,
        374,
        0,
        0,
        1682,
        1683,
        3,
        1082,
        541,
        0,
        1683,
        171,
        1,
        0,
        0,
        0,
        1684,
        1685,
        3,
        912,
        456,
        0,
        1685,
        1686,
        3,
        390,
        195,
        0,
        1686,
        1687,
        3,
        1080,
        540,
        0,
        1687,
        173,
        1,
        0,
        0,
        0,
        1688,
        1690,
        7,
        2,
        0,
        0,
        1689,
        1688,
        1,
        0,
        0,
        0,
        1689,
        1690,
        1,
        0,
        0,
        0,
        1690,
        1691,
        1,
        0,
        0,
        0,
        1691,
        1692,
        5,
        76,
        0,
        0,
        1692,
        1693,
        3,
        176,
        88,
        0,
        1693,
        175,
        1,
        0,
        0,
        0,
        1694,
        1699,
        3,
        178,
        89,
        0,
        1695,
        1696,
        5,
        360,
        0,
        0,
        1696,
        1698,
        3,
        178,
        89,
        0,
        1697,
        1695,
        1,
        0,
        0,
        0,
        1698,
        1701,
        1,
        0,
        0,
        0,
        1699,
        1697,
        1,
        0,
        0,
        0,
        1699,
        1700,
        1,
        0,
        0,
        0,
        1700,
        177,
        1,
        0,
        0,
        0,
        1701,
        1699,
        1,
        0,
        0,
        0,
        1702,
        1703,
        3,
        818,
        409,
        0,
        1703,
        179,
        1,
        0,
        0,
        0,
        1704,
        1705,
        3,
        274,
        137,
        0,
        1705,
        181,
        1,
        0,
        0,
        0,
        1706,
        1707,
        3,
        184,
        92,
        0,
        1707,
        183,
        1,
        0,
        0,
        0,
        1708,
        1709,
        6,
        92,
        -1,
        0,
        1709,
        1710,
        3,
        190,
        95,
        0,
        1710,
        1717,
        1,
        0,
        0,
        0,
        1711,
        1712,
        10,
        2,
        0,
        0,
        1712,
        1713,
        3,
        186,
        93,
        0,
        1713,
        1714,
        3,
        190,
        95,
        0,
        1714,
        1716,
        1,
        0,
        0,
        0,
        1715,
        1711,
        1,
        0,
        0,
        0,
        1716,
        1719,
        1,
        0,
        0,
        0,
        1717,
        1715,
        1,
        0,
        0,
        0,
        1717,
        1718,
        1,
        0,
        0,
        0,
        1718,
        185,
        1,
        0,
        0,
        0,
        1719,
        1717,
        1,
        0,
        0,
        0,
        1720,
        1723,
        3,
        188,
        94,
        0,
        1721,
        1723,
        5,
        163,
        0,
        0,
        1722,
        1720,
        1,
        0,
        0,
        0,
        1722,
        1721,
        1,
        0,
        0,
        0,
        1723,
        187,
        1,
        0,
        0,
        0,
        1724,
        1726,
        5,
        220,
        0,
        0,
        1725,
        1727,
        3,
        902,
        451,
        0,
        1726,
        1725,
        1,
        0,
        0,
        0,
        1726,
        1727,
        1,
        0,
        0,
        0,
        1727,
        1737,
        1,
        0,
        0,
        0,
        1728,
        1730,
        5,
        88,
        0,
        0,
        1729,
        1731,
        3,
        902,
        451,
        0,
        1730,
        1729,
        1,
        0,
        0,
        0,
        1730,
        1731,
        1,
        0,
        0,
        0,
        1731,
        1737,
        1,
        0,
        0,
        0,
        1732,
        1734,
        5,
        125,
        0,
        0,
        1733,
        1735,
        3,
        902,
        451,
        0,
        1734,
        1733,
        1,
        0,
        0,
        0,
        1734,
        1735,
        1,
        0,
        0,
        0,
        1735,
        1737,
        1,
        0,
        0,
        0,
        1736,
        1724,
        1,
        0,
        0,
        0,
        1736,
        1728,
        1,
        0,
        0,
        0,
        1736,
        1732,
        1,
        0,
        0,
        0,
        1737,
        189,
        1,
        0,
        0,
        0,
        1738,
        1739,
        3,
        192,
        96,
        0,
        1739,
        191,
        1,
        0,
        0,
        0,
        1740,
        1743,
        3,
        194,
        97,
        0,
        1741,
        1743,
        3,
        204,
        102,
        0,
        1742,
        1740,
        1,
        0,
        0,
        0,
        1742,
        1741,
        1,
        0,
        0,
        0,
        1743,
        193,
        1,
        0,
        0,
        0,
        1744,
        1746,
        3,
        196,
        98,
        0,
        1745,
        1744,
        1,
        0,
        0,
        0,
        1746,
        1749,
        1,
        0,
        0,
        0,
        1747,
        1745,
        1,
        0,
        0,
        0,
        1747,
        1748,
        1,
        0,
        0,
        0,
        1748,
        1750,
        1,
        0,
        0,
        0,
        1749,
        1747,
        1,
        0,
        0,
        0,
        1750,
        1755,
        3,
        198,
        99,
        0,
        1751,
        1755,
        3,
        200,
        100,
        0,
        1752,
        1755,
        3,
        202,
        101,
        0,
        1753,
        1755,
        3,
        256,
        128,
        0,
        1754,
        1747,
        1,
        0,
        0,
        0,
        1754,
        1751,
        1,
        0,
        0,
        0,
        1754,
        1752,
        1,
        0,
        0,
        0,
        1754,
        1753,
        1,
        0,
        0,
        0,
        1755,
        195,
        1,
        0,
        0,
        0,
        1756,
        1757,
        3,
        292,
        146,
        0,
        1757,
        1758,
        3,
        206,
        103,
        0,
        1758,
        197,
        1,
        0,
        0,
        0,
        1759,
        1760,
        3,
        292,
        146,
        0,
        1760,
        1761,
        3,
        206,
        103,
        0,
        1761,
        1762,
        3,
        244,
        122,
        0,
        1762,
        199,
        1,
        0,
        0,
        0,
        1763,
        1764,
        3,
        292,
        146,
        0,
        1764,
        1765,
        3,
        244,
        122,
        0,
        1765,
        201,
        1,
        0,
        0,
        0,
        1766,
        1767,
        3,
        292,
        146,
        0,
        1767,
        1768,
        3,
        56,
        28,
        0,
        1768,
        203,
        1,
        0,
        0,
        0,
        1769,
        1771,
        3,
        206,
        103,
        0,
        1770,
        1769,
        1,
        0,
        0,
        0,
        1770,
        1771,
        1,
        0,
        0,
        0,
        1771,
        1772,
        1,
        0,
        0,
        0,
        1772,
        1775,
        3,
        244,
        122,
        0,
        1773,
        1775,
        3,
        56,
        28,
        0,
        1774,
        1770,
        1,
        0,
        0,
        0,
        1774,
        1773,
        1,
        0,
        0,
        0,
        1775,
        205,
        1,
        0,
        0,
        0,
        1776,
        1778,
        3,
        208,
        104,
        0,
        1777,
        1776,
        1,
        0,
        0,
        0,
        1778,
        1779,
        1,
        0,
        0,
        0,
        1779,
        1777,
        1,
        0,
        0,
        0,
        1779,
        1780,
        1,
        0,
        0,
        0,
        1780,
        207,
        1,
        0,
        0,
        0,
        1781,
        1784,
        3,
        210,
        105,
        0,
        1782,
        1784,
        3,
        222,
        111,
        0,
        1783,
        1781,
        1,
        0,
        0,
        0,
        1783,
        1782,
        1,
        0,
        0,
        0,
        1784,
        209,
        1,
        0,
        0,
        0,
        1785,
        1791,
        3,
        212,
        106,
        0,
        1786,
        1791,
        3,
        226,
        113,
        0,
        1787,
        1791,
        3,
        232,
        116,
        0,
        1788,
        1791,
        3,
        224,
        112,
        0,
        1789,
        1791,
        3,
        242,
        121,
        0,
        1790,
        1785,
        1,
        0,
        0,
        0,
        1790,
        1786,
        1,
        0,
        0,
        0,
        1790,
        1787,
        1,
        0,
        0,
        0,
        1790,
        1788,
        1,
        0,
        0,
        0,
        1790,
        1789,
        1,
        0,
        0,
        0,
        1791,
        211,
        1,
        0,
        0,
        0,
        1792,
        1795,
        3,
        214,
        107,
        0,
        1793,
        1795,
        3,
        216,
        108,
        0,
        1794,
        1792,
        1,
        0,
        0,
        0,
        1794,
        1793,
        1,
        0,
        0,
        0,
        1795,
        213,
        1,
        0,
        0,
        0,
        1796,
        1797,
        5,
        143,
        0,
        0,
        1797,
        1798,
        3,
        294,
        147,
        0,
        1798,
        215,
        1,
        0,
        0,
        0,
        1799,
        1800,
        5,
        160,
        0,
        0,
        1800,
        1801,
        3,
        218,
        109,
        0,
        1801,
        217,
        1,
        0,
        0,
        0,
        1802,
        1812,
        3,
        214,
        107,
        0,
        1803,
        1804,
        5,
        368,
        0,
        0,
        1804,
        1805,
        3,
        220,
        110,
        0,
        1805,
        1806,
        5,
        379,
        0,
        0,
        1806,
        1812,
        1,
        0,
        0,
        0,
        1807,
        1808,
        5,
        370,
        0,
        0,
        1808,
        1809,
        3,
        220,
        110,
        0,
        1809,
        1810,
        5,
        381,
        0,
        0,
        1810,
        1812,
        1,
        0,
        0,
        0,
        1811,
        1802,
        1,
        0,
        0,
        0,
        1811,
        1803,
        1,
        0,
        0,
        0,
        1811,
        1807,
        1,
        0,
        0,
        0,
        1812,
        219,
        1,
        0,
        0,
        0,
        1813,
        1815,
        3,
        212,
        106,
        0,
        1814,
        1813,
        1,
        0,
        0,
        0,
        1815,
        1816,
        1,
        0,
        0,
        0,
        1816,
        1814,
        1,
        0,
        0,
        0,
        1816,
        1817,
        1,
        0,
        0,
        0,
        1817,
        221,
        1,
        0,
        0,
        0,
        1818,
        1819,
        3,
        274,
        137,
        0,
        1819,
        223,
        1,
        0,
        0,
        0,
        1820,
        1823,
        5,
        91,
        0,
        0,
        1821,
        1824,
        3,
        500,
        250,
        0,
        1822,
        1824,
        3,
        774,
        387,
        0,
        1823,
        1821,
        1,
        0,
        0,
        0,
        1823,
        1822,
        1,
        0,
        0,
        0,
        1824,
        225,
        1,
        0,
        0,
        0,
        1825,
        1826,
        5,
        130,
        0,
        0,
        1826,
        1827,
        3,
        228,
        114,
        0,
        1827,
        227,
        1,
        0,
        0,
        0,
        1828,
        1833,
        3,
        230,
        115,
        0,
        1829,
        1830,
        5,
        360,
        0,
        0,
        1830,
        1832,
        3,
        230,
        115,
        0,
        1831,
        1829,
        1,
        0,
        0,
        0,
        1832,
        1835,
        1,
        0,
        0,
        0,
        1833,
        1831,
        1,
        0,
        0,
        0,
        1833,
        1834,
        1,
        0,
        0,
        0,
        1834,
        229,
        1,
        0,
        0,
        0,
        1835,
        1833,
        1,
        0,
        0,
        0,
        1836,
        1842,
        3,
        82,
        41,
        0,
        1837,
        1838,
        3,
        1092,
        546,
        0,
        1838,
        1839,
        5,
        364,
        0,
        0,
        1839,
        1840,
        3,
        818,
        409,
        0,
        1840,
        1842,
        1,
        0,
        0,
        0,
        1841,
        1836,
        1,
        0,
        0,
        0,
        1841,
        1837,
        1,
        0,
        0,
        0,
        1842,
        231,
        1,
        0,
        0,
        0,
        1843,
        1844,
        5,
        100,
        0,
        0,
        1844,
        1846,
        3,
        234,
        117,
        0,
        1845,
        1847,
        3,
        240,
        120,
        0,
        1846,
        1845,
        1,
        0,
        0,
        0,
        1846,
        1847,
        1,
        0,
        0,
        0,
        1847,
        233,
        1,
        0,
        0,
        0,
        1848,
        1849,
        3,
        236,
        118,
        0,
        1849,
        1850,
        3,
        238,
        119,
        0,
        1850,
        235,
        1,
        0,
        0,
        0,
        1851,
        1852,
        3,
        1092,
        546,
        0,
        1852,
        1853,
        5,
        109,
        0,
        0,
        1853,
        237,
        1,
        0,
        0,
        0,
        1854,
        1855,
        3,
        818,
        409,
        0,
        1855,
        239,
        1,
        0,
        0,
        0,
        1856,
        1857,
        5,
        231,
        0,
        0,
        1857,
        1858,
        7,
        3,
        0,
        0,
        1858,
        1859,
        3,
        1092,
        546,
        0,
        1859,
        241,
        1,
        0,
        0,
        0,
        1860,
        1862,
        3,
        520,
        260,
        0,
        1861,
        1863,
        3,
        534,
        267,
        0,
        1862,
        1861,
        1,
        0,
        0,
        0,
        1862,
        1863,
        1,
        0,
        0,
        0,
        1863,
        1865,
        1,
        0,
        0,
        0,
        1864,
        1866,
        3,
        532,
        266,
        0,
        1865,
        1864,
        1,
        0,
        0,
        0,
        1865,
        1866,
        1,
        0,
        0,
        0,
        1866,
        1873,
        1,
        0,
        0,
        0,
        1867,
        1869,
        3,
        534,
        267,
        0,
        1868,
        1870,
        3,
        532,
        266,
        0,
        1869,
        1868,
        1,
        0,
        0,
        0,
        1869,
        1870,
        1,
        0,
        0,
        0,
        1870,
        1873,
        1,
        0,
        0,
        0,
        1871,
        1873,
        3,
        532,
        266,
        0,
        1872,
        1860,
        1,
        0,
        0,
        0,
        1872,
        1867,
        1,
        0,
        0,
        0,
        1872,
        1871,
        1,
        0,
        0,
        0,
        1873,
        243,
        1,
        0,
        0,
        0,
        1874,
        1876,
        3,
        246,
        123,
        0,
        1875,
        1877,
        3,
        242,
        121,
        0,
        1876,
        1875,
        1,
        0,
        0,
        0,
        1876,
        1877,
        1,
        0,
        0,
        0,
        1877,
        1880,
        1,
        0,
        0,
        0,
        1878,
        1880,
        5,
        92,
        0,
        0,
        1879,
        1874,
        1,
        0,
        0,
        0,
        1879,
        1878,
        1,
        0,
        0,
        0,
        1880,
        245,
        1,
        0,
        0,
        0,
        1881,
        1882,
        5,
        180,
        0,
        0,
        1882,
        1883,
        3,
        248,
        124,
        0,
        1883,
        247,
        1,
        0,
        0,
        0,
        1884,
        1886,
        3,
        902,
        451,
        0,
        1885,
        1884,
        1,
        0,
        0,
        0,
        1885,
        1886,
        1,
        0,
        0,
        0,
        1886,
        1889,
        1,
        0,
        0,
        0,
        1887,
        1890,
        5,
        358,
        0,
        0,
        1888,
        1890,
        3,
        250,
        125,
        0,
        1889,
        1887,
        1,
        0,
        0,
        0,
        1889,
        1888,
        1,
        0,
        0,
        0,
        1890,
        1892,
        1,
        0,
        0,
        0,
        1891,
        1893,
        3,
        512,
        256,
        0,
        1892,
        1891,
        1,
        0,
        0,
        0,
        1892,
        1893,
        1,
        0,
        0,
        0,
        1893,
        249,
        1,
        0,
        0,
        0,
        1894,
        1899,
        3,
        252,
        126,
        0,
        1895,
        1896,
        5,
        360,
        0,
        0,
        1896,
        1898,
        3,
        252,
        126,
        0,
        1897,
        1895,
        1,
        0,
        0,
        0,
        1898,
        1901,
        1,
        0,
        0,
        0,
        1899,
        1897,
        1,
        0,
        0,
        0,
        1899,
        1900,
        1,
        0,
        0,
        0,
        1900,
        251,
        1,
        0,
        0,
        0,
        1901,
        1899,
        1,
        0,
        0,
        0,
        1902,
        1904,
        3,
        840,
        420,
        0,
        1903,
        1905,
        3,
        254,
        127,
        0,
        1904,
        1903,
        1,
        0,
        0,
        0,
        1904,
        1905,
        1,
        0,
        0,
        0,
        1905,
        253,
        1,
        0,
        0,
        0,
        1906,
        1907,
        5,
        27,
        0,
        0,
        1907,
        1908,
        3,
        1110,
        555,
        0,
        1908,
        255,
        1,
        0,
        0,
        0,
        1909,
        1911,
        5,
        187,
        0,
        0,
        1910,
        1912,
        3,
        902,
        451,
        0,
        1911,
        1910,
        1,
        0,
        0,
        0,
        1911,
        1912,
        1,
        0,
        0,
        0,
        1912,
        1915,
        1,
        0,
        0,
        0,
        1913,
        1916,
        5,
        358,
        0,
        0,
        1914,
        1916,
        3,
        258,
        129,
        0,
        1915,
        1913,
        1,
        0,
        0,
        0,
        1915,
        1914,
        1,
        0,
        0,
        0,
        1916,
        1936,
        1,
        0,
        0,
        0,
        1917,
        1919,
        3,
        266,
        133,
        0,
        1918,
        1920,
        3,
        500,
        250,
        0,
        1919,
        1918,
        1,
        0,
        0,
        0,
        1919,
        1920,
        1,
        0,
        0,
        0,
        1920,
        1922,
        1,
        0,
        0,
        0,
        1921,
        1923,
        3,
        512,
        256,
        0,
        1922,
        1921,
        1,
        0,
        0,
        0,
        1922,
        1923,
        1,
        0,
        0,
        0,
        1923,
        1925,
        1,
        0,
        0,
        0,
        1924,
        1926,
        3,
        264,
        132,
        0,
        1925,
        1924,
        1,
        0,
        0,
        0,
        1925,
        1926,
        1,
        0,
        0,
        0,
        1926,
        1928,
        1,
        0,
        0,
        0,
        1927,
        1929,
        3,
        520,
        260,
        0,
        1928,
        1927,
        1,
        0,
        0,
        0,
        1928,
        1929,
        1,
        0,
        0,
        0,
        1929,
        1931,
        1,
        0,
        0,
        0,
        1930,
        1932,
        3,
        534,
        267,
        0,
        1931,
        1930,
        1,
        0,
        0,
        0,
        1931,
        1932,
        1,
        0,
        0,
        0,
        1932,
        1934,
        1,
        0,
        0,
        0,
        1933,
        1935,
        3,
        532,
        266,
        0,
        1934,
        1933,
        1,
        0,
        0,
        0,
        1934,
        1935,
        1,
        0,
        0,
        0,
        1935,
        1937,
        1,
        0,
        0,
        0,
        1936,
        1917,
        1,
        0,
        0,
        0,
        1936,
        1937,
        1,
        0,
        0,
        0,
        1937,
        257,
        1,
        0,
        0,
        0,
        1938,
        1943,
        3,
        260,
        130,
        0,
        1939,
        1940,
        5,
        360,
        0,
        0,
        1940,
        1942,
        3,
        260,
        130,
        0,
        1941,
        1939,
        1,
        0,
        0,
        0,
        1942,
        1945,
        1,
        0,
        0,
        0,
        1943,
        1941,
        1,
        0,
        0,
        0,
        1943,
        1944,
        1,
        0,
        0,
        0,
        1944,
        259,
        1,
        0,
        0,
        0,
        1945,
        1943,
        1,
        0,
        0,
        0,
        1946,
        1948,
        3,
        840,
        420,
        0,
        1947,
        1949,
        3,
        262,
        131,
        0,
        1948,
        1947,
        1,
        0,
        0,
        0,
        1948,
        1949,
        1,
        0,
        0,
        0,
        1949,
        261,
        1,
        0,
        0,
        0,
        1950,
        1951,
        5,
        27,
        0,
        0,
        1951,
        1952,
        3,
        1110,
        555,
        0,
        1952,
        263,
        1,
        0,
        0,
        0,
        1953,
        1954,
        5,
        103,
        0,
        0,
        1954,
        1955,
        3,
        774,
        387,
        0,
        1955,
        265,
        1,
        0,
        0,
        0,
        1956,
        1959,
        5,
        101,
        0,
        0,
        1957,
        1960,
        3,
        268,
        134,
        0,
        1958,
        1960,
        3,
        272,
        136,
        0,
        1959,
        1957,
        1,
        0,
        0,
        0,
        1959,
        1958,
        1,
        0,
        0,
        0,
        1960,
        267,
        1,
        0,
        0,
        0,
        1961,
        1966,
        3,
        270,
        135,
        0,
        1962,
        1963,
        5,
        360,
        0,
        0,
        1963,
        1965,
        3,
        270,
        135,
        0,
        1964,
        1962,
        1,
        0,
        0,
        0,
        1965,
        1968,
        1,
        0,
        0,
        0,
        1966,
        1964,
        1,
        0,
        0,
        0,
        1966,
        1967,
        1,
        0,
        0,
        0,
        1967,
        269,
        1,
        0,
        0,
        0,
        1968,
        1966,
        1,
        0,
        0,
        0,
        1969,
        1970,
        3,
        88,
        44,
        0,
        1970,
        1971,
        3,
        212,
        106,
        0,
        1971,
        271,
        1,
        0,
        0,
        0,
        1972,
        1977,
        3,
        56,
        28,
        0,
        1973,
        1974,
        3,
        88,
        44,
        0,
        1974,
        1975,
        3,
        56,
        28,
        0,
        1975,
        1977,
        1,
        0,
        0,
        0,
        1976,
        1972,
        1,
        0,
        0,
        0,
        1976,
        1973,
        1,
        0,
        0,
        0,
        1977,
        273,
        1,
        0,
        0,
        0,
        1978,
        1980,
        5,
        160,
        0,
        0,
        1979,
        1978,
        1,
        0,
        0,
        0,
        1979,
        1980,
        1,
        0,
        0,
        0,
        1980,
        1981,
        1,
        0,
        0,
        0,
        1981,
        1982,
        5,
        44,
        0,
        0,
        1982,
        1983,
        3,
        276,
        138,
        0,
        1983,
        275,
        1,
        0,
        0,
        0,
        1984,
        1987,
        3,
        278,
        139,
        0,
        1985,
        1987,
        3,
        284,
        142,
        0,
        1986,
        1984,
        1,
        0,
        0,
        0,
        1986,
        1985,
        1,
        0,
        0,
        0,
        1987,
        277,
        1,
        0,
        0,
        0,
        1988,
        1990,
        3,
        280,
        140,
        0,
        1989,
        1988,
        1,
        0,
        0,
        0,
        1989,
        1990,
        1,
        0,
        0,
        0,
        1990,
        1991,
        1,
        0,
        0,
        0,
        1991,
        1992,
        3,
        50,
        25,
        0,
        1992,
        279,
        1,
        0,
        0,
        0,
        1993,
        1995,
        5,
        370,
        0,
        0,
        1994,
        1996,
        3,
        282,
        141,
        0,
        1995,
        1994,
        1,
        0,
        0,
        0,
        1995,
        1996,
        1,
        0,
        0,
        0,
        1996,
        1997,
        1,
        0,
        0,
        0,
        1997,
        1998,
        5,
        381,
        0,
        0,
        1998,
        281,
        1,
        0,
        0,
        0,
        1999,
        2004,
        3,
        912,
        456,
        0,
        2000,
        2001,
        5,
        360,
        0,
        0,
        2001,
        2003,
        3,
        912,
        456,
        0,
        2002,
        2000,
        1,
        0,
        0,
        0,
        2003,
        2006,
        1,
        0,
        0,
        0,
        2004,
        2002,
        1,
        0,
        0,
        0,
        2004,
        2005,
        1,
        0,
        0,
        0,
        2005,
        283,
        1,
        0,
        0,
        0,
        2006,
        2004,
        1,
        0,
        0,
        0,
        2007,
        2008,
        3,
        566,
        283,
        0,
        2008,
        2010,
        5,
        370,
        0,
        0,
        2009,
        2011,
        3,
        286,
        143,
        0,
        2010,
        2009,
        1,
        0,
        0,
        0,
        2010,
        2011,
        1,
        0,
        0,
        0,
        2011,
        2012,
        1,
        0,
        0,
        0,
        2012,
        2014,
        5,
        381,
        0,
        0,
        2013,
        2015,
        3,
        502,
        251,
        0,
        2014,
        2013,
        1,
        0,
        0,
        0,
        2014,
        2015,
        1,
        0,
        0,
        0,
        2015,
        285,
        1,
        0,
        0,
        0,
        2016,
        2021,
        3,
        288,
        144,
        0,
        2017,
        2018,
        5,
        360,
        0,
        0,
        2018,
        2020,
        3,
        288,
        144,
        0,
        2019,
        2017,
        1,
        0,
        0,
        0,
        2020,
        2023,
        1,
        0,
        0,
        0,
        2021,
        2019,
        1,
        0,
        0,
        0,
        2021,
        2022,
        1,
        0,
        0,
        0,
        2022,
        287,
        1,
        0,
        0,
        0,
        2023,
        2021,
        1,
        0,
        0,
        0,
        2024,
        2025,
        3,
        818,
        409,
        0,
        2025,
        289,
        1,
        0,
        0,
        0,
        2026,
        2027,
        5,
        31,
        0,
        0,
        2027,
        2028,
        3,
        538,
        269,
        0,
        2028,
        291,
        1,
        0,
        0,
        0,
        2029,
        2030,
        5,
        223,
        0,
        0,
        2030,
        2031,
        3,
        88,
        44,
        0,
        2031,
        293,
        1,
        0,
        0,
        0,
        2032,
        2034,
        3,
        302,
        151,
        0,
        2033,
        2035,
        3,
        296,
        148,
        0,
        2034,
        2033,
        1,
        0,
        0,
        0,
        2034,
        2035,
        1,
        0,
        0,
        0,
        2035,
        295,
        1,
        0,
        0,
        0,
        2036,
        2037,
        5,
        234,
        0,
        0,
        2037,
        2038,
        3,
        298,
        149,
        0,
        2038,
        297,
        1,
        0,
        0,
        0,
        2039,
        2044,
        3,
        300,
        150,
        0,
        2040,
        2041,
        5,
        360,
        0,
        0,
        2041,
        2043,
        3,
        300,
        150,
        0,
        2042,
        2040,
        1,
        0,
        0,
        0,
        2043,
        2046,
        1,
        0,
        0,
        0,
        2044,
        2042,
        1,
        0,
        0,
        0,
        2044,
        2045,
        1,
        0,
        0,
        0,
        2045,
        299,
        1,
        0,
        0,
        0,
        2046,
        2044,
        1,
        0,
        0,
        0,
        2047,
        2048,
        3,
        912,
        456,
        0,
        2048,
        301,
        1,
        0,
        0,
        0,
        2049,
        2051,
        3,
        304,
        152,
        0,
        2050,
        2049,
        1,
        0,
        0,
        0,
        2050,
        2051,
        1,
        0,
        0,
        0,
        2051,
        2052,
        1,
        0,
        0,
        0,
        2052,
        2054,
        3,
        314,
        157,
        0,
        2053,
        2055,
        3,
        320,
        160,
        0,
        2054,
        2053,
        1,
        0,
        0,
        0,
        2054,
        2055,
        1,
        0,
        0,
        0,
        2055,
        2057,
        1,
        0,
        0,
        0,
        2056,
        2058,
        3,
        322,
        161,
        0,
        2057,
        2056,
        1,
        0,
        0,
        0,
        2057,
        2058,
        1,
        0,
        0,
        0,
        2058,
        303,
        1,
        0,
        0,
        0,
        2059,
        2062,
        3,
        306,
        153,
        0,
        2060,
        2062,
        3,
        308,
        154,
        0,
        2061,
        2059,
        1,
        0,
        0,
        0,
        2061,
        2060,
        1,
        0,
        0,
        0,
        2062,
        305,
        1,
        0,
        0,
        0,
        2063,
        2064,
        5,
        309,
        0,
        0,
        2064,
        2065,
        3,
        310,
        155,
        0,
        2065,
        307,
        1,
        0,
        0,
        0,
        2066,
        2067,
        5,
        282,
        0,
        0,
        2067,
        2068,
        3,
        312,
        156,
        0,
        2068,
        309,
        1,
        0,
        0,
        0,
        2069,
        2071,
        5,
        286,
        0,
        0,
        2070,
        2072,
        5,
        279,
        0,
        0,
        2071,
        2070,
        1,
        0,
        0,
        0,
        2071,
        2072,
        1,
        0,
        0,
        0,
        2072,
        2075,
        1,
        0,
        0,
        0,
        2073,
        2075,
        5,
        287,
        0,
        0,
        2074,
        2069,
        1,
        0,
        0,
        0,
        2074,
        2073,
        1,
        0,
        0,
        0,
        2075,
        311,
        1,
        0,
        0,
        0,
        2076,
        2078,
        3,
        1144,
        572,
        0,
        2077,
        2079,
        5,
        279,
        0,
        0,
        2078,
        2077,
        1,
        0,
        0,
        0,
        2078,
        2079,
        1,
        0,
        0,
        0,
        2079,
        2082,
        1,
        0,
        0,
        0,
        2080,
        2082,
        3,
        1142,
        571,
        0,
        2081,
        2076,
        1,
        0,
        0,
        0,
        2081,
        2080,
        1,
        0,
        0,
        0,
        2082,
        313,
        1,
        0,
        0,
        0,
        2083,
        2088,
        3,
        316,
        158,
        0,
        2084,
        2085,
        5,
        360,
        0,
        0,
        2085,
        2087,
        3,
        316,
        158,
        0,
        2086,
        2084,
        1,
        0,
        0,
        0,
        2087,
        2090,
        1,
        0,
        0,
        0,
        2088,
        2086,
        1,
        0,
        0,
        0,
        2088,
        2089,
        1,
        0,
        0,
        0,
        2089,
        315,
        1,
        0,
        0,
        0,
        2090,
        2088,
        1,
        0,
        0,
        0,
        2091,
        2093,
        3,
        318,
        159,
        0,
        2092,
        2091,
        1,
        0,
        0,
        0,
        2092,
        2093,
        1,
        0,
        0,
        0,
        2093,
        2095,
        1,
        0,
        0,
        0,
        2094,
        2096,
        3,
        344,
        172,
        0,
        2095,
        2094,
        1,
        0,
        0,
        0,
        2095,
        2096,
        1,
        0,
        0,
        0,
        2096,
        2097,
        1,
        0,
        0,
        0,
        2097,
        2098,
        3,
        372,
        186,
        0,
        2098,
        317,
        1,
        0,
        0,
        0,
        2099,
        2100,
        3,
        1088,
        544,
        0,
        2100,
        2101,
        5,
        364,
        0,
        0,
        2101,
        319,
        1,
        0,
        0,
        0,
        2102,
        2103,
        5,
        291,
        0,
        0,
        2103,
        2104,
        3,
        344,
        172,
        0,
        2104,
        321,
        1,
        0,
        0,
        0,
        2105,
        2106,
        5,
        230,
        0,
        0,
        2106,
        2107,
        3,
        774,
        387,
        0,
        2107,
        323,
        1,
        0,
        0,
        0,
        2108,
        2109,
        3,
        326,
        163,
        0,
        2109,
        325,
        1,
        0,
        0,
        0,
        2110,
        2115,
        3,
        328,
        164,
        0,
        2111,
        2112,
        5,
        360,
        0,
        0,
        2112,
        2114,
        3,
        328,
        164,
        0,
        2113,
        2111,
        1,
        0,
        0,
        0,
        2114,
        2117,
        1,
        0,
        0,
        0,
        2115,
        2113,
        1,
        0,
        0,
        0,
        2115,
        2116,
        1,
        0,
        0,
        0,
        2116,
        327,
        1,
        0,
        0,
        0,
        2117,
        2115,
        1,
        0,
        0,
        0,
        2118,
        2124,
        3,
        330,
        165,
        0,
        2119,
        2120,
        3,
        332,
        166,
        0,
        2120,
        2121,
        3,
        330,
        165,
        0,
        2121,
        2123,
        1,
        0,
        0,
        0,
        2122,
        2119,
        1,
        0,
        0,
        0,
        2123,
        2126,
        1,
        0,
        0,
        0,
        2124,
        2122,
        1,
        0,
        0,
        0,
        2124,
        2125,
        1,
        0,
        0,
        0,
        2125,
        329,
        1,
        0,
        0,
        0,
        2126,
        2124,
        1,
        0,
        0,
        0,
        2127,
        2129,
        5,
        370,
        0,
        0,
        2128,
        2130,
        3,
        340,
        170,
        0,
        2129,
        2128,
        1,
        0,
        0,
        0,
        2129,
        2130,
        1,
        0,
        0,
        0,
        2130,
        2131,
        1,
        0,
        0,
        0,
        2131,
        2132,
        5,
        381,
        0,
        0,
        2132,
        331,
        1,
        0,
        0,
        0,
        2133,
        2137,
        3,
        334,
        167,
        0,
        2134,
        2137,
        3,
        336,
        168,
        0,
        2135,
        2137,
        3,
        338,
        169,
        0,
        2136,
        2133,
        1,
        0,
        0,
        0,
        2136,
        2134,
        1,
        0,
        0,
        0,
        2136,
        2135,
        1,
        0,
        0,
        0,
        2137,
        333,
        1,
        0,
        0,
        0,
        2138,
        2140,
        5,
        337,
        0,
        0,
        2139,
        2141,
        3,
        340,
        170,
        0,
        2140,
        2139,
        1,
        0,
        0,
        0,
        2140,
        2141,
        1,
        0,
        0,
        0,
        2141,
        2142,
        1,
        0,
        0,
        0,
        2142,
        2143,
        5,
        347,
        0,
        0,
        2143,
        335,
        1,
        0,
        0,
        0,
        2144,
        2146,
        5,
        343,
        0,
        0,
        2145,
        2147,
        3,
        340,
        170,
        0,
        2146,
        2145,
        1,
        0,
        0,
        0,
        2146,
        2147,
        1,
        0,
        0,
        0,
        2147,
        2148,
        1,
        0,
        0,
        0,
        2148,
        2149,
        5,
        328,
        0,
        0,
        2149,
        337,
        1,
        0,
        0,
        0,
        2150,
        2152,
        5,
        354,
        0,
        0,
        2151,
        2153,
        3,
        340,
        170,
        0,
        2152,
        2151,
        1,
        0,
        0,
        0,
        2152,
        2153,
        1,
        0,
        0,
        0,
        2153,
        2154,
        1,
        0,
        0,
        0,
        2154,
        2155,
        5,
        348,
        0,
        0,
        2155,
        339,
        1,
        0,
        0,
        0,
        2156,
        2158,
        3,
        386,
        193,
        0,
        2157,
        2159,
        3,
        342,
        171,
        0,
        2158,
        2157,
        1,
        0,
        0,
        0,
        2158,
        2159,
        1,
        0,
        0,
        0,
        2159,
        2165,
        1,
        0,
        0,
        0,
        2160,
        2162,
        3,
        386,
        193,
        0,
        2161,
        2160,
        1,
        0,
        0,
        0,
        2161,
        2162,
        1,
        0,
        0,
        0,
        2162,
        2163,
        1,
        0,
        0,
        0,
        2163,
        2165,
        3,
        342,
        171,
        0,
        2164,
        2156,
        1,
        0,
        0,
        0,
        2164,
        2161,
        1,
        0,
        0,
        0,
        2165,
        341,
        1,
        0,
        0,
        0,
        2166,
        2167,
        3,
        390,
        195,
        0,
        2167,
        2169,
        3,
        662,
        331,
        0,
        2168,
        2170,
        3,
        396,
        198,
        0,
        2169,
        2168,
        1,
        0,
        0,
        0,
        2169,
        2170,
        1,
        0,
        0,
        0,
        2170,
        2178,
        1,
        0,
        0,
        0,
        2171,
        2172,
        3,
        390,
        195,
        0,
        2172,
        2173,
        3,
        662,
        331,
        0,
        2173,
        2175,
        1,
        0,
        0,
        0,
        2174,
        2171,
        1,
        0,
        0,
        0,
        2174,
        2175,
        1,
        0,
        0,
        0,
        2175,
        2176,
        1,
        0,
        0,
        0,
        2176,
        2178,
        3,
        396,
        198,
        0,
        2177,
        2166,
        1,
        0,
        0,
        0,
        2177,
        2174,
        1,
        0,
        0,
        0,
        2178,
        343,
        1,
        0,
        0,
        0,
        2179,
        2182,
        3,
        346,
        173,
        0,
        2180,
        2182,
        3,
        350,
        175,
        0,
        2181,
        2179,
        1,
        0,
        0,
        0,
        2181,
        2180,
        1,
        0,
        0,
        0,
        2182,
        345,
        1,
        0,
        0,
        0,
        2183,
        2185,
        3,
        348,
        174,
        0,
        2184,
        2186,
        3,
        354,
        177,
        0,
        2185,
        2184,
        1,
        0,
        0,
        0,
        2185,
        2186,
        1,
        0,
        0,
        0,
        2186,
        347,
        1,
        0,
        0,
        0,
        2187,
        2188,
        7,
        4,
        0,
        0,
        2188,
        349,
        1,
        0,
        0,
        0,
        2189,
        2193,
        3,
        352,
        176,
        0,
        2190,
        2193,
        3,
        356,
        178,
        0,
        2191,
        2193,
        3,
        360,
        180,
        0,
        2192,
        2189,
        1,
        0,
        0,
        0,
        2192,
        2190,
        1,
        0,
        0,
        0,
        2192,
        2191,
        1,
        0,
        0,
        0,
        2193,
        351,
        1,
        0,
        0,
        0,
        2194,
        2196,
        5,
        22,
        0,
        0,
        2195,
        2197,
        3,
        348,
        174,
        0,
        2196,
        2195,
        1,
        0,
        0,
        0,
        2196,
        2197,
        1,
        0,
        0,
        0,
        2197,
        2199,
        1,
        0,
        0,
        0,
        2198,
        2200,
        3,
        354,
        177,
        0,
        2199,
        2198,
        1,
        0,
        0,
        0,
        2199,
        2200,
        1,
        0,
        0,
        0,
        2200,
        353,
        1,
        0,
        0,
        0,
        2201,
        2202,
        7,
        5,
        0,
        0,
        2202,
        355,
        1,
        0,
        0,
        0,
        2203,
        2205,
        5,
        25,
        0,
        0,
        2204,
        2206,
        3,
        358,
        179,
        0,
        2205,
        2204,
        1,
        0,
        0,
        0,
        2205,
        2206,
        1,
        0,
        0,
        0,
        2206,
        2208,
        1,
        0,
        0,
        0,
        2207,
        2209,
        3,
        348,
        174,
        0,
        2208,
        2207,
        1,
        0,
        0,
        0,
        2208,
        2209,
        1,
        0,
        0,
        0,
        2209,
        2211,
        1,
        0,
        0,
        0,
        2210,
        2212,
        3,
        354,
        177,
        0,
        2211,
        2210,
        1,
        0,
        0,
        0,
        2211,
        2212,
        1,
        0,
        0,
        0,
        2212,
        357,
        1,
        0,
        0,
        0,
        2213,
        2214,
        3,
        852,
        426,
        0,
        2214,
        359,
        1,
        0,
        0,
        0,
        2215,
        2220,
        3,
        362,
        181,
        0,
        2216,
        2220,
        3,
        364,
        182,
        0,
        2217,
        2220,
        3,
        366,
        183,
        0,
        2218,
        2220,
        3,
        368,
        184,
        0,
        2219,
        2215,
        1,
        0,
        0,
        0,
        2219,
        2216,
        1,
        0,
        0,
        0,
        2219,
        2217,
        1,
        0,
        0,
        0,
        2219,
        2218,
        1,
        0,
        0,
        0,
        2220,
        361,
        1,
        0,
        0,
        0,
        2221,
        2222,
        5,
        22,
        0,
        0,
        2222,
        2224,
        5,
        310,
        0,
        0,
        2223,
        2225,
        3,
        348,
        174,
        0,
        2224,
        2223,
        1,
        0,
        0,
        0,
        2224,
        2225,
        1,
        0,
        0,
        0,
        2225,
        2227,
        1,
        0,
        0,
        0,
        2226,
        2228,
        3,
        354,
        177,
        0,
        2227,
        2226,
        1,
        0,
        0,
        0,
        2227,
        2228,
        1,
        0,
        0,
        0,
        2228,
        363,
        1,
        0,
        0,
        0,
        2229,
        2230,
        5,
        25,
        0,
        0,
        2230,
        2232,
        5,
        310,
        0,
        0,
        2231,
        2233,
        3,
        348,
        174,
        0,
        2232,
        2231,
        1,
        0,
        0,
        0,
        2232,
        2233,
        1,
        0,
        0,
        0,
        2233,
        2235,
        1,
        0,
        0,
        0,
        2234,
        2236,
        3,
        354,
        177,
        0,
        2235,
        2234,
        1,
        0,
        0,
        0,
        2235,
        2236,
        1,
        0,
        0,
        0,
        2236,
        365,
        1,
        0,
        0,
        0,
        2237,
        2238,
        5,
        310,
        0,
        0,
        2238,
        2240,
        3,
        358,
        179,
        0,
        2239,
        2241,
        3,
        348,
        174,
        0,
        2240,
        2239,
        1,
        0,
        0,
        0,
        2240,
        2241,
        1,
        0,
        0,
        0,
        2241,
        2243,
        1,
        0,
        0,
        0,
        2242,
        2244,
        3,
        354,
        177,
        0,
        2243,
        2242,
        1,
        0,
        0,
        0,
        2243,
        2244,
        1,
        0,
        0,
        0,
        2244,
        367,
        1,
        0,
        0,
        0,
        2245,
        2247,
        5,
        310,
        0,
        0,
        2246,
        2248,
        3,
        370,
        185,
        0,
        2247,
        2246,
        1,
        0,
        0,
        0,
        2247,
        2248,
        1,
        0,
        0,
        0,
        2248,
        2250,
        1,
        0,
        0,
        0,
        2249,
        2251,
        3,
        348,
        174,
        0,
        2250,
        2249,
        1,
        0,
        0,
        0,
        2250,
        2251,
        1,
        0,
        0,
        0,
        2251,
        2253,
        1,
        0,
        0,
        0,
        2252,
        2254,
        3,
        354,
        177,
        0,
        2253,
        2252,
        1,
        0,
        0,
        0,
        2253,
        2254,
        1,
        0,
        0,
        0,
        2254,
        2255,
        1,
        0,
        0,
        0,
        2255,
        2256,
        7,
        6,
        0,
        0,
        2256,
        369,
        1,
        0,
        0,
        0,
        2257,
        2258,
        3,
        852,
        426,
        0,
        2258,
        371,
        1,
        0,
        0,
        0,
        2259,
        2275,
        3,
        374,
        187,
        0,
        2260,
        2263,
        3,
        374,
        187,
        0,
        2261,
        2262,
        5,
        327,
        0,
        0,
        2262,
        2264,
        3,
        374,
        187,
        0,
        2263,
        2261,
        1,
        0,
        0,
        0,
        2264,
        2265,
        1,
        0,
        0,
        0,
        2265,
        2263,
        1,
        0,
        0,
        0,
        2265,
        2266,
        1,
        0,
        0,
        0,
        2266,
        2275,
        1,
        0,
        0,
        0,
        2267,
        2270,
        3,
        374,
        187,
        0,
        2268,
        2269,
        5,
        385,
        0,
        0,
        2269,
        2271,
        3,
        374,
        187,
        0,
        2270,
        2268,
        1,
        0,
        0,
        0,
        2271,
        2272,
        1,
        0,
        0,
        0,
        2272,
        2270,
        1,
        0,
        0,
        0,
        2272,
        2273,
        1,
        0,
        0,
        0,
        2273,
        2275,
        1,
        0,
        0,
        0,
        2274,
        2259,
        1,
        0,
        0,
        0,
        2274,
        2260,
        1,
        0,
        0,
        0,
        2274,
        2267,
        1,
        0,
        0,
        0,
        2275,
        373,
        1,
        0,
        0,
        0,
        2276,
        2278,
        3,
        376,
        188,
        0,
        2277,
        2276,
        1,
        0,
        0,
        0,
        2278,
        2279,
        1,
        0,
        0,
        0,
        2279,
        2277,
        1,
        0,
        0,
        0,
        2279,
        2280,
        1,
        0,
        0,
        0,
        2280,
        375,
        1,
        0,
        0,
        0,
        2281,
        2289,
        3,
        378,
        189,
        0,
        2282,
        2283,
        3,
        378,
        189,
        0,
        2283,
        2284,
        3,
        434,
        217,
        0,
        2284,
        2289,
        1,
        0,
        0,
        0,
        2285,
        2286,
        3,
        378,
        189,
        0,
        2286,
        2287,
        5,
        376,
        0,
        0,
        2287,
        2289,
        1,
        0,
        0,
        0,
        2288,
        2281,
        1,
        0,
        0,
        0,
        2288,
        2282,
        1,
        0,
        0,
        0,
        2288,
        2285,
        1,
        0,
        0,
        0,
        2289,
        377,
        1,
        0,
        0,
        0,
        2290,
        2294,
        3,
        380,
        190,
        0,
        2291,
        2294,
        3,
        422,
        211,
        0,
        2292,
        2294,
        3,
        444,
        222,
        0,
        2293,
        2290,
        1,
        0,
        0,
        0,
        2293,
        2291,
        1,
        0,
        0,
        0,
        2293,
        2292,
        1,
        0,
        0,
        0,
        2294,
        379,
        1,
        0,
        0,
        0,
        2295,
        2298,
        3,
        382,
        191,
        0,
        2296,
        2298,
        3,
        402,
        201,
        0,
        2297,
        2295,
        1,
        0,
        0,
        0,
        2297,
        2296,
        1,
        0,
        0,
        0,
        2298,
        381,
        1,
        0,
        0,
        0,
        2299,
        2300,
        5,
        370,
        0,
        0,
        2300,
        2301,
        3,
        384,
        192,
        0,
        2301,
        2302,
        5,
        381,
        0,
        0,
        2302,
        383,
        1,
        0,
        0,
        0,
        2303,
        2305,
        3,
        386,
        193,
        0,
        2304,
        2303,
        1,
        0,
        0,
        0,
        2304,
        2305,
        1,
        0,
        0,
        0,
        2305,
        2307,
        1,
        0,
        0,
        0,
        2306,
        2308,
        3,
        388,
        194,
        0,
        2307,
        2306,
        1,
        0,
        0,
        0,
        2307,
        2308,
        1,
        0,
        0,
        0,
        2308,
        2310,
        1,
        0,
        0,
        0,
        2309,
        2311,
        3,
        392,
        196,
        0,
        2310,
        2309,
        1,
        0,
        0,
        0,
        2310,
        2311,
        1,
        0,
        0,
        0,
        2311,
        385,
        1,
        0,
        0,
        0,
        2312,
        2313,
        3,
        1086,
        543,
        0,
        2313,
        387,
        1,
        0,
        0,
        0,
        2314,
        2315,
        3,
        390,
        195,
        0,
        2315,
        2316,
        3,
        428,
        214,
        0,
        2316,
        389,
        1,
        0,
        0,
        0,
        2317,
        2318,
        7,
        7,
        0,
        0,
        2318,
        391,
        1,
        0,
        0,
        0,
        2319,
        2322,
        3,
        394,
        197,
        0,
        2320,
        2322,
        3,
        396,
        198,
        0,
        2321,
        2319,
        1,
        0,
        0,
        0,
        2321,
        2320,
        1,
        0,
        0,
        0,
        2322,
        393,
        1,
        0,
        0,
        0,
        2323,
        2324,
        5,
        230,
        0,
        0,
        2324,
        2325,
        3,
        774,
        387,
        0,
        2325,
        395,
        1,
        0,
        0,
        0,
        2326,
        2327,
        5,
        368,
        0,
        0,
        2327,
        2328,
        3,
        398,
        199,
        0,
        2328,
        2329,
        5,
        379,
        0,
        0,
        2329,
        397,
        1,
        0,
        0,
        0,
        2330,
        2335,
        3,
        400,
        200,
        0,
        2331,
        2332,
        5,
        360,
        0,
        0,
        2332,
        2334,
        3,
        400,
        200,
        0,
        2333,
        2331,
        1,
        0,
        0,
        0,
        2334,
        2337,
        1,
        0,
        0,
        0,
        2335,
        2333,
        1,
        0,
        0,
        0,
        2335,
        2336,
        1,
        0,
        0,
        0,
        2336,
        399,
        1,
        0,
        0,
        0,
        2337,
        2335,
        1,
        0,
        0,
        0,
        2338,
        2339,
        3,
        1082,
        541,
        0,
        2339,
        2340,
        5,
        359,
        0,
        0,
        2340,
        2341,
        3,
        818,
        409,
        0,
        2341,
        401,
        1,
        0,
        0,
        0,
        2342,
        2345,
        3,
        404,
        202,
        0,
        2343,
        2345,
        3,
        420,
        210,
        0,
        2344,
        2342,
        1,
        0,
        0,
        0,
        2344,
        2343,
        1,
        0,
        0,
        0,
        2345,
        403,
        1,
        0,
        0,
        0,
        2346,
        2354,
        3,
        406,
        203,
        0,
        2347,
        2354,
        3,
        408,
        204,
        0,
        2348,
        2354,
        3,
        410,
        205,
        0,
        2349,
        2354,
        3,
        412,
        206,
        0,
        2350,
        2354,
        3,
        414,
        207,
        0,
        2351,
        2354,
        3,
        416,
        208,
        0,
        2352,
        2354,
        3,
        418,
        209,
        0,
        2353,
        2346,
        1,
        0,
        0,
        0,
        2353,
        2347,
        1,
        0,
        0,
        0,
        2353,
        2348,
        1,
        0,
        0,
        0,
        2353,
        2349,
        1,
        0,
        0,
        0,
        2353,
        2350,
        1,
        0,
        0,
        0,
        2353,
        2351,
        1,
        0,
        0,
        0,
        2353,
        2352,
        1,
        0,
        0,
        0,
        2354,
        405,
        1,
        0,
        0,
        0,
        2355,
        2356,
        5,
        337,
        0,
        0,
        2356,
        2357,
        3,
        384,
        192,
        0,
        2357,
        2358,
        5,
        347,
        0,
        0,
        2358,
        407,
        1,
        0,
        0,
        0,
        2359,
        2360,
        5,
        354,
        0,
        0,
        2360,
        2361,
        3,
        384,
        192,
        0,
        2361,
        2362,
        5,
        348,
        0,
        0,
        2362,
        409,
        1,
        0,
        0,
        0,
        2363,
        2364,
        5,
        343,
        0,
        0,
        2364,
        2365,
        3,
        384,
        192,
        0,
        2365,
        2366,
        5,
        328,
        0,
        0,
        2366,
        411,
        1,
        0,
        0,
        0,
        2367,
        2368,
        5,
        338,
        0,
        0,
        2368,
        2369,
        3,
        384,
        192,
        0,
        2369,
        2370,
        5,
        348,
        0,
        0,
        2370,
        413,
        1,
        0,
        0,
        0,
        2371,
        2372,
        5,
        354,
        0,
        0,
        2372,
        2373,
        3,
        384,
        192,
        0,
        2373,
        2374,
        5,
        329,
        0,
        0,
        2374,
        415,
        1,
        0,
        0,
        0,
        2375,
        2376,
        5,
        337,
        0,
        0,
        2376,
        2377,
        3,
        384,
        192,
        0,
        2377,
        2378,
        5,
        328,
        0,
        0,
        2378,
        417,
        1,
        0,
        0,
        0,
        2379,
        2380,
        5,
        343,
        0,
        0,
        2380,
        2381,
        3,
        384,
        192,
        0,
        2381,
        2382,
        5,
        347,
        0,
        0,
        2382,
        419,
        1,
        0,
        0,
        0,
        2383,
        2384,
        7,
        8,
        0,
        0,
        2384,
        421,
        1,
        0,
        0,
        0,
        2385,
        2387,
        5,
        370,
        0,
        0,
        2386,
        2388,
        3,
        424,
        212,
        0,
        2387,
        2386,
        1,
        0,
        0,
        0,
        2387,
        2388,
        1,
        0,
        0,
        0,
        2388,
        2390,
        1,
        0,
        0,
        0,
        2389,
        2391,
        3,
        346,
        173,
        0,
        2390,
        2389,
        1,
        0,
        0,
        0,
        2390,
        2391,
        1,
        0,
        0,
        0,
        2391,
        2392,
        1,
        0,
        0,
        0,
        2392,
        2394,
        3,
        372,
        186,
        0,
        2393,
        2395,
        3,
        426,
        213,
        0,
        2394,
        2393,
        1,
        0,
        0,
        0,
        2394,
        2395,
        1,
        0,
        0,
        0,
        2395,
        2396,
        1,
        0,
        0,
        0,
        2396,
        2397,
        5,
        381,
        0,
        0,
        2397,
        423,
        1,
        0,
        0,
        0,
        2398,
        2399,
        3,
        1090,
        545,
        0,
        2399,
        2400,
        5,
        364,
        0,
        0,
        2400,
        425,
        1,
        0,
        0,
        0,
        2401,
        2402,
        5,
        230,
        0,
        0,
        2402,
        2403,
        3,
        774,
        387,
        0,
        2403,
        427,
        1,
        0,
        0,
        0,
        2404,
        2405,
        6,
        214,
        -1,
        0,
        2405,
        2406,
        5,
        365,
        0,
        0,
        2406,
        2414,
        3,
        428,
        214,
        6,
        2407,
        2414,
        3,
        1080,
        540,
        0,
        2408,
        2414,
        5,
        373,
        0,
        0,
        2409,
        2410,
        5,
        370,
        0,
        0,
        2410,
        2411,
        3,
        428,
        214,
        0,
        2411,
        2412,
        5,
        381,
        0,
        0,
        2412,
        2414,
        1,
        0,
        0,
        0,
        2413,
        2404,
        1,
        0,
        0,
        0,
        2413,
        2407,
        1,
        0,
        0,
        0,
        2413,
        2408,
        1,
        0,
        0,
        0,
        2413,
        2409,
        1,
        0,
        0,
        0,
        2414,
        2423,
        1,
        0,
        0,
        0,
        2415,
        2416,
        10,
        5,
        0,
        0,
        2416,
        2417,
        5,
        357,
        0,
        0,
        2417,
        2422,
        3,
        428,
        214,
        6,
        2418,
        2419,
        10,
        4,
        0,
        0,
        2419,
        2420,
        5,
        385,
        0,
        0,
        2420,
        2422,
        3,
        428,
        214,
        5,
        2421,
        2415,
        1,
        0,
        0,
        0,
        2421,
        2418,
        1,
        0,
        0,
        0,
        2422,
        2425,
        1,
        0,
        0,
        0,
        2423,
        2421,
        1,
        0,
        0,
        0,
        2423,
        2424,
        1,
        0,
        0,
        0,
        2424,
        429,
        1,
        0,
        0,
        0,
        2425,
        2423,
        1,
        0,
        0,
        0,
        2426,
        2427,
        3,
        912,
        456,
        0,
        2427,
        431,
        1,
        0,
        0,
        0,
        2428,
        2429,
        3,
        912,
        456,
        0,
        2429,
        433,
        1,
        0,
        0,
        0,
        2430,
        2435,
        5,
        358,
        0,
        0,
        2431,
        2435,
        5,
        375,
        0,
        0,
        2432,
        2435,
        3,
        436,
        218,
        0,
        2433,
        2435,
        3,
        438,
        219,
        0,
        2434,
        2430,
        1,
        0,
        0,
        0,
        2434,
        2431,
        1,
        0,
        0,
        0,
        2434,
        2432,
        1,
        0,
        0,
        0,
        2434,
        2433,
        1,
        0,
        0,
        0,
        2435,
        435,
        1,
        0,
        0,
        0,
        2436,
        2437,
        5,
        368,
        0,
        0,
        2437,
        2438,
        3,
        1124,
        562,
        0,
        2438,
        2439,
        5,
        379,
        0,
        0,
        2439,
        437,
        1,
        0,
        0,
        0,
        2440,
        2442,
        5,
        368,
        0,
        0,
        2441,
        2443,
        3,
        440,
        220,
        0,
        2442,
        2441,
        1,
        0,
        0,
        0,
        2442,
        2443,
        1,
        0,
        0,
        0,
        2443,
        2444,
        1,
        0,
        0,
        0,
        2444,
        2446,
        5,
        360,
        0,
        0,
        2445,
        2447,
        3,
        442,
        221,
        0,
        2446,
        2445,
        1,
        0,
        0,
        0,
        2446,
        2447,
        1,
        0,
        0,
        0,
        2447,
        2448,
        1,
        0,
        0,
        0,
        2448,
        2449,
        5,
        379,
        0,
        0,
        2449,
        439,
        1,
        0,
        0,
        0,
        2450,
        2451,
        3,
        1124,
        562,
        0,
        2451,
        441,
        1,
        0,
        0,
        0,
        2452,
        2453,
        3,
        1124,
        562,
        0,
        2453,
        443,
        1,
        0,
        0,
        0,
        2454,
        2462,
        3,
        446,
        223,
        0,
        2455,
        2462,
        3,
        448,
        224,
        0,
        2456,
        2462,
        3,
        450,
        225,
        0,
        2457,
        2462,
        3,
        452,
        226,
        0,
        2458,
        2462,
        3,
        454,
        227,
        0,
        2459,
        2462,
        3,
        456,
        228,
        0,
        2460,
        2462,
        3,
        458,
        229,
        0,
        2461,
        2454,
        1,
        0,
        0,
        0,
        2461,
        2455,
        1,
        0,
        0,
        0,
        2461,
        2456,
        1,
        0,
        0,
        0,
        2461,
        2457,
        1,
        0,
        0,
        0,
        2461,
        2458,
        1,
        0,
        0,
        0,
        2461,
        2459,
        1,
        0,
        0,
        0,
        2461,
        2460,
        1,
        0,
        0,
        0,
        2462,
        445,
        1,
        0,
        0,
        0,
        2463,
        2464,
        5,
        340,
        0,
        0,
        2464,
        2465,
        3,
        460,
        230,
        0,
        2465,
        2466,
        5,
        350,
        0,
        0,
        2466,
        447,
        1,
        0,
        0,
        0,
        2467,
        2468,
        5,
        356,
        0,
        0,
        2468,
        2469,
        3,
        460,
        230,
        0,
        2469,
        2470,
        5,
        352,
        0,
        0,
        2470,
        449,
        1,
        0,
        0,
        0,
        2471,
        2472,
        5,
        344,
        0,
        0,
        2472,
        2473,
        3,
        460,
        230,
        0,
        2473,
        2474,
        5,
        351,
        0,
        0,
        2474,
        451,
        1,
        0,
        0,
        0,
        2475,
        2476,
        5,
        341,
        0,
        0,
        2476,
        2477,
        3,
        460,
        230,
        0,
        2477,
        2478,
        5,
        352,
        0,
        0,
        2478,
        453,
        1,
        0,
        0,
        0,
        2479,
        2480,
        5,
        356,
        0,
        0,
        2480,
        2481,
        3,
        460,
        230,
        0,
        2481,
        2482,
        5,
        353,
        0,
        0,
        2482,
        455,
        1,
        0,
        0,
        0,
        2483,
        2484,
        5,
        340,
        0,
        0,
        2484,
        2485,
        3,
        460,
        230,
        0,
        2485,
        2486,
        5,
        351,
        0,
        0,
        2486,
        457,
        1,
        0,
        0,
        0,
        2487,
        2488,
        5,
        344,
        0,
        0,
        2488,
        2489,
        3,
        460,
        230,
        0,
        2489,
        2490,
        5,
        350,
        0,
        0,
        2490,
        459,
        1,
        0,
        0,
        0,
        2491,
        2495,
        3,
        466,
        233,
        0,
        2492,
        2495,
        3,
        462,
        231,
        0,
        2493,
        2495,
        3,
        464,
        232,
        0,
        2494,
        2491,
        1,
        0,
        0,
        0,
        2494,
        2492,
        1,
        0,
        0,
        0,
        2494,
        2493,
        1,
        0,
        0,
        0,
        2495,
        461,
        1,
        0,
        0,
        0,
        2496,
        2497,
        3,
        466,
        233,
        0,
        2497,
        2498,
        5,
        385,
        0,
        0,
        2498,
        2503,
        3,
        466,
        233,
        0,
        2499,
        2500,
        5,
        385,
        0,
        0,
        2500,
        2502,
        3,
        466,
        233,
        0,
        2501,
        2499,
        1,
        0,
        0,
        0,
        2502,
        2505,
        1,
        0,
        0,
        0,
        2503,
        2501,
        1,
        0,
        0,
        0,
        2503,
        2504,
        1,
        0,
        0,
        0,
        2504,
        463,
        1,
        0,
        0,
        0,
        2505,
        2503,
        1,
        0,
        0,
        0,
        2506,
        2507,
        3,
        466,
        233,
        0,
        2507,
        2508,
        5,
        327,
        0,
        0,
        2508,
        2513,
        3,
        466,
        233,
        0,
        2509,
        2510,
        5,
        327,
        0,
        0,
        2510,
        2512,
        3,
        466,
        233,
        0,
        2511,
        2509,
        1,
        0,
        0,
        0,
        2512,
        2515,
        1,
        0,
        0,
        0,
        2513,
        2511,
        1,
        0,
        0,
        0,
        2513,
        2514,
        1,
        0,
        0,
        0,
        2514,
        465,
        1,
        0,
        0,
        0,
        2515,
        2513,
        1,
        0,
        0,
        0,
        2516,
        2517,
        6,
        233,
        -1,
        0,
        2517,
        2518,
        3,
        468,
        234,
        0,
        2518,
        2523,
        1,
        0,
        0,
        0,
        2519,
        2520,
        10,
        1,
        0,
        0,
        2520,
        2522,
        3,
        468,
        234,
        0,
        2521,
        2519,
        1,
        0,
        0,
        0,
        2522,
        2525,
        1,
        0,
        0,
        0,
        2523,
        2521,
        1,
        0,
        0,
        0,
        2523,
        2524,
        1,
        0,
        0,
        0,
        2524,
        467,
        1,
        0,
        0,
        0,
        2525,
        2523,
        1,
        0,
        0,
        0,
        2526,
        2527,
        6,
        234,
        -1,
        0,
        2527,
        2528,
        3,
        470,
        235,
        0,
        2528,
        2534,
        1,
        0,
        0,
        0,
        2529,
        2530,
        10,
        1,
        0,
        0,
        2530,
        2531,
        5,
        357,
        0,
        0,
        2531,
        2533,
        3,
        470,
        235,
        0,
        2532,
        2529,
        1,
        0,
        0,
        0,
        2533,
        2536,
        1,
        0,
        0,
        0,
        2534,
        2532,
        1,
        0,
        0,
        0,
        2534,
        2535,
        1,
        0,
        0,
        0,
        2535,
        469,
        1,
        0,
        0,
        0,
        2536,
        2534,
        1,
        0,
        0,
        0,
        2537,
        2541,
        3,
        476,
        238,
        0,
        2538,
        2541,
        3,
        472,
        236,
        0,
        2539,
        2541,
        3,
        474,
        237,
        0,
        2540,
        2537,
        1,
        0,
        0,
        0,
        2540,
        2538,
        1,
        0,
        0,
        0,
        2540,
        2539,
        1,
        0,
        0,
        0,
        2541,
        471,
        1,
        0,
        0,
        0,
        2542,
        2543,
        3,
        476,
        238,
        0,
        2543,
        2544,
        3,
        434,
        217,
        0,
        2544,
        473,
        1,
        0,
        0,
        0,
        2545,
        2546,
        3,
        476,
        238,
        0,
        2546,
        2547,
        5,
        376,
        0,
        0,
        2547,
        475,
        1,
        0,
        0,
        0,
        2548,
        2551,
        3,
        478,
        239,
        0,
        2549,
        2551,
        3,
        494,
        247,
        0,
        2550,
        2548,
        1,
        0,
        0,
        0,
        2550,
        2549,
        1,
        0,
        0,
        0,
        2551,
        477,
        1,
        0,
        0,
        0,
        2552,
        2560,
        3,
        480,
        240,
        0,
        2553,
        2560,
        3,
        482,
        241,
        0,
        2554,
        2560,
        3,
        484,
        242,
        0,
        2555,
        2560,
        3,
        486,
        243,
        0,
        2556,
        2560,
        3,
        488,
        244,
        0,
        2557,
        2560,
        3,
        490,
        245,
        0,
        2558,
        2560,
        3,
        492,
        246,
        0,
        2559,
        2552,
        1,
        0,
        0,
        0,
        2559,
        2553,
        1,
        0,
        0,
        0,
        2559,
        2554,
        1,
        0,
        0,
        0,
        2559,
        2555,
        1,
        0,
        0,
        0,
        2559,
        2556,
        1,
        0,
        0,
        0,
        2559,
        2557,
        1,
        0,
        0,
        0,
        2559,
        2558,
        1,
        0,
        0,
        0,
        2560,
        479,
        1,
        0,
        0,
        0,
        2561,
        2562,
        5,
        371,
        0,
        0,
        2562,
        2563,
        3,
        494,
        247,
        0,
        2563,
        481,
        1,
        0,
        0,
        0,
        2564,
        2565,
        5,
        383,
        0,
        0,
        2565,
        2566,
        3,
        494,
        247,
        0,
        2566,
        483,
        1,
        0,
        0,
        0,
        2567,
        2568,
        3,
        494,
        247,
        0,
        2568,
        2569,
        5,
        366,
        0,
        0,
        2569,
        485,
        1,
        0,
        0,
        0,
        2570,
        2571,
        5,
        336,
        0,
        0,
        2571,
        2572,
        3,
        494,
        247,
        0,
        2572,
        487,
        1,
        0,
        0,
        0,
        2573,
        2574,
        5,
        383,
        0,
        0,
        2574,
        2575,
        3,
        494,
        247,
        0,
        2575,
        2576,
        5,
        366,
        0,
        0,
        2576,
        489,
        1,
        0,
        0,
        0,
        2577,
        2578,
        5,
        371,
        0,
        0,
        2578,
        2579,
        3,
        494,
        247,
        0,
        2579,
        2580,
        5,
        366,
        0,
        0,
        2580,
        491,
        1,
        0,
        0,
        0,
        2581,
        2582,
        5,
        372,
        0,
        0,
        2582,
        2583,
        3,
        494,
        247,
        0,
        2583,
        493,
        1,
        0,
        0,
        0,
        2584,
        2587,
        3,
        498,
        249,
        0,
        2585,
        2587,
        3,
        496,
        248,
        0,
        2586,
        2584,
        1,
        0,
        0,
        0,
        2586,
        2585,
        1,
        0,
        0,
        0,
        2587,
        495,
        1,
        0,
        0,
        0,
        2588,
        2589,
        5,
        365,
        0,
        0,
        2589,
        2590,
        3,
        498,
        249,
        0,
        2590,
        497,
        1,
        0,
        0,
        0,
        2591,
        2597,
        3,
        1080,
        540,
        0,
        2592,
        2593,
        5,
        370,
        0,
        0,
        2593,
        2594,
        3,
        460,
        230,
        0,
        2594,
        2595,
        5,
        381,
        0,
        0,
        2595,
        2597,
        1,
        0,
        0,
        0,
        2596,
        2591,
        1,
        0,
        0,
        0,
        2596,
        2592,
        1,
        0,
        0,
        0,
        2597,
        499,
        1,
        0,
        0,
        0,
        2598,
        2599,
        5,
        230,
        0,
        0,
        2599,
        2600,
        3,
        774,
        387,
        0,
        2600,
        501,
        1,
        0,
        0,
        0,
        2601,
        2602,
        5,
        234,
        0,
        0,
        2602,
        2603,
        3,
        504,
        252,
        0,
        2603,
        503,
        1,
        0,
        0,
        0,
        2604,
        2609,
        3,
        506,
        253,
        0,
        2605,
        2606,
        5,
        360,
        0,
        0,
        2606,
        2608,
        3,
        506,
        253,
        0,
        2607,
        2605,
        1,
        0,
        0,
        0,
        2608,
        2611,
        1,
        0,
        0,
        0,
        2609,
        2607,
        1,
        0,
        0,
        0,
        2609,
        2610,
        1,
        0,
        0,
        0,
        2610,
        505,
        1,
        0,
        0,
        0,
        2611,
        2609,
        1,
        0,
        0,
        0,
        2612,
        2614,
        3,
        508,
        254,
        0,
        2613,
        2615,
        3,
        510,
        255,
        0,
        2614,
        2613,
        1,
        0,
        0,
        0,
        2614,
        2615,
        1,
        0,
        0,
        0,
        2615,
        507,
        1,
        0,
        0,
        0,
        2616,
        2617,
        3,
        1084,
        542,
        0,
        2617,
        509,
        1,
        0,
        0,
        0,
        2618,
        2619,
        5,
        27,
        0,
        0,
        2619,
        2620,
        3,
        1092,
        546,
        0,
        2620,
        511,
        1,
        0,
        0,
        0,
        2621,
        2622,
        5,
        102,
        0,
        0,
        2622,
        2623,
        5,
        41,
        0,
        0,
        2623,
        2624,
        3,
        514,
        257,
        0,
        2624,
        513,
        1,
        0,
        0,
        0,
        2625,
        2630,
        3,
        516,
        258,
        0,
        2626,
        2627,
        5,
        360,
        0,
        0,
        2627,
        2629,
        3,
        516,
        258,
        0,
        2628,
        2626,
        1,
        0,
        0,
        0,
        2629,
        2632,
        1,
        0,
        0,
        0,
        2630,
        2628,
        1,
        0,
        0,
        0,
        2630,
        2631,
        1,
        0,
        0,
        0,
        2631,
        2635,
        1,
        0,
        0,
        0,
        2632,
        2630,
        1,
        0,
        0,
        0,
        2633,
        2635,
        3,
        518,
        259,
        0,
        2634,
        2625,
        1,
        0,
        0,
        0,
        2634,
        2633,
        1,
        0,
        0,
        0,
        2635,
        515,
        1,
        0,
        0,
        0,
        2636,
        2637,
        3,
        912,
        456,
        0,
        2637,
        517,
        1,
        0,
        0,
        0,
        2638,
        2639,
        5,
        370,
        0,
        0,
        2639,
        2640,
        5,
        381,
        0,
        0,
        2640,
        519,
        1,
        0,
        0,
        0,
        2641,
        2642,
        5,
        162,
        0,
        0,
        2642,
        2643,
        5,
        41,
        0,
        0,
        2643,
        2644,
        3,
        522,
        261,
        0,
        2644,
        521,
        1,
        0,
        0,
        0,
        2645,
        2650,
        3,
        524,
        262,
        0,
        2646,
        2647,
        5,
        360,
        0,
        0,
        2647,
        2649,
        3,
        524,
        262,
        0,
        2648,
        2646,
        1,
        0,
        0,
        0,
        2649,
        2652,
        1,
        0,
        0,
        0,
        2650,
        2648,
        1,
        0,
        0,
        0,
        2650,
        2651,
        1,
        0,
        0,
        0,
        2651,
        523,
        1,
        0,
        0,
        0,
        2652,
        2650,
        1,
        0,
        0,
        0,
        2653,
        2655,
        3,
        526,
        263,
        0,
        2654,
        2656,
        3,
        528,
        264,
        0,
        2655,
        2654,
        1,
        0,
        0,
        0,
        2655,
        2656,
        1,
        0,
        0,
        0,
        2656,
        2658,
        1,
        0,
        0,
        0,
        2657,
        2659,
        3,
        530,
        265,
        0,
        2658,
        2657,
        1,
        0,
        0,
        0,
        2658,
        2659,
        1,
        0,
        0,
        0,
        2659,
        525,
        1,
        0,
        0,
        0,
        2660,
        2661,
        3,
        840,
        420,
        0,
        2661,
        527,
        1,
        0,
        0,
        0,
        2662,
        2663,
        7,
        9,
        0,
        0,
        2663,
        529,
        1,
        0,
        0,
        0,
        2664,
        2665,
        5,
        155,
        0,
        0,
        2665,
        2669,
        5,
        288,
        0,
        0,
        2666,
        2667,
        5,
        155,
        0,
        0,
        2667,
        2669,
        5,
        295,
        0,
        0,
        2668,
        2664,
        1,
        0,
        0,
        0,
        2668,
        2666,
        1,
        0,
        0,
        0,
        2669,
        531,
        1,
        0,
        0,
        0,
        2670,
        2671,
        5,
        132,
        0,
        0,
        2671,
        2672,
        3,
        852,
        426,
        0,
        2672,
        533,
        1,
        0,
        0,
        0,
        2673,
        2674,
        3,
        536,
        268,
        0,
        2674,
        2675,
        3,
        852,
        426,
        0,
        2675,
        535,
        1,
        0,
        0,
        0,
        2676,
        2677,
        7,
        10,
        0,
        0,
        2677,
        537,
        1,
        0,
        0,
        0,
        2678,
        2682,
        3,
        540,
        270,
        0,
        2679,
        2682,
        3,
        544,
        272,
        0,
        2680,
        2682,
        3,
        572,
        286,
        0,
        2681,
        2678,
        1,
        0,
        0,
        0,
        2681,
        2679,
        1,
        0,
        0,
        0,
        2681,
        2680,
        1,
        0,
        0,
        0,
        2682,
        539,
        1,
        0,
        0,
        0,
        2683,
        2688,
        5,
        382,
        0,
        0,
        2684,
        2685,
        3,
        548,
        274,
        0,
        2685,
        2686,
        3,
        1062,
        531,
        0,
        2686,
        2688,
        1,
        0,
        0,
        0,
        2687,
        2683,
        1,
        0,
        0,
        0,
        2687,
        2684,
        1,
        0,
        0,
        0,
        2688,
        541,
        1,
        0,
        0,
        0,
        2689,
        2690,
        3,
        548,
        274,
        0,
        2690,
        2691,
        3,
        1062,
        531,
        0,
        2691,
        543,
        1,
        0,
        0,
        0,
        2692,
        2697,
        3,
        546,
        273,
        0,
        2693,
        2694,
        3,
        550,
        275,
        0,
        2694,
        2695,
        3,
        1062,
        531,
        0,
        2695,
        2697,
        1,
        0,
        0,
        0,
        2696,
        2692,
        1,
        0,
        0,
        0,
        2696,
        2693,
        1,
        0,
        0,
        0,
        2697,
        545,
        1,
        0,
        0,
        0,
        2698,
        2699,
        7,
        11,
        0,
        0,
        2699,
        547,
        1,
        0,
        0,
        0,
        2700,
        2702,
        5,
        382,
        0,
        0,
        2701,
        2703,
        3,
        552,
        276,
        0,
        2702,
        2701,
        1,
        0,
        0,
        0,
        2702,
        2703,
        1,
        0,
        0,
        0,
        2703,
        549,
        1,
        0,
        0,
        0,
        2704,
        2709,
        5,
        333,
        0,
        0,
        2705,
        2706,
        5,
        382,
        0,
        0,
        2706,
        2708,
        5,
        333,
        0,
        0,
        2707,
        2705,
        1,
        0,
        0,
        0,
        2708,
        2711,
        1,
        0,
        0,
        0,
        2709,
        2707,
        1,
        0,
        0,
        0,
        2709,
        2710,
        1,
        0,
        0,
        0,
        2710,
        2712,
        1,
        0,
        0,
        0,
        2711,
        2709,
        1,
        0,
        0,
        0,
        2712,
        2714,
        5,
        382,
        0,
        0,
        2713,
        2715,
        3,
        552,
        276,
        0,
        2714,
        2713,
        1,
        0,
        0,
        0,
        2714,
        2715,
        1,
        0,
        0,
        0,
        2715,
        551,
        1,
        0,
        0,
        0,
        2716,
        2717,
        3,
        1060,
        530,
        0,
        2717,
        2718,
        5,
        382,
        0,
        0,
        2718,
        2720,
        1,
        0,
        0,
        0,
        2719,
        2716,
        1,
        0,
        0,
        0,
        2720,
        2721,
        1,
        0,
        0,
        0,
        2721,
        2719,
        1,
        0,
        0,
        0,
        2721,
        2722,
        1,
        0,
        0,
        0,
        2722,
        553,
        1,
        0,
        0,
        0,
        2723,
        2724,
        3,
        570,
        285,
        0,
        2724,
        2725,
        3,
        1064,
        532,
        0,
        2725,
        2730,
        1,
        0,
        0,
        0,
        2726,
        2730,
        3,
        1066,
        533,
        0,
        2727,
        2730,
        3,
        558,
        279,
        0,
        2728,
        2730,
        3,
        572,
        286,
        0,
        2729,
        2723,
        1,
        0,
        0,
        0,
        2729,
        2726,
        1,
        0,
        0,
        0,
        2729,
        2727,
        1,
        0,
        0,
        0,
        2729,
        2728,
        1,
        0,
        0,
        0,
        2730,
        555,
        1,
        0,
        0,
        0,
        2731,
        2733,
        3,
        570,
        285,
        0,
        2732,
        2731,
        1,
        0,
        0,
        0,
        2732,
        2733,
        1,
        0,
        0,
        0,
        2733,
        2734,
        1,
        0,
        0,
        0,
        2734,
        2735,
        3,
        1064,
        532,
        0,
        2735,
        557,
        1,
        0,
        0,
        0,
        2736,
        2737,
        7,
        12,
        0,
        0,
        2737,
        559,
        1,
        0,
        0,
        0,
        2738,
        2741,
        3,
        562,
        281,
        0,
        2739,
        2741,
        3,
        572,
        286,
        0,
        2740,
        2738,
        1,
        0,
        0,
        0,
        2740,
        2739,
        1,
        0,
        0,
        0,
        2741,
        561,
        1,
        0,
        0,
        0,
        2742,
        2744,
        3,
        570,
        285,
        0,
        2743,
        2742,
        1,
        0,
        0,
        0,
        2743,
        2744,
        1,
        0,
        0,
        0,
        2744,
        2745,
        1,
        0,
        0,
        0,
        2745,
        2746,
        3,
        1068,
        534,
        0,
        2746,
        563,
        1,
        0,
        0,
        0,
        2747,
        2748,
        3,
        570,
        285,
        0,
        2748,
        2749,
        3,
        1074,
        537,
        0,
        2749,
        2753,
        1,
        0,
        0,
        0,
        2750,
        2753,
        3,
        1076,
        538,
        0,
        2751,
        2753,
        3,
        572,
        286,
        0,
        2752,
        2747,
        1,
        0,
        0,
        0,
        2752,
        2750,
        1,
        0,
        0,
        0,
        2752,
        2751,
        1,
        0,
        0,
        0,
        2753,
        565,
        1,
        0,
        0,
        0,
        2754,
        2757,
        3,
        568,
        284,
        0,
        2755,
        2757,
        3,
        572,
        286,
        0,
        2756,
        2754,
        1,
        0,
        0,
        0,
        2756,
        2755,
        1,
        0,
        0,
        0,
        2757,
        567,
        1,
        0,
        0,
        0,
        2758,
        2760,
        3,
        570,
        285,
        0,
        2759,
        2758,
        1,
        0,
        0,
        0,
        2759,
        2760,
        1,
        0,
        0,
        0,
        2760,
        2761,
        1,
        0,
        0,
        0,
        2761,
        2762,
        3,
        1078,
        539,
        0,
        2762,
        569,
        1,
        0,
        0,
        0,
        2763,
        2765,
        3,
        538,
        269,
        0,
        2764,
        2766,
        5,
        382,
        0,
        0,
        2765,
        2764,
        1,
        0,
        0,
        0,
        2765,
        2766,
        1,
        0,
        0,
        0,
        2766,
        2772,
        1,
        0,
        0,
        0,
        2767,
        2768,
        3,
        1056,
        528,
        0,
        2768,
        2769,
        5,
        374,
        0,
        0,
        2769,
        2771,
        1,
        0,
        0,
        0,
        2770,
        2767,
        1,
        0,
        0,
        0,
        2771,
        2774,
        1,
        0,
        0,
        0,
        2772,
        2770,
        1,
        0,
        0,
        0,
        2772,
        2773,
        1,
        0,
        0,
        0,
        2773,
        2783,
        1,
        0,
        0,
        0,
        2774,
        2772,
        1,
        0,
        0,
        0,
        2775,
        2776,
        3,
        1056,
        528,
        0,
        2776,
        2777,
        5,
        374,
        0,
        0,
        2777,
        2779,
        1,
        0,
        0,
        0,
        2778,
        2775,
        1,
        0,
        0,
        0,
        2779,
        2780,
        1,
        0,
        0,
        0,
        2780,
        2778,
        1,
        0,
        0,
        0,
        2780,
        2781,
        1,
        0,
        0,
        0,
        2781,
        2783,
        1,
        0,
        0,
        0,
        2782,
        2763,
        1,
        0,
        0,
        0,
        2782,
        2778,
        1,
        0,
        0,
        0,
        2783,
        571,
        1,
        0,
        0,
        0,
        2784,
        2785,
        5,
        325,
        0,
        0,
        2785,
        573,
        1,
        0,
        0,
        0,
        2786,
        2787,
        5,
        368,
        0,
        0,
        2787,
        2788,
        3,
        576,
        288,
        0,
        2788,
        2789,
        5,
        379,
        0,
        0,
        2789,
        575,
        1,
        0,
        0,
        0,
        2790,
        2791,
        3,
        578,
        289,
        0,
        2791,
        577,
        1,
        0,
        0,
        0,
        2792,
        2797,
        3,
        580,
        290,
        0,
        2793,
        2794,
        5,
        360,
        0,
        0,
        2794,
        2796,
        3,
        580,
        290,
        0,
        2795,
        2793,
        1,
        0,
        0,
        0,
        2796,
        2799,
        1,
        0,
        0,
        0,
        2797,
        2795,
        1,
        0,
        0,
        0,
        2797,
        2798,
        1,
        0,
        0,
        0,
        2798,
        579,
        1,
        0,
        0,
        0,
        2799,
        2797,
        1,
        0,
        0,
        0,
        2800,
        2803,
        3,
        582,
        291,
        0,
        2801,
        2803,
        3,
        602,
        301,
        0,
        2802,
        2800,
        1,
        0,
        0,
        0,
        2802,
        2801,
        1,
        0,
        0,
        0,
        2803,
        581,
        1,
        0,
        0,
        0,
        2804,
        2807,
        3,
        584,
        292,
        0,
        2805,
        2807,
        3,
        586,
        293,
        0,
        2806,
        2804,
        1,
        0,
        0,
        0,
        2806,
        2805,
        1,
        0,
        0,
        0,
        2807,
        583,
        1,
        0,
        0,
        0,
        2808,
        2810,
        3,
        1140,
        570,
        0,
        2809,
        2811,
        5,
        317,
        0,
        0,
        2810,
        2809,
        1,
        0,
        0,
        0,
        2810,
        2811,
        1,
        0,
        0,
        0,
        2811,
        2812,
        1,
        0,
        0,
        0,
        2812,
        2813,
        3,
        1070,
        535,
        0,
        2813,
        2815,
        1,
        0,
        0,
        0,
        2814,
        2808,
        1,
        0,
        0,
        0,
        2814,
        2815,
        1,
        0,
        0,
        0,
        2815,
        2816,
        1,
        0,
        0,
        0,
        2816,
        2818,
        5,
        370,
        0,
        0,
        2817,
        2819,
        3,
        592,
        296,
        0,
        2818,
        2817,
        1,
        0,
        0,
        0,
        2818,
        2819,
        1,
        0,
        0,
        0,
        2819,
        2821,
        1,
        0,
        0,
        0,
        2820,
        2822,
        3,
        590,
        295,
        0,
        2821,
        2820,
        1,
        0,
        0,
        0,
        2821,
        2822,
        1,
        0,
        0,
        0,
        2822,
        2823,
        1,
        0,
        0,
        0,
        2823,
        2824,
        5,
        381,
        0,
        0,
        2824,
        585,
        1,
        0,
        0,
        0,
        2825,
        2827,
        3,
        1140,
        570,
        0,
        2826,
        2828,
        5,
        317,
        0,
        0,
        2827,
        2826,
        1,
        0,
        0,
        0,
        2827,
        2828,
        1,
        0,
        0,
        0,
        2828,
        2829,
        1,
        0,
        0,
        0,
        2829,
        2832,
        3,
        588,
        294,
        0,
        2830,
        2831,
        5,
        27,
        0,
        0,
        2831,
        2833,
        3,
        592,
        296,
        0,
        2832,
        2830,
        1,
        0,
        0,
        0,
        2832,
        2833,
        1,
        0,
        0,
        0,
        2833,
        587,
        1,
        0,
        0,
        0,
        2834,
        2836,
        3,
        1070,
        535,
        0,
        2835,
        2837,
        3,
        590,
        295,
        0,
        2836,
        2835,
        1,
        0,
        0,
        0,
        2836,
        2837,
        1,
        0,
        0,
        0,
        2837,
        2840,
        1,
        0,
        0,
        0,
        2838,
        2840,
        3,
        590,
        295,
        0,
        2839,
        2834,
        1,
        0,
        0,
        0,
        2839,
        2838,
        1,
        0,
        0,
        0,
        2840,
        589,
        1,
        0,
        0,
        0,
        2841,
        2843,
        3,
        596,
        298,
        0,
        2842,
        2844,
        3,
        594,
        297,
        0,
        2843,
        2842,
        1,
        0,
        0,
        0,
        2843,
        2844,
        1,
        0,
        0,
        0,
        2844,
        2847,
        1,
        0,
        0,
        0,
        2845,
        2847,
        3,
        594,
        297,
        0,
        2846,
        2841,
        1,
        0,
        0,
        0,
        2846,
        2845,
        1,
        0,
        0,
        0,
        2847,
        591,
        1,
        0,
        0,
        0,
        2848,
        2849,
        3,
        1112,
        556,
        0,
        2849,
        593,
        1,
        0,
        0,
        0,
        2850,
        2856,
        3,
        598,
        299,
        0,
        2851,
        2856,
        3,
        600,
        300,
        0,
        2852,
        2853,
        3,
        598,
        299,
        0,
        2853,
        2854,
        3,
        600,
        300,
        0,
        2854,
        2856,
        1,
        0,
        0,
        0,
        2855,
        2850,
        1,
        0,
        0,
        0,
        2855,
        2851,
        1,
        0,
        0,
        0,
        2855,
        2852,
        1,
        0,
        0,
        0,
        2856,
        595,
        1,
        0,
        0,
        0,
        2857,
        2859,
        3,
        660,
        330,
        0,
        2858,
        2857,
        1,
        0,
        0,
        0,
        2858,
        2859,
        1,
        0,
        0,
        0,
        2859,
        2860,
        1,
        0,
        0,
        0,
        2860,
        2861,
        5,
        1,
        0,
        0,
        2861,
        597,
        1,
        0,
        0,
        0,
        2862,
        2863,
        3,
        660,
        330,
        0,
        2863,
        599,
        1,
        0,
        0,
        0,
        2864,
        2865,
        3,
        664,
        332,
        0,
        2865,
        601,
        1,
        0,
        0,
        0,
        2866,
        2869,
        3,
        604,
        302,
        0,
        2867,
        2869,
        3,
        606,
        303,
        0,
        2868,
        2866,
        1,
        0,
        0,
        0,
        2868,
        2867,
        1,
        0,
        0,
        0,
        2869,
        603,
        1,
        0,
        0,
        0,
        2870,
        2872,
        3,
        638,
        319,
        0,
        2871,
        2870,
        1,
        0,
        0,
        0,
        2871,
        2872,
        1,
        0,
        0,
        0,
        2872,
        2873,
        1,
        0,
        0,
        0,
        2873,
        2875,
        3,
        1144,
        572,
        0,
        2874,
        2876,
        5,
        317,
        0,
        0,
        2875,
        2874,
        1,
        0,
        0,
        0,
        2875,
        2876,
        1,
        0,
        0,
        0,
        2876,
        2877,
        1,
        0,
        0,
        0,
        2877,
        2878,
        3,
        1072,
        536,
        0,
        2878,
        2880,
        1,
        0,
        0,
        0,
        2879,
        2871,
        1,
        0,
        0,
        0,
        2879,
        2880,
        1,
        0,
        0,
        0,
        2880,
        2883,
        1,
        0,
        0,
        0,
        2881,
        2884,
        3,
        620,
        310,
        0,
        2882,
        2884,
        3,
        626,
        313,
        0,
        2883,
        2881,
        1,
        0,
        0,
        0,
        2883,
        2882,
        1,
        0,
        0,
        0,
        2884,
        605,
        1,
        0,
        0,
        0,
        2885,
        2886,
        3,
        638,
        319,
        0,
        2886,
        2888,
        3,
        1144,
        572,
        0,
        2887,
        2889,
        5,
        317,
        0,
        0,
        2888,
        2887,
        1,
        0,
        0,
        0,
        2888,
        2889,
        1,
        0,
        0,
        0,
        2889,
        2890,
        1,
        0,
        0,
        0,
        2890,
        2891,
        3,
        608,
        304,
        0,
        2891,
        2892,
        3,
        640,
        320,
        0,
        2892,
        607,
        1,
        0,
        0,
        0,
        2893,
        2895,
        3,
        1072,
        536,
        0,
        2894,
        2896,
        3,
        610,
        305,
        0,
        2895,
        2894,
        1,
        0,
        0,
        0,
        2895,
        2896,
        1,
        0,
        0,
        0,
        2896,
        2899,
        1,
        0,
        0,
        0,
        2897,
        2899,
        3,
        610,
        305,
        0,
        2898,
        2893,
        1,
        0,
        0,
        0,
        2898,
        2897,
        1,
        0,
        0,
        0,
        2899,
        609,
        1,
        0,
        0,
        0,
        2900,
        2902,
        3,
        614,
        307,
        0,
        2901,
        2903,
        3,
        612,
        306,
        0,
        2902,
        2901,
        1,
        0,
        0,
        0,
        2902,
        2903,
        1,
        0,
        0,
        0,
        2903,
        2906,
        1,
        0,
        0,
        0,
        2904,
        2906,
        3,
        612,
        306,
        0,
        2905,
        2900,
        1,
        0,
        0,
        0,
        2905,
        2904,
        1,
        0,
        0,
        0,
        2906,
        611,
        1,
        0,
        0,
        0,
        2907,
        2913,
        3,
        616,
        308,
        0,
        2908,
        2913,
        3,
        618,
        309,
        0,
        2909,
        2910,
        3,
        616,
        308,
        0,
        2910,
        2911,
        3,
        618,
        309,
        0,
        2911,
        2913,
        1,
        0,
        0,
        0,
        2912,
        2907,
        1,
        0,
        0,
        0,
        2912,
        2908,
        1,
        0,
        0,
        0,
        2912,
        2909,
        1,
        0,
        0,
        0,
        2913,
        613,
        1,
        0,
        0,
        0,
        2914,
        2916,
        3,
        660,
        330,
        0,
        2915,
        2914,
        1,
        0,
        0,
        0,
        2915,
        2916,
        1,
        0,
        0,
        0,
        2916,
        2917,
        1,
        0,
        0,
        0,
        2917,
        2918,
        5,
        1,
        0,
        0,
        2918,
        615,
        1,
        0,
        0,
        0,
        2919,
        2920,
        3,
        660,
        330,
        0,
        2920,
        617,
        1,
        0,
        0,
        0,
        2921,
        2922,
        3,
        664,
        332,
        0,
        2922,
        619,
        1,
        0,
        0,
        0,
        2923,
        2926,
        3,
        622,
        311,
        0,
        2924,
        2926,
        3,
        624,
        312,
        0,
        2925,
        2923,
        1,
        0,
        0,
        0,
        2925,
        2924,
        1,
        0,
        0,
        0,
        2926,
        621,
        1,
        0,
        0,
        0,
        2927,
        2928,
        3,
        634,
        317,
        0,
        2928,
        2929,
        3,
        628,
        314,
        0,
        2929,
        2930,
        3,
        636,
        318,
        0,
        2930,
        623,
        1,
        0,
        0,
        0,
        2931,
        2932,
        3,
        636,
        318,
        0,
        2932,
        2933,
        3,
        630,
        315,
        0,
        2933,
        2934,
        3,
        634,
        317,
        0,
        2934,
        625,
        1,
        0,
        0,
        0,
        2935,
        2936,
        3,
        634,
        317,
        0,
        2936,
        2937,
        3,
        632,
        316,
        0,
        2937,
        2938,
        3,
        636,
        318,
        0,
        2938,
        627,
        1,
        0,
        0,
        0,
        2939,
        2940,
        5,
        343,
        0,
        0,
        2940,
        2941,
        3,
        610,
        305,
        0,
        2941,
        2942,
        5,
        328,
        0,
        0,
        2942,
        629,
        1,
        0,
        0,
        0,
        2943,
        2944,
        5,
        337,
        0,
        0,
        2944,
        2945,
        3,
        610,
        305,
        0,
        2945,
        2946,
        5,
        347,
        0,
        0,
        2946,
        631,
        1,
        0,
        0,
        0,
        2947,
        2948,
        5,
        354,
        0,
        0,
        2948,
        2949,
        3,
        610,
        305,
        0,
        2949,
        2950,
        5,
        348,
        0,
        0,
        2950,
        633,
        1,
        0,
        0,
        0,
        2951,
        2952,
        5,
        370,
        0,
        0,
        2952,
        2953,
        3,
        656,
        328,
        0,
        2953,
        2954,
        5,
        381,
        0,
        0,
        2954,
        2961,
        1,
        0,
        0,
        0,
        2955,
        2957,
        5,
        370,
        0,
        0,
        2956,
        2958,
        3,
        590,
        295,
        0,
        2957,
        2956,
        1,
        0,
        0,
        0,
        2957,
        2958,
        1,
        0,
        0,
        0,
        2958,
        2959,
        1,
        0,
        0,
        0,
        2959,
        2961,
        5,
        381,
        0,
        0,
        2960,
        2951,
        1,
        0,
        0,
        0,
        2960,
        2955,
        1,
        0,
        0,
        0,
        2961,
        635,
        1,
        0,
        0,
        0,
        2962,
        2963,
        5,
        370,
        0,
        0,
        2963,
        2964,
        3,
        658,
        329,
        0,
        2964,
        2965,
        5,
        381,
        0,
        0,
        2965,
        2972,
        1,
        0,
        0,
        0,
        2966,
        2968,
        5,
        370,
        0,
        0,
        2967,
        2969,
        3,
        590,
        295,
        0,
        2968,
        2967,
        1,
        0,
        0,
        0,
        2968,
        2969,
        1,
        0,
        0,
        0,
        2969,
        2970,
        1,
        0,
        0,
        0,
        2970,
        2972,
        5,
        381,
        0,
        0,
        2971,
        2962,
        1,
        0,
        0,
        0,
        2971,
        2966,
        1,
        0,
        0,
        0,
        2972,
        637,
        1,
        0,
        0,
        0,
        2973,
        2974,
        7,
        13,
        0,
        0,
        2974,
        639,
        1,
        0,
        0,
        0,
        2975,
        2976,
        5,
        280,
        0,
        0,
        2976,
        2977,
        3,
        642,
        321,
        0,
        2977,
        641,
        1,
        0,
        0,
        0,
        2978,
        2981,
        3,
        644,
        322,
        0,
        2979,
        2981,
        3,
        650,
        325,
        0,
        2980,
        2978,
        1,
        0,
        0,
        0,
        2980,
        2979,
        1,
        0,
        0,
        0,
        2981,
        643,
        1,
        0,
        0,
        0,
        2982,
        2985,
        3,
        646,
        323,
        0,
        2983,
        2985,
        3,
        648,
        324,
        0,
        2984,
        2982,
        1,
        0,
        0,
        0,
        2984,
        2983,
        1,
        0,
        0,
        0,
        2985,
        645,
        1,
        0,
        0,
        0,
        2986,
        2987,
        5,
        370,
        0,
        0,
        2987,
        2988,
        3,
        656,
        328,
        0,
        2988,
        2989,
        3,
        652,
        326,
        0,
        2989,
        2990,
        3,
        658,
        329,
        0,
        2990,
        2991,
        5,
        381,
        0,
        0,
        2991,
        647,
        1,
        0,
        0,
        0,
        2992,
        2993,
        5,
        370,
        0,
        0,
        2993,
        2994,
        3,
        658,
        329,
        0,
        2994,
        2995,
        5,
        335,
        0,
        0,
        2995,
        2996,
        3,
        656,
        328,
        0,
        2996,
        2997,
        5,
        381,
        0,
        0,
        2997,
        649,
        1,
        0,
        0,
        0,
        2998,
        2999,
        5,
        370,
        0,
        0,
        2999,
        3000,
        3,
        656,
        328,
        0,
        3000,
        3001,
        3,
        654,
        327,
        0,
        3001,
        3002,
        3,
        658,
        329,
        0,
        3002,
        3003,
        5,
        381,
        0,
        0,
        3003,
        651,
        1,
        0,
        0,
        0,
        3004,
        3005,
        7,
        14,
        0,
        0,
        3005,
        653,
        1,
        0,
        0,
        0,
        3006,
        3007,
        7,
        15,
        0,
        0,
        3007,
        655,
        1,
        0,
        0,
        0,
        3008,
        3009,
        3,
        1112,
        556,
        0,
        3009,
        657,
        1,
        0,
        0,
        0,
        3010,
        3011,
        3,
        1112,
        556,
        0,
        3011,
        659,
        1,
        0,
        0,
        0,
        3012,
        3013,
        5,
        292,
        0,
        0,
        3013,
        3020,
        3,
        1080,
        540,
        0,
        3014,
        3015,
        5,
        294,
        0,
        0,
        3015,
        3020,
        3,
        662,
        331,
        0,
        3016,
        3017,
        3,
        390,
        195,
        0,
        3017,
        3018,
        3,
        662,
        331,
        0,
        3018,
        3020,
        1,
        0,
        0,
        0,
        3019,
        3012,
        1,
        0,
        0,
        0,
        3019,
        3014,
        1,
        0,
        0,
        0,
        3019,
        3016,
        1,
        0,
        0,
        0,
        3020,
        661,
        1,
        0,
        0,
        0,
        3021,
        3026,
        3,
        1080,
        540,
        0,
        3022,
        3023,
        5,
        357,
        0,
        0,
        3023,
        3025,
        3,
        1080,
        540,
        0,
        3024,
        3022,
        1,
        0,
        0,
        0,
        3025,
        3028,
        1,
        0,
        0,
        0,
        3026,
        3024,
        1,
        0,
        0,
        0,
        3026,
        3027,
        1,
        0,
        0,
        0,
        3027,
        663,
        1,
        0,
        0,
        0,
        3028,
        3026,
        1,
        0,
        0,
        0,
        3029,
        3031,
        5,
        368,
        0,
        0,
        3030,
        3032,
        3,
        666,
        333,
        0,
        3031,
        3030,
        1,
        0,
        0,
        0,
        3031,
        3032,
        1,
        0,
        0,
        0,
        3032,
        3033,
        1,
        0,
        0,
        0,
        3033,
        3034,
        5,
        379,
        0,
        0,
        3034,
        665,
        1,
        0,
        0,
        0,
        3035,
        3040,
        3,
        668,
        334,
        0,
        3036,
        3037,
        5,
        360,
        0,
        0,
        3037,
        3039,
        3,
        668,
        334,
        0,
        3038,
        3036,
        1,
        0,
        0,
        0,
        3039,
        3042,
        1,
        0,
        0,
        0,
        3040,
        3038,
        1,
        0,
        0,
        0,
        3040,
        3041,
        1,
        0,
        0,
        0,
        3041,
        667,
        1,
        0,
        0,
        0,
        3042,
        3040,
        1,
        0,
        0,
        0,
        3043,
        3045,
        3,
        1082,
        541,
        0,
        3044,
        3046,
        3,
        676,
        338,
        0,
        3045,
        3044,
        1,
        0,
        0,
        0,
        3045,
        3046,
        1,
        0,
        0,
        0,
        3046,
        3047,
        1,
        0,
        0,
        0,
        3047,
        3048,
        3,
        670,
        335,
        0,
        3048,
        669,
        1,
        0,
        0,
        0,
        3049,
        3050,
        3,
        674,
        337,
        0,
        3050,
        671,
        1,
        0,
        0,
        0,
        3051,
        3053,
        5,
        278,
        0,
        0,
        3052,
        3051,
        1,
        0,
        0,
        0,
        3052,
        3053,
        1,
        0,
        0,
        0,
        3053,
        3054,
        1,
        0,
        0,
        0,
        3054,
        3055,
        5,
        313,
        0,
        0,
        3055,
        3056,
        3,
        766,
        383,
        0,
        3056,
        673,
        1,
        0,
        0,
        0,
        3057,
        3058,
        6,
        337,
        -1,
        0,
        3058,
        3115,
        3,
        678,
        339,
        0,
        3059,
        3115,
        3,
        758,
        379,
        0,
        3060,
        3061,
        3,
        760,
        380,
        0,
        3061,
        3062,
        5,
        371,
        0,
        0,
        3062,
        3063,
        3,
        674,
        337,
        0,
        3063,
        3068,
        5,
        366,
        0,
        0,
        3064,
        3065,
        5,
        369,
        0,
        0,
        3065,
        3066,
        3,
        688,
        344,
        0,
        3066,
        3067,
        5,
        380,
        0,
        0,
        3067,
        3069,
        1,
        0,
        0,
        0,
        3068,
        3064,
        1,
        0,
        0,
        0,
        3068,
        3069,
        1,
        0,
        0,
        0,
        3069,
        3071,
        1,
        0,
        0,
        0,
        3070,
        3072,
        3,
        770,
        385,
        0,
        3071,
        3070,
        1,
        0,
        0,
        0,
        3071,
        3072,
        1,
        0,
        0,
        0,
        3072,
        3115,
        1,
        0,
        0,
        0,
        3073,
        3078,
        3,
        760,
        380,
        0,
        3074,
        3075,
        5,
        369,
        0,
        0,
        3075,
        3076,
        3,
        688,
        344,
        0,
        3076,
        3077,
        5,
        380,
        0,
        0,
        3077,
        3079,
        1,
        0,
        0,
        0,
        3078,
        3074,
        1,
        0,
        0,
        0,
        3078,
        3079,
        1,
        0,
        0,
        0,
        3079,
        3081,
        1,
        0,
        0,
        0,
        3080,
        3082,
        3,
        770,
        385,
        0,
        3081,
        3080,
        1,
        0,
        0,
        0,
        3081,
        3082,
        1,
        0,
        0,
        0,
        3082,
        3115,
        1,
        0,
        0,
        0,
        3083,
        3115,
        3,
        764,
        382,
        0,
        3084,
        3086,
        5,
        25,
        0,
        0,
        3085,
        3087,
        5,
        225,
        0,
        0,
        3086,
        3085,
        1,
        0,
        0,
        0,
        3086,
        3087,
        1,
        0,
        0,
        0,
        3087,
        3089,
        1,
        0,
        0,
        0,
        3088,
        3090,
        3,
        770,
        385,
        0,
        3089,
        3088,
        1,
        0,
        0,
        0,
        3089,
        3090,
        1,
        0,
        0,
        0,
        3090,
        3115,
        1,
        0,
        0,
        0,
        3091,
        3093,
        5,
        25,
        0,
        0,
        3092,
        3091,
        1,
        0,
        0,
        0,
        3092,
        3093,
        1,
        0,
        0,
        0,
        3093,
        3094,
        1,
        0,
        0,
        0,
        3094,
        3095,
        5,
        305,
        0,
        0,
        3095,
        3097,
        5,
        225,
        0,
        0,
        3096,
        3098,
        3,
        770,
        385,
        0,
        3097,
        3096,
        1,
        0,
        0,
        0,
        3097,
        3098,
        1,
        0,
        0,
        0,
        3098,
        3115,
        1,
        0,
        0,
        0,
        3099,
        3101,
        5,
        25,
        0,
        0,
        3100,
        3102,
        5,
        225,
        0,
        0,
        3101,
        3100,
        1,
        0,
        0,
        0,
        3101,
        3102,
        1,
        0,
        0,
        0,
        3102,
        3103,
        1,
        0,
        0,
        0,
        3103,
        3104,
        5,
        371,
        0,
        0,
        3104,
        3109,
        3,
        674,
        337,
        0,
        3105,
        3106,
        5,
        385,
        0,
        0,
        3106,
        3108,
        3,
        674,
        337,
        0,
        3107,
        3105,
        1,
        0,
        0,
        0,
        3108,
        3111,
        1,
        0,
        0,
        0,
        3109,
        3107,
        1,
        0,
        0,
        0,
        3109,
        3110,
        1,
        0,
        0,
        0,
        3110,
        3112,
        1,
        0,
        0,
        0,
        3111,
        3109,
        1,
        0,
        0,
        0,
        3112,
        3113,
        5,
        366,
        0,
        0,
        3113,
        3115,
        1,
        0,
        0,
        0,
        3114,
        3057,
        1,
        0,
        0,
        0,
        3114,
        3059,
        1,
        0,
        0,
        0,
        3114,
        3060,
        1,
        0,
        0,
        0,
        3114,
        3073,
        1,
        0,
        0,
        0,
        3114,
        3083,
        1,
        0,
        0,
        0,
        3114,
        3084,
        1,
        0,
        0,
        0,
        3114,
        3092,
        1,
        0,
        0,
        0,
        3114,
        3099,
        1,
        0,
        0,
        0,
        3115,
        3132,
        1,
        0,
        0,
        0,
        3116,
        3117,
        10,
        1,
        0,
        0,
        3117,
        3118,
        5,
        385,
        0,
        0,
        3118,
        3131,
        3,
        674,
        337,
        2,
        3119,
        3120,
        10,
        7,
        0,
        0,
        3120,
        3125,
        3,
        760,
        380,
        0,
        3121,
        3122,
        5,
        369,
        0,
        0,
        3122,
        3123,
        3,
        688,
        344,
        0,
        3123,
        3124,
        5,
        380,
        0,
        0,
        3124,
        3126,
        1,
        0,
        0,
        0,
        3125,
        3121,
        1,
        0,
        0,
        0,
        3125,
        3126,
        1,
        0,
        0,
        0,
        3126,
        3128,
        1,
        0,
        0,
        0,
        3127,
        3129,
        3,
        770,
        385,
        0,
        3128,
        3127,
        1,
        0,
        0,
        0,
        3128,
        3129,
        1,
        0,
        0,
        0,
        3129,
        3131,
        1,
        0,
        0,
        0,
        3130,
        3116,
        1,
        0,
        0,
        0,
        3130,
        3119,
        1,
        0,
        0,
        0,
        3131,
        3134,
        1,
        0,
        0,
        0,
        3132,
        3130,
        1,
        0,
        0,
        0,
        3132,
        3133,
        1,
        0,
        0,
        0,
        3133,
        675,
        1,
        0,
        0,
        0,
        3134,
        3132,
        1,
        0,
        0,
        0,
        3135,
        3136,
        7,
        16,
        0,
        0,
        3136,
        677,
        1,
        0,
        0,
        0,
        3137,
        3145,
        3,
        680,
        340,
        0,
        3138,
        3145,
        3,
        682,
        341,
        0,
        3139,
        3145,
        3,
        684,
        342,
        0,
        3140,
        3145,
        3,
        692,
        346,
        0,
        3141,
        3145,
        3,
        712,
        356,
        0,
        3142,
        3145,
        3,
        730,
        365,
        0,
        3143,
        3145,
        3,
        732,
        366,
        0,
        3144,
        3137,
        1,
        0,
        0,
        0,
        3144,
        3138,
        1,
        0,
        0,
        0,
        3144,
        3139,
        1,
        0,
        0,
        0,
        3144,
        3140,
        1,
        0,
        0,
        0,
        3144,
        3141,
        1,
        0,
        0,
        0,
        3144,
        3142,
        1,
        0,
        0,
        0,
        3144,
        3143,
        1,
        0,
        0,
        0,
        3145,
        679,
        1,
        0,
        0,
        0,
        3146,
        3148,
        7,
        17,
        0,
        0,
        3147,
        3149,
        3,
        770,
        385,
        0,
        3148,
        3147,
        1,
        0,
        0,
        0,
        3148,
        3149,
        1,
        0,
        0,
        0,
        3149,
        681,
        1,
        0,
        0,
        0,
        3150,
        3160,
        5,
        202,
        0,
        0,
        3151,
        3155,
        5,
        370,
        0,
        0,
        3152,
        3153,
        3,
        686,
        343,
        0,
        3153,
        3154,
        5,
        360,
        0,
        0,
        3154,
        3156,
        1,
        0,
        0,
        0,
        3155,
        3152,
        1,
        0,
        0,
        0,
        3155,
        3156,
        1,
        0,
        0,
        0,
        3156,
        3157,
        1,
        0,
        0,
        0,
        3157,
        3158,
        3,
        688,
        344,
        0,
        3158,
        3159,
        5,
        381,
        0,
        0,
        3159,
        3161,
        1,
        0,
        0,
        0,
        3160,
        3151,
        1,
        0,
        0,
        0,
        3160,
        3161,
        1,
        0,
        0,
        0,
        3161,
        3163,
        1,
        0,
        0,
        0,
        3162,
        3164,
        3,
        770,
        385,
        0,
        3163,
        3162,
        1,
        0,
        0,
        0,
        3163,
        3164,
        1,
        0,
        0,
        0,
        3164,
        3186,
        1,
        0,
        0,
        0,
        3165,
        3170,
        5,
        50,
        0,
        0,
        3166,
        3167,
        5,
        370,
        0,
        0,
        3167,
        3168,
        3,
        690,
        345,
        0,
        3168,
        3169,
        5,
        381,
        0,
        0,
        3169,
        3171,
        1,
        0,
        0,
        0,
        3170,
        3166,
        1,
        0,
        0,
        0,
        3170,
        3171,
        1,
        0,
        0,
        0,
        3171,
        3173,
        1,
        0,
        0,
        0,
        3172,
        3174,
        3,
        770,
        385,
        0,
        3173,
        3172,
        1,
        0,
        0,
        0,
        3173,
        3174,
        1,
        0,
        0,
        0,
        3174,
        3186,
        1,
        0,
        0,
        0,
        3175,
        3180,
        5,
        227,
        0,
        0,
        3176,
        3177,
        5,
        370,
        0,
        0,
        3177,
        3178,
        3,
        688,
        344,
        0,
        3178,
        3179,
        5,
        381,
        0,
        0,
        3179,
        3181,
        1,
        0,
        0,
        0,
        3180,
        3176,
        1,
        0,
        0,
        0,
        3180,
        3181,
        1,
        0,
        0,
        0,
        3181,
        3183,
        1,
        0,
        0,
        0,
        3182,
        3184,
        3,
        770,
        385,
        0,
        3183,
        3182,
        1,
        0,
        0,
        0,
        3183,
        3184,
        1,
        0,
        0,
        0,
        3184,
        3186,
        1,
        0,
        0,
        0,
        3185,
        3150,
        1,
        0,
        0,
        0,
        3185,
        3165,
        1,
        0,
        0,
        0,
        3185,
        3175,
        1,
        0,
        0,
        0,
        3186,
        683,
        1,
        0,
        0,
        0,
        3187,
        3197,
        5,
        43,
        0,
        0,
        3188,
        3192,
        5,
        370,
        0,
        0,
        3189,
        3190,
        3,
        686,
        343,
        0,
        3190,
        3191,
        5,
        360,
        0,
        0,
        3191,
        3193,
        1,
        0,
        0,
        0,
        3192,
        3189,
        1,
        0,
        0,
        0,
        3192,
        3193,
        1,
        0,
        0,
        0,
        3193,
        3194,
        1,
        0,
        0,
        0,
        3194,
        3195,
        3,
        688,
        344,
        0,
        3195,
        3196,
        5,
        381,
        0,
        0,
        3196,
        3198,
        1,
        0,
        0,
        0,
        3197,
        3188,
        1,
        0,
        0,
        0,
        3197,
        3198,
        1,
        0,
        0,
        0,
        3198,
        3200,
        1,
        0,
        0,
        0,
        3199,
        3201,
        3,
        770,
        385,
        0,
        3200,
        3199,
        1,
        0,
        0,
        0,
        3200,
        3201,
        1,
        0,
        0,
        0,
        3201,
        3223,
        1,
        0,
        0,
        0,
        3202,
        3207,
        5,
        36,
        0,
        0,
        3203,
        3204,
        5,
        370,
        0,
        0,
        3204,
        3205,
        3,
        690,
        345,
        0,
        3205,
        3206,
        5,
        381,
        0,
        0,
        3206,
        3208,
        1,
        0,
        0,
        0,
        3207,
        3203,
        1,
        0,
        0,
        0,
        3207,
        3208,
        1,
        0,
        0,
        0,
        3208,
        3210,
        1,
        0,
        0,
        0,
        3209,
        3211,
        3,
        770,
        385,
        0,
        3210,
        3209,
        1,
        0,
        0,
        0,
        3210,
        3211,
        1,
        0,
        0,
        0,
        3211,
        3223,
        1,
        0,
        0,
        0,
        3212,
        3217,
        5,
        226,
        0,
        0,
        3213,
        3214,
        5,
        370,
        0,
        0,
        3214,
        3215,
        3,
        688,
        344,
        0,
        3215,
        3216,
        5,
        381,
        0,
        0,
        3216,
        3218,
        1,
        0,
        0,
        0,
        3217,
        3213,
        1,
        0,
        0,
        0,
        3217,
        3218,
        1,
        0,
        0,
        0,
        3218,
        3220,
        1,
        0,
        0,
        0,
        3219,
        3221,
        3,
        770,
        385,
        0,
        3220,
        3219,
        1,
        0,
        0,
        0,
        3220,
        3221,
        1,
        0,
        0,
        0,
        3221,
        3223,
        1,
        0,
        0,
        0,
        3222,
        3187,
        1,
        0,
        0,
        0,
        3222,
        3202,
        1,
        0,
        0,
        0,
        3222,
        3212,
        1,
        0,
        0,
        0,
        3223,
        685,
        1,
        0,
        0,
        0,
        3224,
        3225,
        3,
        1124,
        562,
        0,
        3225,
        687,
        1,
        0,
        0,
        0,
        3226,
        3227,
        3,
        1124,
        562,
        0,
        3227,
        689,
        1,
        0,
        0,
        0,
        3228,
        3229,
        3,
        1124,
        562,
        0,
        3229,
        691,
        1,
        0,
        0,
        0,
        3230,
        3233,
        3,
        694,
        347,
        0,
        3231,
        3233,
        3,
        710,
        355,
        0,
        3232,
        3230,
        1,
        0,
        0,
        0,
        3232,
        3231,
        1,
        0,
        0,
        0,
        3233,
        693,
        1,
        0,
        0,
        0,
        3234,
        3237,
        3,
        696,
        348,
        0,
        3235,
        3237,
        3,
        704,
        352,
        0,
        3236,
        3234,
        1,
        0,
        0,
        0,
        3236,
        3235,
        1,
        0,
        0,
        0,
        3237,
        695,
        1,
        0,
        0,
        0,
        3238,
        3241,
        3,
        698,
        349,
        0,
        3239,
        3241,
        3,
        700,
        350,
        0,
        3240,
        3238,
        1,
        0,
        0,
        0,
        3240,
        3239,
        1,
        0,
        0,
        0,
        3241,
        697,
        1,
        0,
        0,
        0,
        3242,
        3244,
        5,
        113,
        0,
        0,
        3243,
        3245,
        3,
        770,
        385,
        0,
        3244,
        3243,
        1,
        0,
        0,
        0,
        3244,
        3245,
        1,
        0,
        0,
        0,
        3245,
        3289,
        1,
        0,
        0,
        0,
        3246,
        3248,
        5,
        115,
        0,
        0,
        3247,
        3249,
        3,
        770,
        385,
        0,
        3248,
        3247,
        1,
        0,
        0,
        0,
        3248,
        3249,
        1,
        0,
        0,
        0,
        3249,
        3289,
        1,
        0,
        0,
        0,
        3250,
        3252,
        5,
        117,
        0,
        0,
        3251,
        3253,
        3,
        770,
        385,
        0,
        3252,
        3251,
        1,
        0,
        0,
        0,
        3252,
        3253,
        1,
        0,
        0,
        0,
        3253,
        3289,
        1,
        0,
        0,
        0,
        3254,
        3256,
        5,
        119,
        0,
        0,
        3255,
        3257,
        3,
        770,
        385,
        0,
        3256,
        3255,
        1,
        0,
        0,
        0,
        3256,
        3257,
        1,
        0,
        0,
        0,
        3257,
        3289,
        1,
        0,
        0,
        0,
        3258,
        3260,
        5,
        121,
        0,
        0,
        3259,
        3261,
        3,
        770,
        385,
        0,
        3260,
        3259,
        1,
        0,
        0,
        0,
        3260,
        3261,
        1,
        0,
        0,
        0,
        3261,
        3289,
        1,
        0,
        0,
        0,
        3262,
        3264,
        5,
        123,
        0,
        0,
        3263,
        3265,
        3,
        770,
        385,
        0,
        3264,
        3263,
        1,
        0,
        0,
        0,
        3264,
        3265,
        1,
        0,
        0,
        0,
        3265,
        3289,
        1,
        0,
        0,
        0,
        3266,
        3268,
        5,
        197,
        0,
        0,
        3267,
        3269,
        3,
        770,
        385,
        0,
        3268,
        3267,
        1,
        0,
        0,
        0,
        3268,
        3269,
        1,
        0,
        0,
        0,
        3269,
        3289,
        1,
        0,
        0,
        0,
        3270,
        3275,
        5,
        111,
        0,
        0,
        3271,
        3272,
        5,
        370,
        0,
        0,
        3272,
        3273,
        3,
        706,
        353,
        0,
        3273,
        3274,
        5,
        381,
        0,
        0,
        3274,
        3276,
        1,
        0,
        0,
        0,
        3275,
        3271,
        1,
        0,
        0,
        0,
        3275,
        3276,
        1,
        0,
        0,
        0,
        3276,
        3278,
        1,
        0,
        0,
        0,
        3277,
        3279,
        3,
        770,
        385,
        0,
        3278,
        3277,
        1,
        0,
        0,
        0,
        3278,
        3279,
        1,
        0,
        0,
        0,
        3279,
        3289,
        1,
        0,
        0,
        0,
        3280,
        3282,
        5,
        35,
        0,
        0,
        3281,
        3283,
        3,
        770,
        385,
        0,
        3282,
        3281,
        1,
        0,
        0,
        0,
        3282,
        3283,
        1,
        0,
        0,
        0,
        3283,
        3289,
        1,
        0,
        0,
        0,
        3284,
        3286,
        5,
        191,
        0,
        0,
        3285,
        3284,
        1,
        0,
        0,
        0,
        3285,
        3286,
        1,
        0,
        0,
        0,
        3286,
        3287,
        1,
        0,
        0,
        0,
        3287,
        3289,
        3,
        702,
        351,
        0,
        3288,
        3242,
        1,
        0,
        0,
        0,
        3288,
        3246,
        1,
        0,
        0,
        0,
        3288,
        3250,
        1,
        0,
        0,
        0,
        3288,
        3254,
        1,
        0,
        0,
        0,
        3288,
        3258,
        1,
        0,
        0,
        0,
        3288,
        3262,
        1,
        0,
        0,
        0,
        3288,
        3266,
        1,
        0,
        0,
        0,
        3288,
        3270,
        1,
        0,
        0,
        0,
        3288,
        3280,
        1,
        0,
        0,
        0,
        3288,
        3285,
        1,
        0,
        0,
        0,
        3289,
        699,
        1,
        0,
        0,
        0,
        3290,
        3292,
        5,
        214,
        0,
        0,
        3291,
        3293,
        3,
        770,
        385,
        0,
        3292,
        3291,
        1,
        0,
        0,
        0,
        3292,
        3293,
        1,
        0,
        0,
        0,
        3293,
        3335,
        1,
        0,
        0,
        0,
        3294,
        3296,
        5,
        215,
        0,
        0,
        3295,
        3297,
        3,
        770,
        385,
        0,
        3296,
        3295,
        1,
        0,
        0,
        0,
        3296,
        3297,
        1,
        0,
        0,
        0,
        3297,
        3335,
        1,
        0,
        0,
        0,
        3298,
        3300,
        5,
        216,
        0,
        0,
        3299,
        3301,
        3,
        770,
        385,
        0,
        3300,
        3299,
        1,
        0,
        0,
        0,
        3300,
        3301,
        1,
        0,
        0,
        0,
        3301,
        3335,
        1,
        0,
        0,
        0,
        3302,
        3304,
        5,
        217,
        0,
        0,
        3303,
        3305,
        3,
        770,
        385,
        0,
        3304,
        3303,
        1,
        0,
        0,
        0,
        3304,
        3305,
        1,
        0,
        0,
        0,
        3305,
        3335,
        1,
        0,
        0,
        0,
        3306,
        3308,
        5,
        218,
        0,
        0,
        3307,
        3309,
        3,
        770,
        385,
        0,
        3308,
        3307,
        1,
        0,
        0,
        0,
        3308,
        3309,
        1,
        0,
        0,
        0,
        3309,
        3335,
        1,
        0,
        0,
        0,
        3310,
        3312,
        5,
        219,
        0,
        0,
        3311,
        3313,
        3,
        770,
        385,
        0,
        3312,
        3311,
        1,
        0,
        0,
        0,
        3312,
        3313,
        1,
        0,
        0,
        0,
        3313,
        3335,
        1,
        0,
        0,
        0,
        3314,
        3316,
        5,
        224,
        0,
        0,
        3315,
        3317,
        3,
        770,
        385,
        0,
        3316,
        3315,
        1,
        0,
        0,
        0,
        3316,
        3317,
        1,
        0,
        0,
        0,
        3317,
        3335,
        1,
        0,
        0,
        0,
        3318,
        3323,
        5,
        213,
        0,
        0,
        3319,
        3320,
        5,
        370,
        0,
        0,
        3320,
        3321,
        3,
        706,
        353,
        0,
        3321,
        3322,
        5,
        381,
        0,
        0,
        3322,
        3324,
        1,
        0,
        0,
        0,
        3323,
        3319,
        1,
        0,
        0,
        0,
        3323,
        3324,
        1,
        0,
        0,
        0,
        3324,
        3326,
        1,
        0,
        0,
        0,
        3325,
        3327,
        3,
        770,
        385,
        0,
        3326,
        3325,
        1,
        0,
        0,
        0,
        3326,
        3327,
        1,
        0,
        0,
        0,
        3327,
        3335,
        1,
        0,
        0,
        0,
        3328,
        3330,
        5,
        212,
        0,
        0,
        3329,
        3331,
        3,
        770,
        385,
        0,
        3330,
        3329,
        1,
        0,
        0,
        0,
        3330,
        3331,
        1,
        0,
        0,
        0,
        3331,
        3335,
        1,
        0,
        0,
        0,
        3332,
        3333,
        5,
        221,
        0,
        0,
        3333,
        3335,
        3,
        702,
        351,
        0,
        3334,
        3290,
        1,
        0,
        0,
        0,
        3334,
        3294,
        1,
        0,
        0,
        0,
        3334,
        3298,
        1,
        0,
        0,
        0,
        3334,
        3302,
        1,
        0,
        0,
        0,
        3334,
        3306,
        1,
        0,
        0,
        0,
        3334,
        3310,
        1,
        0,
        0,
        0,
        3334,
        3314,
        1,
        0,
        0,
        0,
        3334,
        3318,
        1,
        0,
        0,
        0,
        3334,
        3328,
        1,
        0,
        0,
        0,
        3334,
        3332,
        1,
        0,
        0,
        0,
        3335,
        701,
        1,
        0,
        0,
        0,
        3336,
        3338,
        5,
        114,
        0,
        0,
        3337,
        3339,
        3,
        770,
        385,
        0,
        3338,
        3337,
        1,
        0,
        0,
        0,
        3338,
        3339,
        1,
        0,
        0,
        0,
        3339,
        3381,
        1,
        0,
        0,
        0,
        3340,
        3342,
        5,
        116,
        0,
        0,
        3341,
        3343,
        3,
        770,
        385,
        0,
        3342,
        3341,
        1,
        0,
        0,
        0,
        3342,
        3343,
        1,
        0,
        0,
        0,
        3343,
        3381,
        1,
        0,
        0,
        0,
        3344,
        3346,
        5,
        118,
        0,
        0,
        3345,
        3347,
        3,
        770,
        385,
        0,
        3346,
        3345,
        1,
        0,
        0,
        0,
        3346,
        3347,
        1,
        0,
        0,
        0,
        3347,
        3381,
        1,
        0,
        0,
        0,
        3348,
        3350,
        5,
        120,
        0,
        0,
        3349,
        3351,
        3,
        770,
        385,
        0,
        3350,
        3349,
        1,
        0,
        0,
        0,
        3350,
        3351,
        1,
        0,
        0,
        0,
        3351,
        3381,
        1,
        0,
        0,
        0,
        3352,
        3354,
        5,
        122,
        0,
        0,
        3353,
        3355,
        3,
        770,
        385,
        0,
        3354,
        3353,
        1,
        0,
        0,
        0,
        3354,
        3355,
        1,
        0,
        0,
        0,
        3355,
        3381,
        1,
        0,
        0,
        0,
        3356,
        3358,
        5,
        124,
        0,
        0,
        3357,
        3359,
        3,
        770,
        385,
        0,
        3358,
        3357,
        1,
        0,
        0,
        0,
        3358,
        3359,
        1,
        0,
        0,
        0,
        3359,
        3381,
        1,
        0,
        0,
        0,
        3360,
        3361,
        5,
        196,
        0,
        0,
        3361,
        3363,
        5,
        112,
        0,
        0,
        3362,
        3364,
        3,
        770,
        385,
        0,
        3363,
        3362,
        1,
        0,
        0,
        0,
        3363,
        3364,
        1,
        0,
        0,
        0,
        3364,
        3381,
        1,
        0,
        0,
        0,
        3365,
        3370,
        5,
        112,
        0,
        0,
        3366,
        3367,
        5,
        370,
        0,
        0,
        3367,
        3368,
        3,
        706,
        353,
        0,
        3368,
        3369,
        5,
        381,
        0,
        0,
        3369,
        3371,
        1,
        0,
        0,
        0,
        3370,
        3366,
        1,
        0,
        0,
        0,
        3370,
        3371,
        1,
        0,
        0,
        0,
        3371,
        3373,
        1,
        0,
        0,
        0,
        3372,
        3374,
        3,
        770,
        385,
        0,
        3373,
        3372,
        1,
        0,
        0,
        0,
        3373,
        3374,
        1,
        0,
        0,
        0,
        3374,
        3381,
        1,
        0,
        0,
        0,
        3375,
        3376,
        5,
        34,
        0,
        0,
        3376,
        3378,
        5,
        112,
        0,
        0,
        3377,
        3379,
        3,
        770,
        385,
        0,
        3378,
        3377,
        1,
        0,
        0,
        0,
        3378,
        3379,
        1,
        0,
        0,
        0,
        3379,
        3381,
        1,
        0,
        0,
        0,
        3380,
        3336,
        1,
        0,
        0,
        0,
        3380,
        3340,
        1,
        0,
        0,
        0,
        3380,
        3344,
        1,
        0,
        0,
        0,
        3380,
        3348,
        1,
        0,
        0,
        0,
        3380,
        3352,
        1,
        0,
        0,
        0,
        3380,
        3356,
        1,
        0,
        0,
        0,
        3380,
        3360,
        1,
        0,
        0,
        0,
        3380,
        3365,
        1,
        0,
        0,
        0,
        3380,
        3375,
        1,
        0,
        0,
        0,
        3381,
        703,
        1,
        0,
        0,
        0,
        3382,
        3393,
        7,
        18,
        0,
        0,
        3383,
        3384,
        5,
        370,
        0,
        0,
        3384,
        3387,
        3,
        706,
        353,
        0,
        3385,
        3386,
        5,
        360,
        0,
        0,
        3386,
        3388,
        3,
        708,
        354,
        0,
        3387,
        3385,
        1,
        0,
        0,
        0,
        3387,
        3388,
        1,
        0,
        0,
        0,
        3388,
        3389,
        1,
        0,
        0,
        0,
        3389,
        3391,
        5,
        381,
        0,
        0,
        3390,
        3392,
        3,
        770,
        385,
        0,
        3391,
        3390,
        1,
        0,
        0,
        0,
        3391,
        3392,
        1,
        0,
        0,
        0,
        3392,
        3394,
        1,
        0,
        0,
        0,
        3393,
        3383,
        1,
        0,
        0,
        0,
        3393,
        3394,
        1,
        0,
        0,
        0,
        3394,
        705,
        1,
        0,
        0,
        0,
        3395,
        3396,
        3,
        1126,
        563,
        0,
        3396,
        707,
        1,
        0,
        0,
        0,
        3397,
        3398,
        3,
        1126,
        563,
        0,
        3398,
        709,
        1,
        0,
        0,
        0,
        3399,
        3401,
        5,
        94,
        0,
        0,
        3400,
        3402,
        3,
        770,
        385,
        0,
        3401,
        3400,
        1,
        0,
        0,
        0,
        3401,
        3402,
        1,
        0,
        0,
        0,
        3402,
        3445,
        1,
        0,
        0,
        0,
        3403,
        3405,
        5,
        95,
        0,
        0,
        3404,
        3406,
        3,
        770,
        385,
        0,
        3405,
        3404,
        1,
        0,
        0,
        0,
        3405,
        3406,
        1,
        0,
        0,
        0,
        3406,
        3445,
        1,
        0,
        0,
        0,
        3407,
        3409,
        5,
        96,
        0,
        0,
        3408,
        3410,
        3,
        770,
        385,
        0,
        3409,
        3408,
        1,
        0,
        0,
        0,
        3409,
        3410,
        1,
        0,
        0,
        0,
        3410,
        3445,
        1,
        0,
        0,
        0,
        3411,
        3413,
        5,
        97,
        0,
        0,
        3412,
        3414,
        3,
        770,
        385,
        0,
        3413,
        3412,
        1,
        0,
        0,
        0,
        3413,
        3414,
        1,
        0,
        0,
        0,
        3414,
        3445,
        1,
        0,
        0,
        0,
        3415,
        3417,
        5,
        98,
        0,
        0,
        3416,
        3418,
        3,
        770,
        385,
        0,
        3417,
        3416,
        1,
        0,
        0,
        0,
        3417,
        3418,
        1,
        0,
        0,
        0,
        3418,
        3445,
        1,
        0,
        0,
        0,
        3419,
        3428,
        5,
        93,
        0,
        0,
        3420,
        3421,
        5,
        370,
        0,
        0,
        3421,
        3424,
        3,
        706,
        353,
        0,
        3422,
        3423,
        5,
        360,
        0,
        0,
        3423,
        3425,
        3,
        708,
        354,
        0,
        3424,
        3422,
        1,
        0,
        0,
        0,
        3424,
        3425,
        1,
        0,
        0,
        0,
        3425,
        3426,
        1,
        0,
        0,
        0,
        3426,
        3427,
        5,
        381,
        0,
        0,
        3427,
        3429,
        1,
        0,
        0,
        0,
        3428,
        3420,
        1,
        0,
        0,
        0,
        3428,
        3429,
        1,
        0,
        0,
        0,
        3429,
        3431,
        1,
        0,
        0,
        0,
        3430,
        3432,
        3,
        770,
        385,
        0,
        3431,
        3430,
        1,
        0,
        0,
        0,
        3431,
        3432,
        1,
        0,
        0,
        0,
        3432,
        3445,
        1,
        0,
        0,
        0,
        3433,
        3435,
        5,
        175,
        0,
        0,
        3434,
        3436,
        3,
        770,
        385,
        0,
        3435,
        3434,
        1,
        0,
        0,
        0,
        3435,
        3436,
        1,
        0,
        0,
        0,
        3436,
        3445,
        1,
        0,
        0,
        0,
        3437,
        3439,
        5,
        81,
        0,
        0,
        3438,
        3440,
        5,
        172,
        0,
        0,
        3439,
        3438,
        1,
        0,
        0,
        0,
        3439,
        3440,
        1,
        0,
        0,
        0,
        3440,
        3442,
        1,
        0,
        0,
        0,
        3441,
        3443,
        3,
        770,
        385,
        0,
        3442,
        3441,
        1,
        0,
        0,
        0,
        3442,
        3443,
        1,
        0,
        0,
        0,
        3443,
        3445,
        1,
        0,
        0,
        0,
        3444,
        3399,
        1,
        0,
        0,
        0,
        3444,
        3403,
        1,
        0,
        0,
        0,
        3444,
        3407,
        1,
        0,
        0,
        0,
        3444,
        3411,
        1,
        0,
        0,
        0,
        3444,
        3415,
        1,
        0,
        0,
        0,
        3444,
        3419,
        1,
        0,
        0,
        0,
        3444,
        3433,
        1,
        0,
        0,
        0,
        3444,
        3437,
        1,
        0,
        0,
        0,
        3445,
        711,
        1,
        0,
        0,
        0,
        3446,
        3449,
        3,
        714,
        357,
        0,
        3447,
        3449,
        3,
        726,
        363,
        0,
        3448,
        3446,
        1,
        0,
        0,
        0,
        3448,
        3447,
        1,
        0,
        0,
        0,
        3449,
        713,
        1,
        0,
        0,
        0,
        3450,
        3456,
        3,
        716,
        358,
        0,
        3451,
        3456,
        3,
        718,
        359,
        0,
        3452,
        3456,
        3,
        720,
        360,
        0,
        3453,
        3456,
        3,
        722,
        361,
        0,
        3454,
        3456,
        3,
        724,
        362,
        0,
        3455,
        3450,
        1,
        0,
        0,
        0,
        3455,
        3451,
        1,
        0,
        0,
        0,
        3455,
        3452,
        1,
        0,
        0,
        0,
        3455,
        3453,
        1,
        0,
        0,
        0,
        3455,
        3454,
        1,
        0,
        0,
        0,
        3456,
        715,
        1,
        0,
        0,
        0,
        3457,
        3458,
        5,
        235,
        0,
        0,
        3458,
        3460,
        5,
        71,
        0,
        0,
        3459,
        3461,
        3,
        770,
        385,
        0,
        3460,
        3459,
        1,
        0,
        0,
        0,
        3460,
        3461,
        1,
        0,
        0,
        0,
        3461,
        3470,
        1,
        0,
        0,
        0,
        3462,
        3463,
        5,
        208,
        0,
        0,
        3463,
        3464,
        5,
        231,
        0,
        0,
        3464,
        3465,
        5,
        207,
        0,
        0,
        3465,
        3467,
        5,
        323,
        0,
        0,
        3466,
        3468,
        3,
        770,
        385,
        0,
        3467,
        3466,
        1,
        0,
        0,
        0,
        3467,
        3468,
        1,
        0,
        0,
        0,
        3468,
        3470,
        1,
        0,
        0,
        0,
        3469,
        3457,
        1,
        0,
        0,
        0,
        3469,
        3462,
        1,
        0,
        0,
        0,
        3470,
        717,
        1,
        0,
        0,
        0,
        3471,
        3472,
        5,
        135,
        0,
        0,
        3472,
        3474,
        5,
        71,
        0,
        0,
        3473,
        3475,
        3,
        770,
        385,
        0,
        3474,
        3473,
        1,
        0,
        0,
        0,
        3474,
        3475,
        1,
        0,
        0,
        0,
        3475,
        3486,
        1,
        0,
        0,
        0,
        3476,
        3480,
        5,
        208,
        0,
        0,
        3477,
        3478,
        5,
        321,
        0,
        0,
        3478,
        3479,
        5,
        207,
        0,
        0,
        3479,
        3481,
        5,
        323,
        0,
        0,
        3480,
        3477,
        1,
        0,
        0,
        0,
        3480,
        3481,
        1,
        0,
        0,
        0,
        3481,
        3483,
        1,
        0,
        0,
        0,
        3482,
        3484,
        3,
        770,
        385,
        0,
        3483,
        3482,
        1,
        0,
        0,
        0,
        3483,
        3484,
        1,
        0,
        0,
        0,
        3484,
        3486,
        1,
        0,
        0,
        0,
        3485,
        3471,
        1,
        0,
        0,
        0,
        3485,
        3476,
        1,
        0,
        0,
        0,
        3486,
        719,
        1,
        0,
        0,
        0,
        3487,
        3489,
        5,
        70,
        0,
        0,
        3488,
        3490,
        3,
        770,
        385,
        0,
        3489,
        3488,
        1,
        0,
        0,
        0,
        3489,
        3490,
        1,
        0,
        0,
        0,
        3490,
        721,
        1,
        0,
        0,
        0,
        3491,
        3492,
        5,
        235,
        0,
        0,
        3492,
        3494,
        5,
        207,
        0,
        0,
        3493,
        3495,
        3,
        770,
        385,
        0,
        3494,
        3493,
        1,
        0,
        0,
        0,
        3494,
        3495,
        1,
        0,
        0,
        0,
        3495,
        3504,
        1,
        0,
        0,
        0,
        3496,
        3497,
        5,
        207,
        0,
        0,
        3497,
        3498,
        5,
        231,
        0,
        0,
        3498,
        3499,
        5,
        207,
        0,
        0,
        3499,
        3501,
        5,
        323,
        0,
        0,
        3500,
        3502,
        3,
        770,
        385,
        0,
        3501,
        3500,
        1,
        0,
        0,
        0,
        3501,
        3502,
        1,
        0,
        0,
        0,
        3502,
        3504,
        1,
        0,
        0,
        0,
        3503,
        3491,
        1,
        0,
        0,
        0,
        3503,
        3496,
        1,
        0,
        0,
        0,
        3504,
        723,
        1,
        0,
        0,
        0,
        3505,
        3506,
        5,
        135,
        0,
        0,
        3506,
        3508,
        5,
        207,
        0,
        0,
        3507,
        3509,
        3,
        770,
        385,
        0,
        3508,
        3507,
        1,
        0,
        0,
        0,
        3508,
        3509,
        1,
        0,
        0,
        0,
        3509,
        3518,
        1,
        0,
        0,
        0,
        3510,
        3511,
        5,
        207,
        0,
        0,
        3511,
        3512,
        5,
        321,
        0,
        0,
        3512,
        3513,
        5,
        207,
        0,
        0,
        3513,
        3515,
        5,
        323,
        0,
        0,
        3514,
        3516,
        3,
        770,
        385,
        0,
        3515,
        3514,
        1,
        0,
        0,
        0,
        3515,
        3516,
        1,
        0,
        0,
        0,
        3516,
        3518,
        1,
        0,
        0,
        0,
        3517,
        3505,
        1,
        0,
        0,
        0,
        3517,
        3510,
        1,
        0,
        0,
        0,
        3518,
        725,
        1,
        0,
        0,
        0,
        3519,
        3520,
        5,
        83,
        0,
        0,
        3520,
        3521,
        5,
        370,
        0,
        0,
        3521,
        3522,
        3,
        728,
        364,
        0,
        3522,
        3524,
        5,
        381,
        0,
        0,
        3523,
        3525,
        3,
        770,
        385,
        0,
        3524,
        3523,
        1,
        0,
        0,
        0,
        3524,
        3525,
        1,
        0,
        0,
        0,
        3525,
        727,
        1,
        0,
        0,
        0,
        3526,
        3527,
        5,
        233,
        0,
        0,
        3527,
        3528,
        5,
        314,
        0,
        0,
        3528,
        3533,
        5,
        148,
        0,
        0,
        3529,
        3530,
        5,
        72,
        0,
        0,
        3530,
        3531,
        5,
        314,
        0,
        0,
        3531,
        3533,
        5,
        186,
        0,
        0,
        3532,
        3526,
        1,
        0,
        0,
        0,
        3532,
        3529,
        1,
        0,
        0,
        0,
        3533,
        729,
        1,
        0,
        0,
        0,
        3534,
        3539,
        3,
        738,
        369,
        0,
        3535,
        3539,
        3,
        744,
        372,
        0,
        3536,
        3539,
        3,
        746,
        373,
        0,
        3537,
        3539,
        3,
        752,
        376,
        0,
        3538,
        3534,
        1,
        0,
        0,
        0,
        3538,
        3535,
        1,
        0,
        0,
        0,
        3538,
        3536,
        1,
        0,
        0,
        0,
        3538,
        3537,
        1,
        0,
        0,
        0,
        3539,
        731,
        1,
        0,
        0,
        0,
        3540,
        3543,
        3,
        734,
        367,
        0,
        3541,
        3543,
        3,
        736,
        368,
        0,
        3542,
        3540,
        1,
        0,
        0,
        0,
        3542,
        3541,
        1,
        0,
        0,
        0,
        3543,
        733,
        1,
        0,
        0,
        0,
        3544,
        3545,
        5,
        154,
        0,
        0,
        3545,
        735,
        1,
        0,
        0,
        0,
        3546,
        3547,
        5,
        154,
        0,
        0,
        3547,
        3550,
        3,
        770,
        385,
        0,
        3548,
        3550,
        5,
        153,
        0,
        0,
        3549,
        3546,
        1,
        0,
        0,
        0,
        3549,
        3548,
        1,
        0,
        0,
        0,
        3550,
        737,
        1,
        0,
        0,
        0,
        3551,
        3554,
        3,
        742,
        371,
        0,
        3552,
        3554,
        3,
        740,
        370,
        0,
        3553,
        3551,
        1,
        0,
        0,
        0,
        3553,
        3552,
        1,
        0,
        0,
        0,
        3554,
        739,
        1,
        0,
        0,
        0,
        3555,
        3557,
        5,
        305,
        0,
        0,
        3556,
        3555,
        1,
        0,
        0,
        0,
        3556,
        3557,
        1,
        0,
        0,
        0,
        3557,
        3558,
        1,
        0,
        0,
        0,
        3558,
        3559,
        5,
        289,
        0,
        0,
        3559,
        3561,
        3,
        574,
        287,
        0,
        3560,
        3562,
        3,
        770,
        385,
        0,
        3561,
        3560,
        1,
        0,
        0,
        0,
        3561,
        3562,
        1,
        0,
        0,
        0,
        3562,
        741,
        1,
        0,
        0,
        0,
        3563,
        3565,
        5,
        25,
        0,
        0,
        3564,
        3566,
        5,
        305,
        0,
        0,
        3565,
        3564,
        1,
        0,
        0,
        0,
        3565,
        3566,
        1,
        0,
        0,
        0,
        3566,
        3567,
        1,
        0,
        0,
        0,
        3567,
        3569,
        5,
        289,
        0,
        0,
        3568,
        3570,
        3,
        770,
        385,
        0,
        3569,
        3568,
        1,
        0,
        0,
        0,
        3569,
        3570,
        1,
        0,
        0,
        0,
        3570,
        743,
        1,
        0,
        0,
        0,
        3571,
        3573,
        3,
        672,
        336,
        0,
        3572,
        3574,
        3,
        770,
        385,
        0,
        3573,
        3572,
        1,
        0,
        0,
        0,
        3573,
        3574,
        1,
        0,
        0,
        0,
        3574,
        745,
        1,
        0,
        0,
        0,
        3575,
        3578,
        3,
        750,
        375,
        0,
        3576,
        3578,
        3,
        748,
        374,
        0,
        3577,
        3575,
        1,
        0,
        0,
        0,
        3577,
        3576,
        1,
        0,
        0,
        0,
        3578,
        747,
        1,
        0,
        0,
        0,
        3579,
        3581,
        3,
        582,
        291,
        0,
        3580,
        3582,
        3,
        770,
        385,
        0,
        3581,
        3580,
        1,
        0,
        0,
        0,
        3581,
        3582,
        1,
        0,
        0,
        0,
        3582,
        749,
        1,
        0,
        0,
        0,
        3583,
        3585,
        5,
        25,
        0,
        0,
        3584,
        3583,
        1,
        0,
        0,
        0,
        3584,
        3585,
        1,
        0,
        0,
        0,
        3585,
        3586,
        1,
        0,
        0,
        0,
        3586,
        3588,
        3,
        1140,
        570,
        0,
        3587,
        3589,
        3,
        770,
        385,
        0,
        3588,
        3587,
        1,
        0,
        0,
        0,
        3588,
        3589,
        1,
        0,
        0,
        0,
        3589,
        751,
        1,
        0,
        0,
        0,
        3590,
        3593,
        3,
        756,
        378,
        0,
        3591,
        3593,
        3,
        754,
        377,
        0,
        3592,
        3590,
        1,
        0,
        0,
        0,
        3592,
        3591,
        1,
        0,
        0,
        0,
        3593,
        753,
        1,
        0,
        0,
        0,
        3594,
        3596,
        3,
        602,
        301,
        0,
        3595,
        3597,
        3,
        770,
        385,
        0,
        3596,
        3595,
        1,
        0,
        0,
        0,
        3596,
        3597,
        1,
        0,
        0,
        0,
        3597,
        755,
        1,
        0,
        0,
        0,
        3598,
        3600,
        5,
        25,
        0,
        0,
        3599,
        3598,
        1,
        0,
        0,
        0,
        3599,
        3600,
        1,
        0,
        0,
        0,
        3600,
        3601,
        1,
        0,
        0,
        0,
        3601,
        3603,
        3,
        1144,
        572,
        0,
        3602,
        3604,
        3,
        770,
        385,
        0,
        3603,
        3602,
        1,
        0,
        0,
        0,
        3603,
        3604,
        1,
        0,
        0,
        0,
        3604,
        757,
        1,
        0,
        0,
        0,
        3605,
        3607,
        5,
        166,
        0,
        0,
        3606,
        3608,
        3,
        770,
        385,
        0,
        3607,
        3606,
        1,
        0,
        0,
        0,
        3607,
        3608,
        1,
        0,
        0,
        0,
        3608,
        759,
        1,
        0,
        0,
        0,
        3609,
        3610,
        3,
        762,
        381,
        0,
        3610,
        761,
        1,
        0,
        0,
        0,
        3611,
        3612,
        7,
        19,
        0,
        0,
        3612,
        763,
        1,
        0,
        0,
        0,
        3613,
        3615,
        5,
        25,
        0,
        0,
        3614,
        3613,
        1,
        0,
        0,
        0,
        3614,
        3615,
        1,
        0,
        0,
        0,
        3615,
        3616,
        1,
        0,
        0,
        0,
        3616,
        3618,
        5,
        176,
        0,
        0,
        3617,
        3619,
        3,
        770,
        385,
        0,
        3618,
        3617,
        1,
        0,
        0,
        0,
        3618,
        3619,
        1,
        0,
        0,
        0,
        3619,
        3628,
        1,
        0,
        0,
        0,
        3620,
        3622,
        5,
        176,
        0,
        0,
        3621,
        3620,
        1,
        0,
        0,
        0,
        3621,
        3622,
        1,
        0,
        0,
        0,
        3622,
        3623,
        1,
        0,
        0,
        0,
        3623,
        3625,
        3,
        766,
        383,
        0,
        3624,
        3626,
        3,
        770,
        385,
        0,
        3625,
        3624,
        1,
        0,
        0,
        0,
        3625,
        3626,
        1,
        0,
        0,
        0,
        3626,
        3628,
        1,
        0,
        0,
        0,
        3627,
        3614,
        1,
        0,
        0,
        0,
        3627,
        3621,
        1,
        0,
        0,
        0,
        3628,
        765,
        1,
        0,
        0,
        0,
        3629,
        3631,
        5,
        368,
        0,
        0,
        3630,
        3632,
        3,
        768,
        384,
        0,
        3631,
        3630,
        1,
        0,
        0,
        0,
        3631,
        3632,
        1,
        0,
        0,
        0,
        3632,
        3633,
        1,
        0,
        0,
        0,
        3633,
        3634,
        5,
        379,
        0,
        0,
        3634,
        767,
        1,
        0,
        0,
        0,
        3635,
        3640,
        3,
        772,
        386,
        0,
        3636,
        3637,
        5,
        360,
        0,
        0,
        3637,
        3639,
        3,
        772,
        386,
        0,
        3638,
        3636,
        1,
        0,
        0,
        0,
        3639,
        3642,
        1,
        0,
        0,
        0,
        3640,
        3638,
        1,
        0,
        0,
        0,
        3640,
        3641,
        1,
        0,
        0,
        0,
        3641,
        769,
        1,
        0,
        0,
        0,
        3642,
        3640,
        1,
        0,
        0,
        0,
        3643,
        3644,
        5,
        152,
        0,
        0,
        3644,
        3645,
        5,
        154,
        0,
        0,
        3645,
        771,
        1,
        0,
        0,
        0,
        3646,
        3648,
        3,
        1084,
        542,
        0,
        3647,
        3649,
        3,
        676,
        338,
        0,
        3648,
        3647,
        1,
        0,
        0,
        0,
        3648,
        3649,
        1,
        0,
        0,
        0,
        3649,
        3650,
        1,
        0,
        0,
        0,
        3650,
        3651,
        3,
        674,
        337,
        0,
        3651,
        773,
        1,
        0,
        0,
        0,
        3652,
        3653,
        3,
        822,
        411,
        0,
        3653,
        775,
        1,
        0,
        0,
        0,
        3654,
        3664,
        3,
        780,
        390,
        0,
        3655,
        3664,
        3,
        782,
        391,
        0,
        3656,
        3664,
        3,
        786,
        393,
        0,
        3657,
        3664,
        3,
        792,
        396,
        0,
        3658,
        3664,
        3,
        796,
        398,
        0,
        3659,
        3664,
        3,
        802,
        401,
        0,
        3660,
        3664,
        3,
        812,
        406,
        0,
        3661,
        3664,
        3,
        814,
        407,
        0,
        3662,
        3664,
        3,
        816,
        408,
        0,
        3663,
        3654,
        1,
        0,
        0,
        0,
        3663,
        3655,
        1,
        0,
        0,
        0,
        3663,
        3656,
        1,
        0,
        0,
        0,
        3663,
        3657,
        1,
        0,
        0,
        0,
        3663,
        3658,
        1,
        0,
        0,
        0,
        3663,
        3659,
        1,
        0,
        0,
        0,
        3663,
        3660,
        1,
        0,
        0,
        0,
        3663,
        3661,
        1,
        0,
        0,
        0,
        3663,
        3662,
        1,
        0,
        0,
        0,
        3664,
        777,
        1,
        0,
        0,
        0,
        3665,
        3666,
        7,
        20,
        0,
        0,
        3666,
        779,
        1,
        0,
        0,
        0,
        3667,
        3685,
        5,
        89,
        0,
        0,
        3668,
        3669,
        5,
        368,
        0,
        0,
        3669,
        3670,
        3,
        302,
        151,
        0,
        3670,
        3671,
        5,
        379,
        0,
        0,
        3671,
        3686,
        1,
        0,
        0,
        0,
        3672,
        3673,
        5,
        370,
        0,
        0,
        3673,
        3674,
        3,
        302,
        151,
        0,
        3674,
        3675,
        5,
        381,
        0,
        0,
        3675,
        3686,
        1,
        0,
        0,
        0,
        3676,
        3677,
        5,
        368,
        0,
        0,
        3677,
        3678,
        3,
        220,
        110,
        0,
        3678,
        3679,
        5,
        379,
        0,
        0,
        3679,
        3686,
        1,
        0,
        0,
        0,
        3680,
        3681,
        5,
        370,
        0,
        0,
        3681,
        3682,
        3,
        220,
        110,
        0,
        3682,
        3683,
        5,
        381,
        0,
        0,
        3683,
        3686,
        1,
        0,
        0,
        0,
        3684,
        3686,
        3,
        56,
        28,
        0,
        3685,
        3668,
        1,
        0,
        0,
        0,
        3685,
        3672,
        1,
        0,
        0,
        0,
        3685,
        3676,
        1,
        0,
        0,
        0,
        3685,
        3680,
        1,
        0,
        0,
        0,
        3685,
        3684,
        1,
        0,
        0,
        0,
        3686,
        781,
        1,
        0,
        0,
        0,
        3687,
        3688,
        3,
        842,
        421,
        0,
        3688,
        3689,
        3,
        784,
        392,
        0,
        3689,
        783,
        1,
        0,
        0,
        0,
        3690,
        3692,
        5,
        127,
        0,
        0,
        3691,
        3693,
        5,
        152,
        0,
        0,
        3692,
        3691,
        1,
        0,
        0,
        0,
        3692,
        3693,
        1,
        0,
        0,
        0,
        3693,
        3694,
        1,
        0,
        0,
        0,
        3694,
        3695,
        5,
        154,
        0,
        0,
        3695,
        785,
        1,
        0,
        0,
        0,
        3696,
        3697,
        3,
        842,
        421,
        0,
        3697,
        3698,
        3,
        788,
        394,
        0,
        3698,
        787,
        1,
        0,
        0,
        0,
        3699,
        3701,
        5,
        127,
        0,
        0,
        3700,
        3702,
        5,
        152,
        0,
        0,
        3701,
        3700,
        1,
        0,
        0,
        0,
        3701,
        3702,
        1,
        0,
        0,
        0,
        3702,
        3703,
        1,
        0,
        0,
        0,
        3703,
        3704,
        3,
        676,
        338,
        0,
        3704,
        3705,
        3,
        674,
        337,
        0,
        3705,
        789,
        1,
        0,
        0,
        0,
        3706,
        3708,
        5,
        127,
        0,
        0,
        3707,
        3709,
        5,
        152,
        0,
        0,
        3708,
        3707,
        1,
        0,
        0,
        0,
        3708,
        3709,
        1,
        0,
        0,
        0,
        3709,
        3711,
        1,
        0,
        0,
        0,
        3710,
        3712,
        3,
        1016,
        508,
        0,
        3711,
        3710,
        1,
        0,
        0,
        0,
        3711,
        3712,
        1,
        0,
        0,
        0,
        3712,
        3713,
        1,
        0,
        0,
        0,
        3713,
        3714,
        5,
        302,
        0,
        0,
        3714,
        791,
        1,
        0,
        0,
        0,
        3715,
        3716,
        3,
        432,
        216,
        0,
        3716,
        3717,
        3,
        794,
        397,
        0,
        3717,
        793,
        1,
        0,
        0,
        0,
        3718,
        3720,
        5,
        127,
        0,
        0,
        3719,
        3721,
        5,
        152,
        0,
        0,
        3720,
        3719,
        1,
        0,
        0,
        0,
        3720,
        3721,
        1,
        0,
        0,
        0,
        3721,
        3722,
        1,
        0,
        0,
        0,
        3722,
        3723,
        5,
        283,
        0,
        0,
        3723,
        795,
        1,
        0,
        0,
        0,
        3724,
        3725,
        3,
        432,
        216,
        0,
        3725,
        3726,
        3,
        798,
        399,
        0,
        3726,
        797,
        1,
        0,
        0,
        0,
        3727,
        3728,
        3,
        800,
        400,
        0,
        3728,
        3729,
        3,
        428,
        214,
        0,
        3729,
        799,
        1,
        0,
        0,
        0,
        3730,
        3732,
        5,
        127,
        0,
        0,
        3731,
        3733,
        5,
        152,
        0,
        0,
        3732,
        3731,
        1,
        0,
        0,
        0,
        3732,
        3733,
        1,
        0,
        0,
        0,
        3733,
        3734,
        1,
        0,
        0,
        0,
        3734,
        3737,
        5,
        293,
        0,
        0,
        3735,
        3737,
        5,
        359,
        0,
        0,
        3736,
        3730,
        1,
        0,
        0,
        0,
        3736,
        3735,
        1,
        0,
        0,
        0,
        3737,
        801,
        1,
        0,
        0,
        0,
        3738,
        3739,
        3,
        804,
        402,
        0,
        3739,
        3740,
        3,
        806,
        403,
        0,
        3740,
        3745,
        1,
        0,
        0,
        0,
        3741,
        3742,
        3,
        804,
        402,
        0,
        3742,
        3743,
        3,
        808,
        404,
        0,
        3743,
        3745,
        1,
        0,
        0,
        0,
        3744,
        3738,
        1,
        0,
        0,
        0,
        3744,
        3741,
        1,
        0,
        0,
        0,
        3745,
        803,
        1,
        0,
        0,
        0,
        3746,
        3747,
        3,
        432,
        216,
        0,
        3747,
        805,
        1,
        0,
        0,
        0,
        3748,
        3750,
        5,
        127,
        0,
        0,
        3749,
        3751,
        5,
        152,
        0,
        0,
        3750,
        3749,
        1,
        0,
        0,
        0,
        3750,
        3751,
        1,
        0,
        0,
        0,
        3751,
        3752,
        1,
        0,
        0,
        0,
        3752,
        3753,
        5,
        312,
        0,
        0,
        3753,
        3754,
        5,
        158,
        0,
        0,
        3754,
        3755,
        3,
        810,
        405,
        0,
        3755,
        807,
        1,
        0,
        0,
        0,
        3756,
        3758,
        5,
        127,
        0,
        0,
        3757,
        3759,
        5,
        152,
        0,
        0,
        3758,
        3757,
        1,
        0,
        0,
        0,
        3758,
        3759,
        1,
        0,
        0,
        0,
        3759,
        3760,
        1,
        0,
        0,
        0,
        3760,
        3761,
        5,
        281,
        0,
        0,
        3761,
        3762,
        5,
        158,
        0,
        0,
        3762,
        3763,
        3,
        810,
        405,
        0,
        3763,
        809,
        1,
        0,
        0,
        0,
        3764,
        3765,
        3,
        432,
        216,
        0,
        3765,
        811,
        1,
        0,
        0,
        0,
        3766,
        3767,
        5,
        23,
        0,
        0,
        3767,
        3768,
        5,
        370,
        0,
        0,
        3768,
        3769,
        3,
        432,
        216,
        0,
        3769,
        3770,
        5,
        360,
        0,
        0,
        3770,
        3775,
        3,
        432,
        216,
        0,
        3771,
        3772,
        5,
        360,
        0,
        0,
        3772,
        3774,
        3,
        432,
        216,
        0,
        3773,
        3771,
        1,
        0,
        0,
        0,
        3774,
        3777,
        1,
        0,
        0,
        0,
        3775,
        3773,
        1,
        0,
        0,
        0,
        3775,
        3776,
        1,
        0,
        0,
        0,
        3776,
        3778,
        1,
        0,
        0,
        0,
        3777,
        3775,
        1,
        0,
        0,
        0,
        3778,
        3779,
        5,
        381,
        0,
        0,
        3779,
        813,
        1,
        0,
        0,
        0,
        3780,
        3781,
        5,
        184,
        0,
        0,
        3781,
        3782,
        5,
        370,
        0,
        0,
        3782,
        3783,
        3,
        432,
        216,
        0,
        3783,
        3784,
        5,
        360,
        0,
        0,
        3784,
        3789,
        3,
        432,
        216,
        0,
        3785,
        3786,
        5,
        360,
        0,
        0,
        3786,
        3788,
        3,
        432,
        216,
        0,
        3787,
        3785,
        1,
        0,
        0,
        0,
        3788,
        3791,
        1,
        0,
        0,
        0,
        3789,
        3787,
        1,
        0,
        0,
        0,
        3789,
        3790,
        1,
        0,
        0,
        0,
        3790,
        3792,
        1,
        0,
        0,
        0,
        3791,
        3789,
        1,
        0,
        0,
        0,
        3792,
        3793,
        5,
        381,
        0,
        0,
        3793,
        815,
        1,
        0,
        0,
        0,
        3794,
        3795,
        5,
        173,
        0,
        0,
        3795,
        3796,
        5,
        370,
        0,
        0,
        3796,
        3797,
        3,
        432,
        216,
        0,
        3797,
        3798,
        5,
        360,
        0,
        0,
        3798,
        3799,
        3,
        1082,
        541,
        0,
        3799,
        3800,
        5,
        381,
        0,
        0,
        3800,
        817,
        1,
        0,
        0,
        0,
        3801,
        3802,
        6,
        409,
        -1,
        0,
        3802,
        3803,
        7,
        21,
        0,
        0,
        3803,
        3820,
        3,
        818,
        409,
        15,
        3804,
        3820,
        3,
        776,
        388,
        0,
        3805,
        3806,
        5,
        152,
        0,
        0,
        3806,
        3820,
        3,
        818,
        409,
        8,
        3807,
        3809,
        5,
        305,
        0,
        0,
        3808,
        3807,
        1,
        0,
        0,
        0,
        3808,
        3809,
        1,
        0,
        0,
        0,
        3809,
        3810,
        1,
        0,
        0,
        0,
        3810,
        3811,
        5,
        289,
        0,
        0,
        3811,
        3820,
        3,
        88,
        44,
        0,
        3812,
        3814,
        5,
        278,
        0,
        0,
        3813,
        3812,
        1,
        0,
        0,
        0,
        3813,
        3814,
        1,
        0,
        0,
        0,
        3814,
        3815,
        1,
        0,
        0,
        0,
        3815,
        3816,
        5,
        313,
        0,
        0,
        3816,
        3820,
        3,
        92,
        46,
        0,
        3817,
        3820,
        3,
        820,
        410,
        0,
        3818,
        3820,
        3,
        842,
        421,
        0,
        3819,
        3801,
        1,
        0,
        0,
        0,
        3819,
        3804,
        1,
        0,
        0,
        0,
        3819,
        3805,
        1,
        0,
        0,
        0,
        3819,
        3808,
        1,
        0,
        0,
        0,
        3819,
        3813,
        1,
        0,
        0,
        0,
        3819,
        3817,
        1,
        0,
        0,
        0,
        3819,
        3818,
        1,
        0,
        0,
        0,
        3820,
        3850,
        1,
        0,
        0,
        0,
        3821,
        3822,
        10,
        14,
        0,
        0,
        3822,
        3823,
        7,
        22,
        0,
        0,
        3823,
        3849,
        3,
        818,
        409,
        15,
        3824,
        3825,
        10,
        13,
        0,
        0,
        3825,
        3826,
        7,
        21,
        0,
        0,
        3826,
        3849,
        3,
        818,
        409,
        14,
        3827,
        3828,
        10,
        12,
        0,
        0,
        3828,
        3829,
        5,
        330,
        0,
        0,
        3829,
        3849,
        3,
        818,
        409,
        13,
        3830,
        3831,
        10,
        11,
        0,
        0,
        3831,
        3832,
        3,
        778,
        389,
        0,
        3832,
        3833,
        3,
        818,
        409,
        12,
        3833,
        3849,
        1,
        0,
        0,
        0,
        3834,
        3835,
        10,
        6,
        0,
        0,
        3835,
        3836,
        5,
        24,
        0,
        0,
        3836,
        3849,
        3,
        818,
        409,
        7,
        3837,
        3838,
        10,
        5,
        0,
        0,
        3838,
        3839,
        7,
        23,
        0,
        0,
        3839,
        3849,
        3,
        818,
        409,
        6,
        3840,
        3841,
        10,
        9,
        0,
        0,
        3841,
        3849,
        3,
        790,
        395,
        0,
        3842,
        3843,
        10,
        7,
        0,
        0,
        3843,
        3845,
        5,
        127,
        0,
        0,
        3844,
        3846,
        5,
        152,
        0,
        0,
        3845,
        3844,
        1,
        0,
        0,
        0,
        3845,
        3846,
        1,
        0,
        0,
        0,
        3846,
        3847,
        1,
        0,
        0,
        0,
        3847,
        3849,
        3,
        950,
        475,
        0,
        3848,
        3821,
        1,
        0,
        0,
        0,
        3848,
        3824,
        1,
        0,
        0,
        0,
        3848,
        3827,
        1,
        0,
        0,
        0,
        3848,
        3830,
        1,
        0,
        0,
        0,
        3848,
        3834,
        1,
        0,
        0,
        0,
        3848,
        3837,
        1,
        0,
        0,
        0,
        3848,
        3840,
        1,
        0,
        0,
        0,
        3848,
        3842,
        1,
        0,
        0,
        0,
        3849,
        3852,
        1,
        0,
        0,
        0,
        3850,
        3848,
        1,
        0,
        0,
        0,
        3850,
        3851,
        1,
        0,
        0,
        0,
        3851,
        819,
        1,
        0,
        0,
        0,
        3852,
        3850,
        1,
        0,
        0,
        0,
        3853,
        3860,
        3,
        954,
        477,
        0,
        3854,
        3860,
        3,
        1042,
        521,
        0,
        3855,
        3860,
        3,
        1022,
        511,
        0,
        3856,
        3860,
        3,
        1050,
        525,
        0,
        3857,
        3860,
        3,
        824,
        412,
        0,
        3858,
        3860,
        3,
        928,
        464,
        0,
        3859,
        3853,
        1,
        0,
        0,
        0,
        3859,
        3854,
        1,
        0,
        0,
        0,
        3859,
        3855,
        1,
        0,
        0,
        0,
        3859,
        3856,
        1,
        0,
        0,
        0,
        3859,
        3857,
        1,
        0,
        0,
        0,
        3859,
        3858,
        1,
        0,
        0,
        0,
        3860,
        821,
        1,
        0,
        0,
        0,
        3861,
        3862,
        3,
        818,
        409,
        0,
        3862,
        823,
        1,
        0,
        0,
        0,
        3863,
        3869,
        3,
        826,
        413,
        0,
        3864,
        3869,
        3,
        828,
        414,
        0,
        3865,
        3869,
        3,
        830,
        415,
        0,
        3866,
        3869,
        3,
        832,
        416,
        0,
        3867,
        3869,
        3,
        834,
        417,
        0,
        3868,
        3863,
        1,
        0,
        0,
        0,
        3868,
        3864,
        1,
        0,
        0,
        0,
        3868,
        3865,
        1,
        0,
        0,
        0,
        3868,
        3866,
        1,
        0,
        0,
        0,
        3868,
        3867,
        1,
        0,
        0,
        0,
        3869,
        825,
        1,
        0,
        0,
        0,
        3870,
        3871,
        7,
        24,
        0,
        0,
        3871,
        3872,
        5,
        370,
        0,
        0,
        3872,
        3873,
        3,
        818,
        409,
        0,
        3873,
        3874,
        5,
        360,
        0,
        0,
        3874,
        3875,
        3,
        1018,
        509,
        0,
        3875,
        3876,
        5,
        381,
        0,
        0,
        3876,
        827,
        1,
        0,
        0,
        0,
        3877,
        3878,
        5,
        210,
        0,
        0,
        3878,
        3879,
        5,
        370,
        0,
        0,
        3879,
        3880,
        3,
        1008,
        504,
        0,
        3880,
        3881,
        5,
        381,
        0,
        0,
        3881,
        829,
        1,
        0,
        0,
        0,
        3882,
        3883,
        7,
        25,
        0,
        0,
        3883,
        3884,
        5,
        370,
        0,
        0,
        3884,
        3885,
        3,
        818,
        409,
        0,
        3885,
        3886,
        5,
        381,
        0,
        0,
        3886,
        831,
        1,
        0,
        0,
        0,
        3887,
        3888,
        7,
        26,
        0,
        0,
        3888,
        3889,
        5,
        370,
        0,
        0,
        3889,
        3892,
        3,
        818,
        409,
        0,
        3890,
        3891,
        5,
        360,
        0,
        0,
        3891,
        3893,
        3,
        818,
        409,
        0,
        3892,
        3890,
        1,
        0,
        0,
        0,
        3892,
        3893,
        1,
        0,
        0,
        0,
        3893,
        3894,
        1,
        0,
        0,
        0,
        3894,
        3895,
        5,
        381,
        0,
        0,
        3895,
        833,
        1,
        0,
        0,
        0,
        3896,
        3897,
        5,
        151,
        0,
        0,
        3897,
        3898,
        5,
        370,
        0,
        0,
        3898,
        3901,
        3,
        818,
        409,
        0,
        3899,
        3900,
        5,
        360,
        0,
        0,
        3900,
        3902,
        3,
        1016,
        508,
        0,
        3901,
        3899,
        1,
        0,
        0,
        0,
        3901,
        3902,
        1,
        0,
        0,
        0,
        3902,
        3903,
        1,
        0,
        0,
        0,
        3903,
        3904,
        5,
        381,
        0,
        0,
        3904,
        835,
        1,
        0,
        0,
        0,
        3905,
        3906,
        3,
        842,
        421,
        0,
        3906,
        837,
        1,
        0,
        0,
        0,
        3907,
        3908,
        3,
        842,
        421,
        0,
        3908,
        839,
        1,
        0,
        0,
        0,
        3909,
        3910,
        3,
        818,
        409,
        0,
        3910,
        841,
        1,
        0,
        0,
        0,
        3911,
        3912,
        6,
        421,
        -1,
        0,
        3912,
        3923,
        3,
        844,
        422,
        0,
        3913,
        3923,
        3,
        894,
        447,
        0,
        3914,
        3923,
        3,
        850,
        425,
        0,
        3915,
        3923,
        3,
        916,
        458,
        0,
        3916,
        3923,
        3,
        860,
        430,
        0,
        3917,
        3923,
        3,
        862,
        431,
        0,
        3918,
        3923,
        3,
        888,
        444,
        0,
        3919,
        3923,
        3,
        910,
        455,
        0,
        3920,
        3923,
        3,
        858,
        429,
        0,
        3921,
        3923,
        3,
        912,
        456,
        0,
        3922,
        3911,
        1,
        0,
        0,
        0,
        3922,
        3913,
        1,
        0,
        0,
        0,
        3922,
        3914,
        1,
        0,
        0,
        0,
        3922,
        3915,
        1,
        0,
        0,
        0,
        3922,
        3916,
        1,
        0,
        0,
        0,
        3922,
        3917,
        1,
        0,
        0,
        0,
        3922,
        3918,
        1,
        0,
        0,
        0,
        3922,
        3919,
        1,
        0,
        0,
        0,
        3922,
        3920,
        1,
        0,
        0,
        0,
        3922,
        3921,
        1,
        0,
        0,
        0,
        3923,
        3929,
        1,
        0,
        0,
        0,
        3924,
        3925,
        10,
        7,
        0,
        0,
        3925,
        3926,
        5,
        374,
        0,
        0,
        3926,
        3928,
        3,
        1082,
        541,
        0,
        3927,
        3924,
        1,
        0,
        0,
        0,
        3928,
        3931,
        1,
        0,
        0,
        0,
        3929,
        3927,
        1,
        0,
        0,
        0,
        3929,
        3930,
        1,
        0,
        0,
        0,
        3930,
        843,
        1,
        0,
        0,
        0,
        3931,
        3929,
        1,
        0,
        0,
        0,
        3932,
        3933,
        5,
        370,
        0,
        0,
        3933,
        3934,
        3,
        818,
        409,
        0,
        3934,
        3935,
        5,
        381,
        0,
        0,
        3935,
        845,
        1,
        0,
        0,
        0,
        3936,
        3939,
        3,
        848,
        424,
        0,
        3937,
        3939,
        3,
        912,
        456,
        0,
        3938,
        3936,
        1,
        0,
        0,
        0,
        3938,
        3937,
        1,
        0,
        0,
        0,
        3939,
        847,
        1,
        0,
        0,
        0,
        3940,
        3953,
        3,
        894,
        447,
        0,
        3941,
        3953,
        3,
        850,
        425,
        0,
        3942,
        3953,
        3,
        916,
        458,
        0,
        3943,
        3944,
        3,
        842,
        421,
        0,
        3944,
        3945,
        5,
        374,
        0,
        0,
        3945,
        3946,
        3,
        1082,
        541,
        0,
        3946,
        3953,
        1,
        0,
        0,
        0,
        3947,
        3953,
        3,
        860,
        430,
        0,
        3948,
        3953,
        3,
        862,
        431,
        0,
        3949,
        3953,
        3,
        888,
        444,
        0,
        3950,
        3953,
        3,
        910,
        455,
        0,
        3951,
        3953,
        3,
        858,
        429,
        0,
        3952,
        3940,
        1,
        0,
        0,
        0,
        3952,
        3941,
        1,
        0,
        0,
        0,
        3952,
        3942,
        1,
        0,
        0,
        0,
        3952,
        3943,
        1,
        0,
        0,
        0,
        3952,
        3947,
        1,
        0,
        0,
        0,
        3952,
        3948,
        1,
        0,
        0,
        0,
        3952,
        3949,
        1,
        0,
        0,
        0,
        3952,
        3950,
        1,
        0,
        0,
        0,
        3952,
        3951,
        1,
        0,
        0,
        0,
        3953,
        849,
        1,
        0,
        0,
        0,
        3954,
        3957,
        3,
        1094,
        547,
        0,
        3955,
        3957,
        3,
        854,
        427,
        0,
        3956,
        3954,
        1,
        0,
        0,
        0,
        3956,
        3955,
        1,
        0,
        0,
        0,
        3957,
        851,
        1,
        0,
        0,
        0,
        3958,
        3961,
        3,
        1124,
        562,
        0,
        3959,
        3961,
        3,
        856,
        428,
        0,
        3960,
        3958,
        1,
        0,
        0,
        0,
        3960,
        3959,
        1,
        0,
        0,
        0,
        3961,
        853,
        1,
        0,
        0,
        0,
        3962,
        3965,
        3,
        856,
        428,
        0,
        3963,
        3965,
        5,
        189,
        0,
        0,
        3964,
        3962,
        1,
        0,
        0,
        0,
        3964,
        3963,
        1,
        0,
        0,
        0,
        3965,
        855,
        1,
        0,
        0,
        0,
        3966,
        3967,
        5,
        326,
        0,
        0,
        3967,
        857,
        1,
        0,
        0,
        0,
        3968,
        3969,
        5,
        130,
        0,
        0,
        3969,
        3970,
        3,
        228,
        114,
        0,
        3970,
        3971,
        5,
        109,
        0,
        0,
        3971,
        3972,
        3,
        818,
        409,
        0,
        3972,
        3973,
        5,
        87,
        0,
        0,
        3973,
        859,
        1,
        0,
        0,
        0,
        3974,
        3975,
        5,
        225,
        0,
        0,
        3975,
        3976,
        3,
        56,
        28,
        0,
        3976,
        861,
        1,
        0,
        0,
        0,
        3977,
        3980,
        3,
        864,
        432,
        0,
        3978,
        3980,
        3,
        866,
        433,
        0,
        3979,
        3977,
        1,
        0,
        0,
        0,
        3979,
        3978,
        1,
        0,
        0,
        0,
        3980,
        863,
        1,
        0,
        0,
        0,
        3981,
        3982,
        5,
        156,
        0,
        0,
        3982,
        3983,
        5,
        370,
        0,
        0,
        3983,
        3984,
        3,
        818,
        409,
        0,
        3984,
        3985,
        5,
        360,
        0,
        0,
        3985,
        3986,
        3,
        818,
        409,
        0,
        3986,
        3987,
        5,
        381,
        0,
        0,
        3987,
        4000,
        1,
        0,
        0,
        0,
        3988,
        3989,
        5,
        55,
        0,
        0,
        3989,
        3990,
        5,
        370,
        0,
        0,
        3990,
        3993,
        3,
        818,
        409,
        0,
        3991,
        3992,
        5,
        360,
        0,
        0,
        3992,
        3994,
        3,
        818,
        409,
        0,
        3993,
        3991,
        1,
        0,
        0,
        0,
        3994,
        3995,
        1,
        0,
        0,
        0,
        3995,
        3993,
        1,
        0,
        0,
        0,
        3995,
        3996,
        1,
        0,
        0,
        0,
        3996,
        3997,
        1,
        0,
        0,
        0,
        3997,
        3998,
        5,
        381,
        0,
        0,
        3998,
        4000,
        1,
        0,
        0,
        0,
        3999,
        3981,
        1,
        0,
        0,
        0,
        3999,
        3988,
        1,
        0,
        0,
        0,
        4000,
        865,
        1,
        0,
        0,
        0,
        4001,
        4004,
        3,
        868,
        434,
        0,
        4002,
        4004,
        3,
        870,
        435,
        0,
        4003,
        4001,
        1,
        0,
        0,
        0,
        4003,
        4002,
        1,
        0,
        0,
        0,
        4004,
        867,
        1,
        0,
        0,
        0,
        4005,
        4006,
        5,
        46,
        0,
        0,
        4006,
        4008,
        3,
        878,
        439,
        0,
        4007,
        4009,
        3,
        872,
        436,
        0,
        4008,
        4007,
        1,
        0,
        0,
        0,
        4009,
        4010,
        1,
        0,
        0,
        0,
        4010,
        4008,
        1,
        0,
        0,
        0,
        4010,
        4011,
        1,
        0,
        0,
        0,
        4011,
        4013,
        1,
        0,
        0,
        0,
        4012,
        4014,
        3,
        876,
        438,
        0,
        4013,
        4012,
        1,
        0,
        0,
        0,
        4013,
        4014,
        1,
        0,
        0,
        0,
        4014,
        4015,
        1,
        0,
        0,
        0,
        4015,
        4016,
        5,
        87,
        0,
        0,
        4016,
        869,
        1,
        0,
        0,
        0,
        4017,
        4019,
        5,
        46,
        0,
        0,
        4018,
        4020,
        3,
        874,
        437,
        0,
        4019,
        4018,
        1,
        0,
        0,
        0,
        4020,
        4021,
        1,
        0,
        0,
        0,
        4021,
        4019,
        1,
        0,
        0,
        0,
        4021,
        4022,
        1,
        0,
        0,
        0,
        4022,
        4024,
        1,
        0,
        0,
        0,
        4023,
        4025,
        3,
        876,
        438,
        0,
        4024,
        4023,
        1,
        0,
        0,
        0,
        4024,
        4025,
        1,
        0,
        0,
        0,
        4025,
        4026,
        1,
        0,
        0,
        0,
        4026,
        4027,
        5,
        87,
        0,
        0,
        4027,
        871,
        1,
        0,
        0,
        0,
        4028,
        4029,
        5,
        229,
        0,
        0,
        4029,
        4030,
        3,
        880,
        440,
        0,
        4030,
        4031,
        5,
        206,
        0,
        0,
        4031,
        4032,
        3,
        884,
        442,
        0,
        4032,
        873,
        1,
        0,
        0,
        0,
        4033,
        4034,
        5,
        229,
        0,
        0,
        4034,
        4035,
        3,
        774,
        387,
        0,
        4035,
        4036,
        5,
        206,
        0,
        0,
        4036,
        4037,
        3,
        884,
        442,
        0,
        4037,
        875,
        1,
        0,
        0,
        0,
        4038,
        4039,
        5,
        86,
        0,
        0,
        4039,
        4040,
        3,
        884,
        442,
        0,
        4040,
        877,
        1,
        0,
        0,
        0,
        4041,
        4044,
        3,
        846,
        423,
        0,
        4042,
        4044,
        3,
        432,
        216,
        0,
        4043,
        4041,
        1,
        0,
        0,
        0,
        4043,
        4042,
        1,
        0,
        0,
        0,
        4044,
        879,
        1,
        0,
        0,
        0,
        4045,
        4050,
        3,
        882,
        441,
        0,
        4046,
        4047,
        5,
        360,
        0,
        0,
        4047,
        4049,
        3,
        882,
        441,
        0,
        4048,
        4046,
        1,
        0,
        0,
        0,
        4049,
        4052,
        1,
        0,
        0,
        0,
        4050,
        4048,
        1,
        0,
        0,
        0,
        4050,
        4051,
        1,
        0,
        0,
        0,
        4051,
        881,
        1,
        0,
        0,
        0,
        4052,
        4050,
        1,
        0,
        0,
        0,
        4053,
        4065,
        3,
        846,
        423,
        0,
        4054,
        4055,
        3,
        778,
        389,
        0,
        4055,
        4056,
        3,
        818,
        409,
        0,
        4056,
        4065,
        1,
        0,
        0,
        0,
        4057,
        4065,
        3,
        784,
        392,
        0,
        4058,
        4065,
        3,
        788,
        394,
        0,
        4059,
        4065,
        3,
        790,
        395,
        0,
        4060,
        4065,
        3,
        794,
        397,
        0,
        4061,
        4065,
        3,
        798,
        399,
        0,
        4062,
        4065,
        3,
        806,
        403,
        0,
        4063,
        4065,
        3,
        808,
        404,
        0,
        4064,
        4053,
        1,
        0,
        0,
        0,
        4064,
        4054,
        1,
        0,
        0,
        0,
        4064,
        4057,
        1,
        0,
        0,
        0,
        4064,
        4058,
        1,
        0,
        0,
        0,
        4064,
        4059,
        1,
        0,
        0,
        0,
        4064,
        4060,
        1,
        0,
        0,
        0,
        4064,
        4061,
        1,
        0,
        0,
        0,
        4064,
        4062,
        1,
        0,
        0,
        0,
        4064,
        4063,
        1,
        0,
        0,
        0,
        4065,
        883,
        1,
        0,
        0,
        0,
        4066,
        4069,
        3,
        886,
        443,
        0,
        4067,
        4069,
        3,
        1128,
        564,
        0,
        4068,
        4066,
        1,
        0,
        0,
        0,
        4068,
        4067,
        1,
        0,
        0,
        0,
        4069,
        885,
        1,
        0,
        0,
        0,
        4070,
        4071,
        3,
        818,
        409,
        0,
        4071,
        887,
        1,
        0,
        0,
        0,
        4072,
        4073,
        5,
        47,
        0,
        0,
        4073,
        4074,
        5,
        370,
        0,
        0,
        4074,
        4075,
        3,
        890,
        445,
        0,
        4075,
        4076,
        5,
        27,
        0,
        0,
        4076,
        4077,
        3,
        892,
        446,
        0,
        4077,
        4078,
        5,
        381,
        0,
        0,
        4078,
        889,
        1,
        0,
        0,
        0,
        4079,
        4082,
        3,
        818,
        409,
        0,
        4080,
        4082,
        3,
        1128,
        564,
        0,
        4081,
        4079,
        1,
        0,
        0,
        0,
        4081,
        4080,
        1,
        0,
        0,
        0,
        4082,
        891,
        1,
        0,
        0,
        0,
        4083,
        4084,
        3,
        674,
        337,
        0,
        4084,
        893,
        1,
        0,
        0,
        0,
        4085,
        4086,
        5,
        62,
        0,
        0,
        4086,
        4087,
        5,
        370,
        0,
        0,
        4087,
        4088,
        5,
        358,
        0,
        0,
        4088,
        4092,
        5,
        381,
        0,
        0,
        4089,
        4092,
        3,
        896,
        448,
        0,
        4090,
        4092,
        3,
        898,
        449,
        0,
        4091,
        4085,
        1,
        0,
        0,
        0,
        4091,
        4089,
        1,
        0,
        0,
        0,
        4091,
        4090,
        1,
        0,
        0,
        0,
        4092,
        895,
        1,
        0,
        0,
        0,
        4093,
        4094,
        3,
        900,
        450,
        0,
        4094,
        4096,
        5,
        370,
        0,
        0,
        4095,
        4097,
        3,
        902,
        451,
        0,
        4096,
        4095,
        1,
        0,
        0,
        0,
        4096,
        4097,
        1,
        0,
        0,
        0,
        4097,
        4098,
        1,
        0,
        0,
        0,
        4098,
        4099,
        3,
        818,
        409,
        0,
        4099,
        4100,
        5,
        381,
        0,
        0,
        4100,
        897,
        1,
        0,
        0,
        0,
        4101,
        4102,
        3,
        904,
        452,
        0,
        4102,
        4103,
        5,
        370,
        0,
        0,
        4103,
        4104,
        3,
        906,
        453,
        0,
        4104,
        4105,
        5,
        360,
        0,
        0,
        4105,
        4106,
        3,
        908,
        454,
        0,
        4106,
        4107,
        5,
        381,
        0,
        0,
        4107,
        899,
        1,
        0,
        0,
        0,
        4108,
        4109,
        7,
        27,
        0,
        0,
        4109,
        901,
        1,
        0,
        0,
        0,
        4110,
        4111,
        7,
        28,
        0,
        0,
        4111,
        903,
        1,
        0,
        0,
        0,
        4112,
        4113,
        7,
        29,
        0,
        0,
        4113,
        905,
        1,
        0,
        0,
        0,
        4114,
        4116,
        3,
        902,
        451,
        0,
        4115,
        4114,
        1,
        0,
        0,
        0,
        4115,
        4116,
        1,
        0,
        0,
        0,
        4116,
        4117,
        1,
        0,
        0,
        0,
        4117,
        4118,
        3,
        952,
        476,
        0,
        4118,
        907,
        1,
        0,
        0,
        0,
        4119,
        4120,
        3,
        952,
        476,
        0,
        4120,
        909,
        1,
        0,
        0,
        0,
        4121,
        4122,
        5,
        85,
        0,
        0,
        4122,
        4123,
        5,
        370,
        0,
        0,
        4123,
        4124,
        3,
        432,
        216,
        0,
        4124,
        4125,
        5,
        381,
        0,
        0,
        4125,
        911,
        1,
        0,
        0,
        0,
        4126,
        4127,
        3,
        1092,
        546,
        0,
        4127,
        913,
        1,
        0,
        0,
        0,
        4128,
        4129,
        3,
        818,
        409,
        0,
        4129,
        915,
        1,
        0,
        0,
        0,
        4130,
        4131,
        3,
        918,
        459,
        0,
        4131,
        917,
        1,
        0,
        0,
        0,
        4132,
        4133,
        5,
        166,
        0,
        0,
        4133,
        4134,
        5,
        369,
        0,
        0,
        4134,
        4135,
        3,
        920,
        460,
        0,
        4135,
        4136,
        5,
        380,
        0,
        0,
        4136,
        919,
        1,
        0,
        0,
        0,
        4137,
        4141,
        3,
        922,
        461,
        0,
        4138,
        4140,
        3,
        924,
        462,
        0,
        4139,
        4138,
        1,
        0,
        0,
        0,
        4140,
        4143,
        1,
        0,
        0,
        0,
        4141,
        4139,
        1,
        0,
        0,
        0,
        4141,
        4142,
        1,
        0,
        0,
        0,
        4142,
        921,
        1,
        0,
        0,
        0,
        4143,
        4141,
        1,
        0,
        0,
        0,
        4144,
        4145,
        3,
        836,
        418,
        0,
        4145,
        923,
        1,
        0,
        0,
        0,
        4146,
        4147,
        5,
        360,
        0,
        0,
        4147,
        4148,
        3,
        838,
        419,
        0,
        4148,
        4149,
        5,
        360,
        0,
        0,
        4149,
        4150,
        3,
        836,
        418,
        0,
        4150,
        925,
        1,
        0,
        0,
        0,
        4151,
        4152,
        3,
        818,
        409,
        0,
        4152,
        927,
        1,
        0,
        0,
        0,
        4153,
        4156,
        3,
        930,
        465,
        0,
        4154,
        4156,
        3,
        932,
        466,
        0,
        4155,
        4153,
        1,
        0,
        0,
        0,
        4155,
        4154,
        1,
        0,
        0,
        0,
        4156,
        929,
        1,
        0,
        0,
        0,
        4157,
        4158,
        5,
        210,
        0,
        0,
        4158,
        4159,
        5,
        370,
        0,
        0,
        4159,
        4160,
        3,
        926,
        463,
        0,
        4160,
        4161,
        5,
        360,
        0,
        0,
        4161,
        4162,
        3,
        952,
        476,
        0,
        4162,
        4163,
        5,
        381,
        0,
        0,
        4163,
        931,
        1,
        0,
        0,
        0,
        4164,
        4165,
        5,
        287,
        0,
        0,
        4165,
        4166,
        5,
        370,
        0,
        0,
        4166,
        4167,
        3,
        914,
        457,
        0,
        4167,
        4168,
        5,
        381,
        0,
        0,
        4168,
        933,
        1,
        0,
        0,
        0,
        4169,
        4170,
        3,
        936,
        468,
        0,
        4170,
        935,
        1,
        0,
        0,
        0,
        4171,
        4173,
        3,
        760,
        380,
        0,
        4172,
        4171,
        1,
        0,
        0,
        0,
        4172,
        4173,
        1,
        0,
        0,
        0,
        4173,
        4174,
        1,
        0,
        0,
        0,
        4174,
        4176,
        5,
        369,
        0,
        0,
        4175,
        4177,
        3,
        938,
        469,
        0,
        4176,
        4175,
        1,
        0,
        0,
        0,
        4176,
        4177,
        1,
        0,
        0,
        0,
        4177,
        4178,
        1,
        0,
        0,
        0,
        4178,
        4179,
        5,
        380,
        0,
        0,
        4179,
        937,
        1,
        0,
        0,
        0,
        4180,
        4185,
        3,
        940,
        470,
        0,
        4181,
        4182,
        5,
        360,
        0,
        0,
        4182,
        4184,
        3,
        940,
        470,
        0,
        4183,
        4181,
        1,
        0,
        0,
        0,
        4184,
        4187,
        1,
        0,
        0,
        0,
        4185,
        4183,
        1,
        0,
        0,
        0,
        4185,
        4186,
        1,
        0,
        0,
        0,
        4186,
        939,
        1,
        0,
        0,
        0,
        4187,
        4185,
        1,
        0,
        0,
        0,
        4188,
        4189,
        3,
        818,
        409,
        0,
        4189,
        941,
        1,
        0,
        0,
        0,
        4190,
        4192,
        5,
        176,
        0,
        0,
        4191,
        4190,
        1,
        0,
        0,
        0,
        4191,
        4192,
        1,
        0,
        0,
        0,
        4192,
        4193,
        1,
        0,
        0,
        0,
        4193,
        4194,
        3,
        944,
        472,
        0,
        4194,
        943,
        1,
        0,
        0,
        0,
        4195,
        4197,
        5,
        368,
        0,
        0,
        4196,
        4198,
        3,
        946,
        473,
        0,
        4197,
        4196,
        1,
        0,
        0,
        0,
        4197,
        4198,
        1,
        0,
        0,
        0,
        4198,
        4199,
        1,
        0,
        0,
        0,
        4199,
        4200,
        5,
        379,
        0,
        0,
        4200,
        945,
        1,
        0,
        0,
        0,
        4201,
        4206,
        3,
        948,
        474,
        0,
        4202,
        4203,
        5,
        360,
        0,
        0,
        4203,
        4205,
        3,
        948,
        474,
        0,
        4204,
        4202,
        1,
        0,
        0,
        0,
        4205,
        4208,
        1,
        0,
        0,
        0,
        4206,
        4204,
        1,
        0,
        0,
        0,
        4206,
        4207,
        1,
        0,
        0,
        0,
        4207,
        947,
        1,
        0,
        0,
        0,
        4208,
        4206,
        1,
        0,
        0,
        0,
        4209,
        4210,
        3,
        1084,
        542,
        0,
        4210,
        4211,
        5,
        359,
        0,
        0,
        4211,
        4212,
        3,
        818,
        409,
        0,
        4212,
        949,
        1,
        0,
        0,
        0,
        4213,
        4214,
        5,
        2,
        0,
        0,
        4214,
        951,
        1,
        0,
        0,
        0,
        4215,
        4216,
        6,
        476,
        -1,
        0,
        4216,
        4217,
        7,
        21,
        0,
        0,
        4217,
        4221,
        3,
        952,
        476,
        5,
        4218,
        4221,
        3,
        842,
        421,
        0,
        4219,
        4221,
        3,
        954,
        477,
        0,
        4220,
        4215,
        1,
        0,
        0,
        0,
        4220,
        4218,
        1,
        0,
        0,
        0,
        4220,
        4219,
        1,
        0,
        0,
        0,
        4221,
        4230,
        1,
        0,
        0,
        0,
        4222,
        4223,
        10,
        4,
        0,
        0,
        4223,
        4224,
        7,
        22,
        0,
        0,
        4224,
        4229,
        3,
        952,
        476,
        5,
        4225,
        4226,
        10,
        3,
        0,
        0,
        4226,
        4227,
        7,
        21,
        0,
        0,
        4227,
        4229,
        3,
        952,
        476,
        4,
        4228,
        4222,
        1,
        0,
        0,
        0,
        4228,
        4225,
        1,
        0,
        0,
        0,
        4229,
        4232,
        1,
        0,
        0,
        0,
        4230,
        4228,
        1,
        0,
        0,
        0,
        4230,
        4231,
        1,
        0,
        0,
        0,
        4231,
        953,
        1,
        0,
        0,
        0,
        4232,
        4230,
        1,
        0,
        0,
        0,
        4233,
        4247,
        3,
        956,
        478,
        0,
        4234,
        4247,
        3,
        958,
        479,
        0,
        4235,
        4247,
        3,
        968,
        484,
        0,
        4236,
        4247,
        3,
        970,
        485,
        0,
        4237,
        4247,
        3,
        976,
        488,
        0,
        4238,
        4247,
        3,
        980,
        490,
        0,
        4239,
        4247,
        3,
        986,
        493,
        0,
        4240,
        4247,
        3,
        988,
        494,
        0,
        4241,
        4247,
        3,
        990,
        495,
        0,
        4242,
        4247,
        3,
        992,
        496,
        0,
        4243,
        4247,
        3,
        998,
        499,
        0,
        4244,
        4247,
        3,
        1000,
        500,
        0,
        4245,
        4247,
        3,
        1002,
        501,
        0,
        4246,
        4233,
        1,
        0,
        0,
        0,
        4246,
        4234,
        1,
        0,
        0,
        0,
        4246,
        4235,
        1,
        0,
        0,
        0,
        4246,
        4236,
        1,
        0,
        0,
        0,
        4246,
        4237,
        1,
        0,
        0,
        0,
        4246,
        4238,
        1,
        0,
        0,
        0,
        4246,
        4239,
        1,
        0,
        0,
        0,
        4246,
        4240,
        1,
        0,
        0,
        0,
        4246,
        4241,
        1,
        0,
        0,
        0,
        4246,
        4242,
        1,
        0,
        0,
        0,
        4246,
        4243,
        1,
        0,
        0,
        0,
        4246,
        4244,
        1,
        0,
        0,
        0,
        4246,
        4245,
        1,
        0,
        0,
        0,
        4247,
        955,
        1,
        0,
        0,
        0,
        4248,
        4252,
        3,
        962,
        481,
        0,
        4249,
        4252,
        3,
        964,
        482,
        0,
        4250,
        4252,
        3,
        966,
        483,
        0,
        4251,
        4248,
        1,
        0,
        0,
        0,
        4251,
        4249,
        1,
        0,
        0,
        0,
        4251,
        4250,
        1,
        0,
        0,
        0,
        4252,
        957,
        1,
        0,
        0,
        0,
        4253,
        4254,
        5,
        45,
        0,
        0,
        4254,
        4255,
        5,
        370,
        0,
        0,
        4255,
        4256,
        3,
        960,
        480,
        0,
        4256,
        4257,
        5,
        381,
        0,
        0,
        4257,
        4264,
        1,
        0,
        0,
        0,
        4258,
        4259,
        5,
        194,
        0,
        0,
        4259,
        4260,
        5,
        370,
        0,
        0,
        4260,
        4261,
        3,
        926,
        463,
        0,
        4261,
        4262,
        5,
        381,
        0,
        0,
        4262,
        4264,
        1,
        0,
        0,
        0,
        4263,
        4253,
        1,
        0,
        0,
        0,
        4263,
        4258,
        1,
        0,
        0,
        0,
        4264,
        959,
        1,
        0,
        0,
        0,
        4265,
        4266,
        3,
        818,
        409,
        0,
        4266,
        961,
        1,
        0,
        0,
        0,
        4267,
        4268,
        7,
        30,
        0,
        0,
        4268,
        4269,
        5,
        370,
        0,
        0,
        4269,
        4270,
        3,
        1004,
        502,
        0,
        4270,
        4271,
        5,
        381,
        0,
        0,
        4271,
        963,
        1,
        0,
        0,
        0,
        4272,
        4273,
        7,
        31,
        0,
        0,
        4273,
        4274,
        5,
        370,
        0,
        0,
        4274,
        4275,
        3,
        1006,
        503,
        0,
        4275,
        4276,
        5,
        381,
        0,
        0,
        4276,
        965,
        1,
        0,
        0,
        0,
        4277,
        4278,
        5,
        167,
        0,
        0,
        4278,
        4279,
        5,
        370,
        0,
        0,
        4279,
        4280,
        3,
        914,
        457,
        0,
        4280,
        4281,
        5,
        381,
        0,
        0,
        4281,
        967,
        1,
        0,
        0,
        0,
        4282,
        4283,
        5,
        20,
        0,
        0,
        4283,
        4284,
        5,
        370,
        0,
        0,
        4284,
        4285,
        3,
        818,
        409,
        0,
        4285,
        4286,
        5,
        381,
        0,
        0,
        4286,
        969,
        1,
        0,
        0,
        0,
        4287,
        4288,
        5,
        147,
        0,
        0,
        4288,
        4289,
        5,
        370,
        0,
        0,
        4289,
        4290,
        3,
        972,
        486,
        0,
        4290,
        4291,
        5,
        360,
        0,
        0,
        4291,
        4292,
        3,
        974,
        487,
        0,
        4292,
        4293,
        5,
        381,
        0,
        0,
        4293,
        971,
        1,
        0,
        0,
        0,
        4294,
        4295,
        3,
        952,
        476,
        0,
        4295,
        973,
        1,
        0,
        0,
        0,
        4296,
        4297,
        3,
        952,
        476,
        0,
        4297,
        975,
        1,
        0,
        0,
        0,
        4298,
        4299,
        3,
        978,
        489,
        0,
        4299,
        4300,
        5,
        370,
        0,
        0,
        4300,
        4301,
        3,
        952,
        476,
        0,
        4301,
        4302,
        5,
        381,
        0,
        0,
        4302,
        977,
        1,
        0,
        0,
        0,
        4303,
        4304,
        7,
        32,
        0,
        0,
        4304,
        979,
        1,
        0,
        0,
        0,
        4305,
        4306,
        5,
        139,
        0,
        0,
        4306,
        4307,
        5,
        370,
        0,
        0,
        4307,
        4308,
        3,
        982,
        491,
        0,
        4308,
        4309,
        5,
        360,
        0,
        0,
        4309,
        4310,
        3,
        984,
        492,
        0,
        4310,
        4311,
        5,
        381,
        0,
        0,
        4311,
        981,
        1,
        0,
        0,
        0,
        4312,
        4313,
        3,
        952,
        476,
        0,
        4313,
        983,
        1,
        0,
        0,
        0,
        4314,
        4315,
        3,
        952,
        476,
        0,
        4315,
        985,
        1,
        0,
        0,
        0,
        4316,
        4317,
        5,
        140,
        0,
        0,
        4317,
        4318,
        5,
        370,
        0,
        0,
        4318,
        4319,
        3,
        952,
        476,
        0,
        4319,
        4320,
        5,
        381,
        0,
        0,
        4320,
        987,
        1,
        0,
        0,
        0,
        4321,
        4322,
        5,
        134,
        0,
        0,
        4322,
        4323,
        5,
        370,
        0,
        0,
        4323,
        4324,
        3,
        952,
        476,
        0,
        4324,
        4325,
        5,
        381,
        0,
        0,
        4325,
        989,
        1,
        0,
        0,
        0,
        4326,
        4327,
        5,
        90,
        0,
        0,
        4327,
        4328,
        5,
        370,
        0,
        0,
        4328,
        4329,
        3,
        952,
        476,
        0,
        4329,
        4330,
        5,
        381,
        0,
        0,
        4330,
        991,
        1,
        0,
        0,
        0,
        4331,
        4332,
        5,
        171,
        0,
        0,
        4332,
        4333,
        5,
        370,
        0,
        0,
        4333,
        4334,
        3,
        994,
        497,
        0,
        4334,
        4335,
        5,
        360,
        0,
        0,
        4335,
        4336,
        3,
        996,
        498,
        0,
        4336,
        4337,
        5,
        381,
        0,
        0,
        4337,
        993,
        1,
        0,
        0,
        0,
        4338,
        4339,
        3,
        952,
        476,
        0,
        4339,
        995,
        1,
        0,
        0,
        0,
        4340,
        4341,
        3,
        952,
        476,
        0,
        4341,
        997,
        1,
        0,
        0,
        0,
        4342,
        4343,
        5,
        198,
        0,
        0,
        4343,
        4344,
        5,
        370,
        0,
        0,
        4344,
        4345,
        3,
        952,
        476,
        0,
        4345,
        4346,
        5,
        381,
        0,
        0,
        4346,
        999,
        1,
        0,
        0,
        0,
        4347,
        4348,
        5,
        99,
        0,
        0,
        4348,
        4349,
        5,
        370,
        0,
        0,
        4349,
        4350,
        3,
        952,
        476,
        0,
        4350,
        4351,
        5,
        381,
        0,
        0,
        4351,
        1001,
        1,
        0,
        0,
        0,
        4352,
        4353,
        7,
        33,
        0,
        0,
        4353,
        4354,
        5,
        370,
        0,
        0,
        4354,
        4355,
        3,
        952,
        476,
        0,
        4355,
        4356,
        5,
        381,
        0,
        0,
        4356,
        1003,
        1,
        0,
        0,
        0,
        4357,
        4358,
        3,
        818,
        409,
        0,
        4358,
        1005,
        1,
        0,
        0,
        0,
        4359,
        4360,
        3,
        818,
        409,
        0,
        4360,
        1007,
        1,
        0,
        0,
        0,
        4361,
        4363,
        3,
        1012,
        506,
        0,
        4362,
        4361,
        1,
        0,
        0,
        0,
        4362,
        4363,
        1,
        0,
        0,
        0,
        4363,
        4365,
        1,
        0,
        0,
        0,
        4364,
        4366,
        3,
        1014,
        507,
        0,
        4365,
        4364,
        1,
        0,
        0,
        0,
        4365,
        4366,
        1,
        0,
        0,
        0,
        4366,
        4367,
        1,
        0,
        0,
        0,
        4367,
        4369,
        5,
        101,
        0,
        0,
        4368,
        4362,
        1,
        0,
        0,
        0,
        4368,
        4369,
        1,
        0,
        0,
        0,
        4369,
        4370,
        1,
        0,
        0,
        0,
        4370,
        4371,
        3,
        1010,
        505,
        0,
        4371,
        1009,
        1,
        0,
        0,
        0,
        4372,
        4373,
        3,
        818,
        409,
        0,
        4373,
        1011,
        1,
        0,
        0,
        0,
        4374,
        4375,
        7,
        34,
        0,
        0,
        4375,
        1013,
        1,
        0,
        0,
        0,
        4376,
        4377,
        3,
        818,
        409,
        0,
        4377,
        1015,
        1,
        0,
        0,
        0,
        4378,
        4379,
        7,
        35,
        0,
        0,
        4379,
        1017,
        1,
        0,
        0,
        0,
        4380,
        4381,
        3,
        952,
        476,
        0,
        4381,
        1019,
        1,
        0,
        0,
        0,
        4382,
        4383,
        3,
        818,
        409,
        0,
        4383,
        1021,
        1,
        0,
        0,
        0,
        4384,
        4390,
        3,
        1024,
        512,
        0,
        4385,
        4390,
        3,
        1026,
        513,
        0,
        4386,
        4390,
        3,
        1030,
        515,
        0,
        4387,
        4390,
        3,
        1028,
        514,
        0,
        4388,
        4390,
        3,
        1032,
        516,
        0,
        4389,
        4384,
        1,
        0,
        0,
        0,
        4389,
        4385,
        1,
        0,
        0,
        0,
        4389,
        4386,
        1,
        0,
        0,
        0,
        4389,
        4387,
        1,
        0,
        0,
        0,
        4389,
        4388,
        1,
        0,
        0,
        0,
        4390,
        1023,
        1,
        0,
        0,
        0,
        4391,
        4399,
        5,
        64,
        0,
        0,
        4392,
        4393,
        5,
        70,
        0,
        0,
        4393,
        4395,
        5,
        370,
        0,
        0,
        4394,
        4396,
        3,
        1034,
        517,
        0,
        4395,
        4394,
        1,
        0,
        0,
        0,
        4395,
        4396,
        1,
        0,
        0,
        0,
        4396,
        4397,
        1,
        0,
        0,
        0,
        4397,
        4399,
        5,
        381,
        0,
        0,
        4398,
        4391,
        1,
        0,
        0,
        0,
        4398,
        4392,
        1,
        0,
        0,
        0,
        4399,
        1025,
        1,
        0,
        0,
        0,
        4400,
        4408,
        5,
        68,
        0,
        0,
        4401,
        4402,
        5,
        237,
        0,
        0,
        4402,
        4404,
        5,
        370,
        0,
        0,
        4403,
        4405,
        3,
        1036,
        518,
        0,
        4404,
        4403,
        1,
        0,
        0,
        0,
        4404,
        4405,
        1,
        0,
        0,
        0,
        4405,
        4406,
        1,
        0,
        0,
        0,
        4406,
        4408,
        5,
        381,
        0,
        0,
        4407,
        4400,
        1,
        0,
        0,
        0,
        4407,
        4401,
        1,
        0,
        0,
        0,
        4408,
        1027,
        1,
        0,
        0,
        0,
        4409,
        4415,
        5,
        137,
        0,
        0,
        4410,
        4412,
        5,
        370,
        0,
        0,
        4411,
        4413,
        3,
        1036,
        518,
        0,
        4412,
        4411,
        1,
        0,
        0,
        0,
        4412,
        4413,
        1,
        0,
        0,
        0,
        4413,
        4414,
        1,
        0,
        0,
        0,
        4414,
        4416,
        5,
        381,
        0,
        0,
        4415,
        4410,
        1,
        0,
        0,
        0,
        4415,
        4416,
        1,
        0,
        0,
        0,
        4416,
        1029,
        1,
        0,
        0,
        0,
        4417,
        4425,
        5,
        69,
        0,
        0,
        4418,
        4419,
        5,
        236,
        0,
        0,
        4419,
        4421,
        5,
        370,
        0,
        0,
        4420,
        4422,
        3,
        1038,
        519,
        0,
        4421,
        4420,
        1,
        0,
        0,
        0,
        4421,
        4422,
        1,
        0,
        0,
        0,
        4422,
        4423,
        1,
        0,
        0,
        0,
        4423,
        4425,
        5,
        381,
        0,
        0,
        4424,
        4417,
        1,
        0,
        0,
        0,
        4424,
        4418,
        1,
        0,
        0,
        0,
        4425,
        1031,
        1,
        0,
        0,
        0,
        4426,
        4434,
        5,
        138,
        0,
        0,
        4427,
        4428,
        5,
        136,
        0,
        0,
        4428,
        4430,
        5,
        370,
        0,
        0,
        4429,
        4431,
        3,
        1038,
        519,
        0,
        4430,
        4429,
        1,
        0,
        0,
        0,
        4430,
        4431,
        1,
        0,
        0,
        0,
        4431,
        4432,
        1,
        0,
        0,
        0,
        4432,
        4434,
        5,
        381,
        0,
        0,
        4433,
        4426,
        1,
        0,
        0,
        0,
        4433,
        4427,
        1,
        0,
        0,
        0,
        4434,
        1033,
        1,
        0,
        0,
        0,
        4435,
        4438,
        3,
        1130,
        565,
        0,
        4436,
        4438,
        3,
        942,
        471,
        0,
        4437,
        4435,
        1,
        0,
        0,
        0,
        4437,
        4436,
        1,
        0,
        0,
        0,
        4438,
        1035,
        1,
        0,
        0,
        0,
        4439,
        4442,
        3,
        1132,
        566,
        0,
        4440,
        4442,
        3,
        942,
        471,
        0,
        4441,
        4439,
        1,
        0,
        0,
        0,
        4441,
        4440,
        1,
        0,
        0,
        0,
        4442,
        1037,
        1,
        0,
        0,
        0,
        4443,
        4446,
        3,
        1134,
        567,
        0,
        4444,
        4446,
        3,
        942,
        471,
        0,
        4445,
        4443,
        1,
        0,
        0,
        0,
        4445,
        4444,
        1,
        0,
        0,
        0,
        4446,
        1039,
        1,
        0,
        0,
        0,
        4447,
        4448,
        3,
        818,
        409,
        0,
        4448,
        1041,
        1,
        0,
        0,
        0,
        4449,
        4450,
        5,
        84,
        0,
        0,
        4450,
        4451,
        5,
        370,
        0,
        0,
        4451,
        4452,
        3,
        1044,
        522,
        0,
        4452,
        4454,
        5,
        381,
        0,
        0,
        4453,
        4455,
        3,
        728,
        364,
        0,
        4454,
        4453,
        1,
        0,
        0,
        0,
        4454,
        4455,
        1,
        0,
        0,
        0,
        4455,
        1043,
        1,
        0,
        0,
        0,
        4456,
        4457,
        3,
        1046,
        523,
        0,
        4457,
        4458,
        5,
        360,
        0,
        0,
        4458,
        4459,
        3,
        1048,
        524,
        0,
        4459,
        1045,
        1,
        0,
        0,
        0,
        4460,
        4461,
        3,
        1020,
        510,
        0,
        4461,
        1047,
        1,
        0,
        0,
        0,
        4462,
        4463,
        3,
        1020,
        510,
        0,
        4463,
        1049,
        1,
        0,
        0,
        0,
        4464,
        4467,
        3,
        1052,
        526,
        0,
        4465,
        4467,
        3,
        968,
        484,
        0,
        4466,
        4464,
        1,
        0,
        0,
        0,
        4466,
        4465,
        1,
        0,
        0,
        0,
        4467,
        1051,
        1,
        0,
        0,
        0,
        4468,
        4469,
        5,
        83,
        0,
        0,
        4469,
        4470,
        5,
        370,
        0,
        0,
        4470,
        4471,
        3,
        1054,
        527,
        0,
        4471,
        4472,
        5,
        381,
        0,
        0,
        4472,
        1053,
        1,
        0,
        0,
        0,
        4473,
        4476,
        3,
        1138,
        569,
        0,
        4474,
        4476,
        3,
        942,
        471,
        0,
        4475,
        4473,
        1,
        0,
        0,
        0,
        4475,
        4474,
        1,
        0,
        0,
        0,
        4476,
        1055,
        1,
        0,
        0,
        0,
        4477,
        4478,
        3,
        1110,
        555,
        0,
        4478,
        1057,
        1,
        0,
        0,
        0,
        4479,
        4480,
        3,
        1112,
        556,
        0,
        4480,
        1059,
        1,
        0,
        0,
        0,
        4481,
        4482,
        3,
        1110,
        555,
        0,
        4482,
        1061,
        1,
        0,
        0,
        0,
        4483,
        4484,
        3,
        1110,
        555,
        0,
        4484,
        1063,
        1,
        0,
        0,
        0,
        4485,
        4488,
        3,
        1112,
        556,
        0,
        4486,
        4488,
        3,
        1066,
        533,
        0,
        4487,
        4485,
        1,
        0,
        0,
        0,
        4487,
        4486,
        1,
        0,
        0,
        0,
        4488,
        1065,
        1,
        0,
        0,
        0,
        4489,
        4490,
        7,
        36,
        0,
        0,
        4490,
        1067,
        1,
        0,
        0,
        0,
        4491,
        4492,
        3,
        1110,
        555,
        0,
        4492,
        1069,
        1,
        0,
        0,
        0,
        4493,
        4494,
        3,
        1110,
        555,
        0,
        4494,
        1071,
        1,
        0,
        0,
        0,
        4495,
        4496,
        3,
        1110,
        555,
        0,
        4496,
        1073,
        1,
        0,
        0,
        0,
        4497,
        4500,
        3,
        1112,
        556,
        0,
        4498,
        4500,
        3,
        1076,
        538,
        0,
        4499,
        4497,
        1,
        0,
        0,
        0,
        4499,
        4498,
        1,
        0,
        0,
        0,
        4500,
        1075,
        1,
        0,
        0,
        0,
        4501,
        4502,
        7,
        36,
        0,
        0,
        4502,
        1077,
        1,
        0,
        0,
        0,
        4503,
        4504,
        3,
        1110,
        555,
        0,
        4504,
        1079,
        1,
        0,
        0,
        0,
        4505,
        4506,
        3,
        1110,
        555,
        0,
        4506,
        1081,
        1,
        0,
        0,
        0,
        4507,
        4508,
        3,
        1110,
        555,
        0,
        4508,
        1083,
        1,
        0,
        0,
        0,
        4509,
        4510,
        3,
        1110,
        555,
        0,
        4510,
        1085,
        1,
        0,
        0,
        0,
        4511,
        4512,
        3,
        1092,
        546,
        0,
        4512,
        1087,
        1,
        0,
        0,
        0,
        4513,
        4514,
        3,
        1092,
        546,
        0,
        4514,
        1089,
        1,
        0,
        0,
        0,
        4515,
        4516,
        3,
        1112,
        556,
        0,
        4516,
        1091,
        1,
        0,
        0,
        0,
        4517,
        4518,
        3,
        1112,
        556,
        0,
        4518,
        1093,
        1,
        0,
        0,
        0,
        4519,
        4522,
        3,
        1118,
        559,
        0,
        4520,
        4522,
        3,
        1096,
        548,
        0,
        4521,
        4519,
        1,
        0,
        0,
        0,
        4521,
        4520,
        1,
        0,
        0,
        0,
        4522,
        1095,
        1,
        0,
        0,
        0,
        4523,
        4532,
        5,
        2,
        0,
        0,
        4524,
        4532,
        3,
        1116,
        558,
        0,
        4525,
        4532,
        5,
        7,
        0,
        0,
        4526,
        4532,
        3,
        1098,
        549,
        0,
        4527,
        4532,
        3,
        1136,
        568,
        0,
        4528,
        4532,
        3,
        1128,
        564,
        0,
        4529,
        4532,
        3,
        1106,
        553,
        0,
        4530,
        4532,
        3,
        1108,
        554,
        0,
        4531,
        4523,
        1,
        0,
        0,
        0,
        4531,
        4524,
        1,
        0,
        0,
        0,
        4531,
        4525,
        1,
        0,
        0,
        0,
        4531,
        4526,
        1,
        0,
        0,
        0,
        4531,
        4527,
        1,
        0,
        0,
        0,
        4531,
        4528,
        1,
        0,
        0,
        0,
        4531,
        4529,
        1,
        0,
        0,
        0,
        4531,
        4530,
        1,
        0,
        0,
        0,
        4532,
        1097,
        1,
        0,
        0,
        0,
        4533,
        4537,
        3,
        1100,
        550,
        0,
        4534,
        4537,
        3,
        1102,
        551,
        0,
        4535,
        4537,
        3,
        1104,
        552,
        0,
        4536,
        4533,
        1,
        0,
        0,
        0,
        4536,
        4534,
        1,
        0,
        0,
        0,
        4536,
        4535,
        1,
        0,
        0,
        0,
        4537,
        1099,
        1,
        0,
        0,
        0,
        4538,
        4539,
        5,
        70,
        0,
        0,
        4539,
        4540,
        3,
        1130,
        565,
        0,
        4540,
        1101,
        1,
        0,
        0,
        0,
        4541,
        4542,
        5,
        207,
        0,
        0,
        4542,
        4543,
        3,
        1132,
        566,
        0,
        4543,
        1103,
        1,
        0,
        0,
        0,
        4544,
        4545,
        7,
        37,
        0,
        0,
        4545,
        4546,
        3,
        1134,
        567,
        0,
        4546,
        1105,
        1,
        0,
        0,
        0,
        4547,
        4548,
        3,
        936,
        468,
        0,
        4548,
        1107,
        1,
        0,
        0,
        0,
        4549,
        4550,
        3,
        942,
        471,
        0,
        4550,
        1109,
        1,
        0,
        0,
        0,
        4551,
        4555,
        3,
        1112,
        556,
        0,
        4552,
        4555,
        5,
        4,
        0,
        0,
        4553,
        4555,
        5,
        5,
        0,
        0,
        4554,
        4551,
        1,
        0,
        0,
        0,
        4554,
        4552,
        1,
        0,
        0,
        0,
        4554,
        4553,
        1,
        0,
        0,
        0,
        4555,
        1111,
        1,
        0,
        0,
        0,
        4556,
        4559,
        5,
        324,
        0,
        0,
        4557,
        4559,
        3,
        1146,
        573,
        0,
        4558,
        4556,
        1,
        0,
        0,
        0,
        4558,
        4557,
        1,
        0,
        0,
        0,
        4559,
        1113,
        1,
        0,
        0,
        0,
        4560,
        4561,
        3,
        1116,
        558,
        0,
        4561,
        1115,
        1,
        0,
        0,
        0,
        4562,
        4563,
        7,
        38,
        0,
        0,
        4563,
        1117,
        1,
        0,
        0,
        0,
        4564,
        4567,
        3,
        1120,
        560,
        0,
        4565,
        4567,
        3,
        1122,
        561,
        0,
        4566,
        4564,
        1,
        0,
        0,
        0,
        4566,
        4565,
        1,
        0,
        0,
        0,
        4567,
        1119,
        1,
        0,
        0,
        0,
        4568,
        4574,
        5,
        8,
        0,
        0,
        4569,
        4574,
        5,
        11,
        0,
        0,
        4570,
        4574,
        5,
        12,
        0,
        0,
        4571,
        4574,
        5,
        14,
        0,
        0,
        4572,
        4574,
        3,
        1124,
        562,
        0,
        4573,
        4568,
        1,
        0,
        0,
        0,
        4573,
        4569,
        1,
        0,
        0,
        0,
        4573,
        4570,
        1,
        0,
        0,
        0,
        4573,
        4571,
        1,
        0,
        0,
        0,
        4573,
        4572,
        1,
        0,
        0,
        0,
        4574,
        1121,
        1,
        0,
        0,
        0,
        4575,
        4576,
        7,
        39,
        0,
        0,
        4576,
        1123,
        1,
        0,
        0,
        0,
        4577,
        4578,
        7,
        40,
        0,
        0,
        4578,
        1125,
        1,
        0,
        0,
        0,
        4579,
        4580,
        5,
        16,
        0,
        0,
        4580,
        1127,
        1,
        0,
        0,
        0,
        4581,
        4582,
        5,
        154,
        0,
        0,
        4582,
        1129,
        1,
        0,
        0,
        0,
        4583,
        4584,
        3,
        1116,
        558,
        0,
        4584,
        1131,
        1,
        0,
        0,
        0,
        4585,
        4586,
        3,
        1116,
        558,
        0,
        4586,
        1133,
        1,
        0,
        0,
        0,
        4587,
        4588,
        3,
        1116,
        558,
        0,
        4588,
        1135,
        1,
        0,
        0,
        0,
        4589,
        4590,
        5,
        83,
        0,
        0,
        4590,
        4591,
        3,
        1138,
        569,
        0,
        4591,
        1137,
        1,
        0,
        0,
        0,
        4592,
        4593,
        3,
        1116,
        558,
        0,
        4593,
        1139,
        1,
        0,
        0,
        0,
        4594,
        4595,
        7,
        41,
        0,
        0,
        4595,
        1141,
        1,
        0,
        0,
        0,
        4596,
        4597,
        7,
        42,
        0,
        0,
        4597,
        1143,
        1,
        0,
        0,
        0,
        4598,
        4599,
        7,
        43,
        0,
        0,
        4599,
        1145,
        1,
        0,
        0,
        0,
        4600,
        4601,
        7,
        44,
        0,
        0,
        4601,
        1147,
        1,
        0,
        0,
        0,
        507,
        1150,
        1157,
        1161,
        1166,
        1171,
        1176,
        1179,
        1184,
        1186,
        1190,
        1193,
        1197,
        1205,
        1211,
        1225,
        1228,
        1235,
        1248,
        1255,
        1258,
        1263,
        1269,
        1272,
        1282,
        1289,
        1298,
        1319,
        1322,
        1329,
        1334,
        1340,
        1346,
        1350,
        1355,
        1362,
        1365,
        1373,
        1380,
        1383,
        1395,
        1398,
        1409,
        1417,
        1425,
        1430,
        1434,
        1442,
        1449,
        1457,
        1463,
        1469,
        1474,
        1477,
        1482,
        1485,
        1488,
        1492,
        1495,
        1499,
        1503,
        1506,
        1509,
        1512,
        1524,
        1529,
        1535,
        1542,
        1547,
        1551,
        1557,
        1562,
        1565,
        1573,
        1579,
        1587,
        1591,
        1596,
        1603,
        1607,
        1612,
        1616,
        1620,
        1626,
        1639,
        1645,
        1657,
        1673,
        1678,
        1689,
        1699,
        1717,
        1722,
        1726,
        1730,
        1734,
        1736,
        1742,
        1747,
        1754,
        1770,
        1774,
        1779,
        1783,
        1790,
        1794,
        1811,
        1816,
        1823,
        1833,
        1841,
        1846,
        1862,
        1865,
        1869,
        1872,
        1876,
        1879,
        1885,
        1889,
        1892,
        1899,
        1904,
        1911,
        1915,
        1919,
        1922,
        1925,
        1928,
        1931,
        1934,
        1936,
        1943,
        1948,
        1959,
        1966,
        1976,
        1979,
        1986,
        1989,
        1995,
        2004,
        2010,
        2014,
        2021,
        2034,
        2044,
        2050,
        2054,
        2057,
        2061,
        2071,
        2074,
        2078,
        2081,
        2088,
        2092,
        2095,
        2115,
        2124,
        2129,
        2136,
        2140,
        2146,
        2152,
        2158,
        2161,
        2164,
        2169,
        2174,
        2177,
        2181,
        2185,
        2192,
        2196,
        2199,
        2205,
        2208,
        2211,
        2219,
        2224,
        2227,
        2232,
        2235,
        2240,
        2243,
        2247,
        2250,
        2253,
        2265,
        2272,
        2274,
        2279,
        2288,
        2293,
        2297,
        2304,
        2307,
        2310,
        2321,
        2335,
        2344,
        2353,
        2387,
        2390,
        2394,
        2413,
        2421,
        2423,
        2434,
        2442,
        2446,
        2461,
        2494,
        2503,
        2513,
        2523,
        2534,
        2540,
        2550,
        2559,
        2586,
        2596,
        2609,
        2614,
        2630,
        2634,
        2650,
        2655,
        2658,
        2668,
        2681,
        2687,
        2696,
        2702,
        2709,
        2714,
        2721,
        2729,
        2732,
        2740,
        2743,
        2752,
        2756,
        2759,
        2765,
        2772,
        2780,
        2782,
        2797,
        2802,
        2806,
        2810,
        2814,
        2818,
        2821,
        2827,
        2832,
        2836,
        2839,
        2843,
        2846,
        2855,
        2858,
        2868,
        2871,
        2875,
        2879,
        2883,
        2888,
        2895,
        2898,
        2902,
        2905,
        2912,
        2915,
        2925,
        2957,
        2960,
        2968,
        2971,
        2980,
        2984,
        3019,
        3026,
        3031,
        3040,
        3045,
        3052,
        3068,
        3071,
        3078,
        3081,
        3086,
        3089,
        3092,
        3097,
        3101,
        3109,
        3114,
        3125,
        3128,
        3130,
        3132,
        3144,
        3148,
        3155,
        3160,
        3163,
        3170,
        3173,
        3180,
        3183,
        3185,
        3192,
        3197,
        3200,
        3207,
        3210,
        3217,
        3220,
        3222,
        3232,
        3236,
        3240,
        3244,
        3248,
        3252,
        3256,
        3260,
        3264,
        3268,
        3275,
        3278,
        3282,
        3285,
        3288,
        3292,
        3296,
        3300,
        3304,
        3308,
        3312,
        3316,
        3323,
        3326,
        3330,
        3334,
        3338,
        3342,
        3346,
        3350,
        3354,
        3358,
        3363,
        3370,
        3373,
        3378,
        3380,
        3387,
        3391,
        3393,
        3401,
        3405,
        3409,
        3413,
        3417,
        3424,
        3428,
        3431,
        3435,
        3439,
        3442,
        3444,
        3448,
        3455,
        3460,
        3467,
        3469,
        3474,
        3480,
        3483,
        3485,
        3489,
        3494,
        3501,
        3503,
        3508,
        3515,
        3517,
        3524,
        3532,
        3538,
        3542,
        3549,
        3553,
        3556,
        3561,
        3565,
        3569,
        3573,
        3577,
        3581,
        3584,
        3588,
        3592,
        3596,
        3599,
        3603,
        3607,
        3614,
        3618,
        3621,
        3625,
        3627,
        3631,
        3640,
        3648,
        3663,
        3685,
        3692,
        3701,
        3708,
        3711,
        3720,
        3732,
        3736,
        3744,
        3750,
        3758,
        3775,
        3789,
        3808,
        3813,
        3819,
        3845,
        3848,
        3850,
        3859,
        3868,
        3892,
        3901,
        3922,
        3929,
        3938,
        3952,
        3956,
        3960,
        3964,
        3979,
        3995,
        3999,
        4003,
        4010,
        4013,
        4021,
        4024,
        4043,
        4050,
        4064,
        4068,
        4081,
        4091,
        4096,
        4115,
        4141,
        4155,
        4172,
        4176,
        4185,
        4191,
        4197,
        4206,
        4220,
        4228,
        4230,
        4246,
        4251,
        4263,
        4362,
        4365,
        4368,
        4389,
        4395,
        4398,
        4404,
        4407,
        4412,
        4415,
        4421,
        4424,
        4430,
        4433,
        4437,
        4441,
        4445,
        4454,
        4466,
        4475,
        4487,
        4499,
        4521,
        4531,
        4536,
        4554,
        4558,
        4566,
        4573,
    ]


class GQLParser(Parser):
    grammarFileName = "GQL.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'ABS'",
        "'ACOS'",
        "'ALL'",
        "'ALL_DIFFERENT'",
        "'AND'",
        "'ANY'",
        "'ARRAY'",
        "'AS'",
        "'ASC'",
        "'ASCENDING'",
        "'ASIN'",
        "'AT'",
        "'ATAN'",
        "'AVG'",
        "'BIG'",
        "'BIGINT'",
        "'BINARY'",
        "'BOOL'",
        "'BOOLEAN'",
        "'BOTH'",
        "'BTRIM'",
        "'BY'",
        "'BYTE_LENGTH'",
        "'BYTES'",
        "'CALL'",
        "'CARDINALITY'",
        "'CASE'",
        "'CAST'",
        "'CEIL'",
        "'CEILING'",
        "'CHAR'",
        "'CHAR_LENGTH'",
        "'CHARACTER_LENGTH'",
        "'CHARACTERISTICS'",
        "'CLOSE'",
        "'COALESCE'",
        "'COLLECT_LIST'",
        "'COMMIT'",
        "'COPY'",
        "'COS'",
        "'COSH'",
        "'COT'",
        "'COUNT'",
        "'CREATE'",
        "'CURRENT_DATE'",
        "'CURRENT_GRAPH'",
        "'CURRENT_PROPERTY_GRAPH'",
        "'CURRENT_SCHEMA'",
        "'CURRENT_TIME'",
        "'CURRENT_TIMESTAMP'",
        "'DATE'",
        "'DATETIME'",
        "'DAY'",
        "'DEC'",
        "'DECIMAL'",
        "'DEGREES'",
        "'DELETE'",
        "'DESC'",
        "'DESCENDING'",
        "'DETACH'",
        "'DISTINCT'",
        "'DOUBLE'",
        "'DROP'",
        "'DURATION'",
        "'DURATION_BETWEEN'",
        "'ELEMENT_ID'",
        "'ELSE'",
        "'END'",
        "'EXCEPT'",
        "'EXISTS'",
        "'EXP'",
        "'FILTER'",
        "'FINISH'",
        "'FLOAT'",
        "'FLOAT16'",
        "'FLOAT32'",
        "'FLOAT64'",
        "'FLOAT128'",
        "'FLOAT256'",
        "'FLOOR'",
        "'FOR'",
        "'FROM'",
        "'GROUP'",
        "'HAVING'",
        "'HOME_GRAPH'",
        "'HOME_PROPERTY_GRAPH'",
        "'HOME_SCHEMA'",
        "'HOUR'",
        "'IF'",
        "'IN'",
        "'INSERT'",
        "'INT'",
        "'INTEGER'",
        "'INT8'",
        "'INTEGER8'",
        "'INT16'",
        "'INTEGER16'",
        "'INT32'",
        "'INTEGER32'",
        "'INT64'",
        "'INTEGER64'",
        "'INT128'",
        "'INTEGER128'",
        "'INT256'",
        "'INTEGER256'",
        "'INTERSECT'",
        "'INTERVAL'",
        "'IS'",
        "'LEADING'",
        "'LEFT'",
        "'LET'",
        "'LIKE'",
        "'LIMIT'",
        "'LIST'",
        "'LN'",
        "'LOCAL'",
        "'LOCAL_DATETIME'",
        "'LOCAL_TIME'",
        "'LOCAL_TIMESTAMP'",
        "'LOG'",
        "'LOG10'",
        "'LOWER'",
        "'LTRIM'",
        "'MATCH'",
        "'MAX'",
        "'MIN'",
        "'MINUTE'",
        "'MOD'",
        "'MONTH'",
        "'NEXT'",
        "'NODETACH'",
        "'NORMALIZE'",
        "'NOT'",
        "'NOTHING'",
        "'NULL'",
        "'NULLS'",
        "'NULLIF'",
        "'OCTET_LENGTH'",
        "'OF'",
        "'OFFSET'",
        "'OPTIONAL'",
        "'OR'",
        "'ORDER'",
        "'OTHERWISE'",
        "'PARAMETER'",
        "'PARAMETERS'",
        "'PATH'",
        "'PATH_LENGTH'",
        "'PATHS'",
        "'PERCENTILE_CONT'",
        "'PERCENTILE_DISC'",
        "'POWER'",
        "'PRECISION'",
        "'PROPERTY_EXISTS'",
        "'RADIANS'",
        "'REAL'",
        "'RECORD'",
        "'REMOVE'",
        "'REPLACE'",
        "'RESET'",
        "'RETURN'",
        "'RIGHT'",
        "'ROLLBACK'",
        "'RTRIM'",
        "'SAME'",
        "'SCHEMA'",
        "'SECOND'",
        "'SELECT'",
        "'SESSION'",
        "'SESSION_USER'",
        "'SET'",
        "'SIGNED'",
        "'SIN'",
        "'SINH'",
        "'SIZE'",
        "'SKIP'",
        "'SMALL'",
        "'SMALLINT'",
        "'SQRT'",
        "'START'",
        "'STDDEV_POP'",
        "'STDDEV_SAMP'",
        "'STRING'",
        "'SUM'",
        "'TAN'",
        "'TANH'",
        "'THEN'",
        "'TIME'",
        "'TIMESTAMP'",
        "'TRAILING'",
        "'TRIM'",
        "'TYPED'",
        "'UBIGINT'",
        "'UINT'",
        "'UINT8'",
        "'UINT16'",
        "'UINT32'",
        "'UINT64'",
        "'UINT128'",
        "'UINT256'",
        "'UNION'",
        "'UNSIGNED'",
        "'UPPER'",
        "'USE'",
        "'USMALLINT'",
        "'VALUE'",
        "'VARBINARY'",
        "'VARCHAR'",
        "'VARIABLE'",
        "'WHEN'",
        "'WHERE'",
        "'WITH'",
        "'XOR'",
        "'YEAR'",
        "'YIELD'",
        "'ZONED'",
        "'ZONED_DATETIME'",
        "'ZONED_TIME'",
        "'ABSTRACT'",
        "'AGGREGATE'",
        "'AGGREGATES'",
        "'ALTER'",
        "'CATALOG'",
        "'CLEAR'",
        "'CLONE'",
        "'CONSTRAINT'",
        "'CURRENT_ROLE'",
        "'CURRENT_USER'",
        "'DATA'",
        "'DIRECTORY'",
        "'DRYRUN'",
        "'EXACT'",
        "'EXISTING'",
        "'FUNCTION'",
        "'GQLSTATUS'",
        "'GRANT'",
        "'INSTANT'",
        "'INFINITY'",
        "'NUMBER'",
        "'NUMERIC'",
        "'ON'",
        "'OPEN'",
        "'PARTITION'",
        "'PROCEDURE'",
        "'PRODUCT'",
        "'PROJECT'",
        "'QUERY'",
        "'RECORDS'",
        "'REFERENCE'",
        "'RENAME'",
        "'REVOKE'",
        "'SUBSTRING'",
        "'SYSTEM_USER'",
        "'TEMPORAL'",
        "'UNIQUE'",
        "'UNIT'",
        "'VALUES'",
        "'ACYCLIC'",
        "'BINDING'",
        "'BINDINGS'",
        "'CONNECTING'",
        "'DESTINATION'",
        "'DIFFERENT'",
        "'DIRECTED'",
        "'EDGE'",
        "'EDGES'",
        "'ELEMENT'",
        "'ELEMENTS'",
        "'FIRST'",
        "'GRAPH'",
        "'GROUPS'",
        "'KEEP'",
        "'LABEL'",
        "'LABELED'",
        "'LABELS'",
        "'LAST'",
        "'NFC'",
        "'NFD'",
        "'NFKC'",
        "'NFKD'",
        "'NO'",
        "'NODE'",
        "'NORMALIZED'",
        "'ONLY'",
        "'ORDINALITY'",
        "'PROPERTY'",
        "'READ'",
        "'RELATIONSHIP'",
        "'RELATIONSHIPS'",
        "'REPEATABLE'",
        "'SHORTEST'",
        "'SIMPLE'",
        "'SOURCE'",
        "'TABLE'",
        "'TO'",
        "'TRAIL'",
        "'TRANSACTION'",
        "'TYPE'",
        "'UNDIRECTED'",
        "'VERTEX'",
        "'WALK'",
        "'WITHOUT'",
        "'WRITE'",
        "'ZONE'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'|+|'",
        "']->'",
        "']~>'",
        "'||'",
        "'::'",
        "'$$'",
        "'..'",
        "'>='",
        "'<-'",
        "'<~'",
        "'<-['",
        "'<~['",
        "'<->'",
        "'<-/'",
        "'<~/'",
        "'<='",
        "'-['",
        "'-/'",
        "'<>'",
        "'->'",
        "']-'",
        "']~'",
        "'=>'",
        "'/-'",
        "'/->'",
        "'/~'",
        "'/~>'",
        "'~['",
        "'~>'",
        "'~/'",
        "'&'",
        "'*'",
        "':'",
        "','",
        "'@'",
        "'$'",
        "'\"'",
        "'='",
        "'!'",
        "'>'",
        "'`'",
        "'{'",
        "'['",
        "'('",
        "'<'",
        "'-'",
        "'%'",
        "'.'",
        "'+'",
        "'?'",
        "'''",
        "'\\'",
        "'}'",
        "']'",
        "')'",
        "'/'",
        "'~'",
        "'_'",
        "'|'",
    ]

    symbolicNames = [
        "<INVALID>",
        "IMPLIES",
        "BOOLEAN_LITERAL",
        "SINGLE_QUOTED_CHARACTER_SEQUENCE",
        "DOUBLE_QUOTED_CHARACTER_SEQUENCE",
        "ACCENT_QUOTED_CHARACTER_SEQUENCE",
        "NO_ESCAPE",
        "BYTE_STRING_LITERAL",
        "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX",
        "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX",
        "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX",
        "UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX",
        "UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX",
        "UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX",
        "UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX",
        "UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX",
        "UNSIGNED_DECIMAL_INTEGER",
        "UNSIGNED_HEXADECIMAL_INTEGER",
        "UNSIGNED_OCTAL_INTEGER",
        "UNSIGNED_BINARY_INTEGER",
        "ABS",
        "ACOS",
        "ALL",
        "ALL_DIFFERENT",
        "AND",
        "ANY",
        "ARRAY",
        "AS",
        "ASC",
        "ASCENDING",
        "ASIN",
        "AT",
        "ATAN",
        "AVG",
        "BIG",
        "BIGINT",
        "BINARY",
        "BOOL",
        "BOOLEAN",
        "BOTH",
        "BTRIM",
        "BY",
        "BYTE_LENGTH",
        "BYTES",
        "CALL",
        "CARDINALITY",
        "CASE",
        "CAST",
        "CEIL",
        "CEILING",
        "CHAR",
        "CHAR_LENGTH",
        "CHARACTER_LENGTH",
        "CHARACTERISTICS",
        "CLOSE",
        "COALESCE",
        "COLLECT_LIST",
        "COMMIT",
        "COPY",
        "COS",
        "COSH",
        "COT",
        "COUNT",
        "CREATE",
        "CURRENT_DATE",
        "CURRENT_GRAPH",
        "CURRENT_PROPERTY_GRAPH",
        "CURRENT_SCHEMA",
        "CURRENT_TIME",
        "CURRENT_TIMESTAMP",
        "DATE",
        "DATETIME",
        "DAY",
        "DEC",
        "DECIMAL",
        "DEGREES",
        "DELETE",
        "DESC",
        "DESCENDING",
        "DETACH",
        "DISTINCT",
        "DOUBLE",
        "DROP",
        "DURATION",
        "DURATION_BETWEEN",
        "ELEMENT_ID",
        "ELSE",
        "END",
        "EXCEPT",
        "EXISTS",
        "EXP",
        "FILTER",
        "FINISH",
        "FLOAT",
        "FLOAT16",
        "FLOAT32",
        "FLOAT64",
        "FLOAT128",
        "FLOAT256",
        "FLOOR",
        "FOR",
        "FROM",
        "GROUP",
        "HAVING",
        "HOME_GRAPH",
        "HOME_PROPERTY_GRAPH",
        "HOME_SCHEMA",
        "HOUR",
        "IF",
        "IN",
        "INSERT",
        "INT",
        "INTEGER",
        "INT8",
        "INTEGER8",
        "INT16",
        "INTEGER16",
        "INT32",
        "INTEGER32",
        "INT64",
        "INTEGER64",
        "INT128",
        "INTEGER128",
        "INT256",
        "INTEGER256",
        "INTERSECT",
        "INTERVAL",
        "IS",
        "LEADING",
        "LEFT",
        "LET",
        "LIKE",
        "LIMIT",
        "LIST",
        "LN",
        "LOCAL",
        "LOCAL_DATETIME",
        "LOCAL_TIME",
        "LOCAL_TIMESTAMP",
        "LOG_KW",
        "LOG10",
        "LOWER",
        "LTRIM",
        "MATCH",
        "MAX",
        "MIN",
        "MINUTE",
        "MOD",
        "MONTH",
        "NEXT",
        "NODETACH",
        "NORMALIZE",
        "NOT",
        "NOTHING",
        "NULL_KW",
        "NULLS",
        "NULLIF",
        "OCTET_LENGTH",
        "OF",
        "OFFSET",
        "OPTIONAL",
        "OR",
        "ORDER",
        "OTHERWISE",
        "PARAMETER",
        "PARAMETERS",
        "PATH",
        "PATH_LENGTH",
        "PATHS",
        "PERCENTILE_CONT",
        "PERCENTILE_DISC",
        "POWER",
        "PRECISION",
        "PROPERTY_EXISTS",
        "RADIANS",
        "REAL",
        "RECORD",
        "REMOVE",
        "REPLACE",
        "RESET",
        "RETURN",
        "RIGHT",
        "ROLLBACK",
        "RTRIM",
        "SAME",
        "SCHEMA",
        "SECOND",
        "SELECT",
        "SESSION",
        "SESSION_USER",
        "SET",
        "SIGNED",
        "SIN",
        "SINH",
        "SIZE",
        "SKIP_RESERVED_WORD",
        "SMALL",
        "SMALLINT",
        "SQRT",
        "START",
        "STDDEV_POP",
        "STDDEV_SAMP",
        "STRING",
        "SUM",
        "TAN",
        "TANH",
        "THEN",
        "TIME",
        "TIMESTAMP",
        "TRAILING",
        "TRIM",
        "TYPED",
        "UBIGINT",
        "UINT",
        "UINT8",
        "UINT16",
        "UINT32",
        "UINT64",
        "UINT128",
        "UINT256",
        "UNION",
        "UNSIGNED",
        "UPPER",
        "USE",
        "USMALLINT",
        "VALUE",
        "VARBINARY",
        "VARCHAR",
        "VARIABLE",
        "WHEN",
        "WHERE",
        "WITH",
        "XOR",
        "YEAR",
        "YIELD",
        "ZONED",
        "ZONED_DATETIME",
        "ZONED_TIME",
        "ABSTRACT",
        "AGGREGATE",
        "AGGREGATES",
        "ALTER",
        "CATALOG",
        "CLEAR",
        "CLONE",
        "CONSTRAINT",
        "CURRENT_ROLE",
        "CURRENT_USER",
        "DATA",
        "DIRECTORY",
        "DRYRUN",
        "EXACT",
        "EXISTING",
        "FUNCTION",
        "GQLSTATUS",
        "GRANT",
        "INSTANT",
        "INFINITY_KW",
        "NUMBER",
        "NUMERIC",
        "ON",
        "OPEN",
        "PARTITION",
        "PROCEDURE",
        "PRODUCT",
        "PROJECT",
        "QUERY",
        "RECORDS",
        "REFERENCE",
        "RENAME",
        "REVOKE",
        "SUBSTRING",
        "SYSTEM_USER",
        "TEMPORAL",
        "UNIQUE",
        "UNIT",
        "VALUES",
        "ACYCLIC",
        "BINDING",
        "BINDINGS",
        "CONNECTING",
        "DESTINATION",
        "DIFFERENT",
        "DIRECTED",
        "EDGE",
        "EDGES",
        "ELEMENT",
        "ELEMENTS",
        "FIRST",
        "GRAPH",
        "GROUPS",
        "KEEP",
        "LABEL",
        "LABELED",
        "LABELS",
        "LAST",
        "NFC",
        "NFD",
        "NFKC",
        "NFKD",
        "NO",
        "NODE",
        "NORMALIZED",
        "ONLY",
        "ORDINALITY",
        "PROPERTY",
        "READ",
        "RELATIONSHIP",
        "RELATIONSHIPS",
        "REPEATABLE",
        "SHORTEST",
        "SIMPLE",
        "SOURCE",
        "TABLE",
        "TO",
        "TRAIL",
        "TRANSACTION",
        "TYPE",
        "UNDIRECTED",
        "VERTEX",
        "WALK",
        "WITHOUT",
        "WRITE",
        "ZONE",
        "REGULAR_IDENTIFIER",
        "SUBSTITUTED_PARAMETER_REFERENCE",
        "GENERAL_PARAMETER_REFERENCE",
        "MULTISET_ALTERNATION_OPERATOR",
        "BRACKET_RIGHT_ARROW",
        "BRACKET_TILDE_RIGHT_ARROW",
        "CONCATENATION_OPERATOR",
        "DOUBLE_COLON",
        "DOUBLE_DOLLAR_SIGN",
        "DOUBLE_PERIOD",
        "GREATER_THAN_OR_EQUALS_OPERATOR",
        "LEFT_ARROW",
        "LEFT_ARROW_TILDE",
        "LEFT_ARROW_BRACKET",
        "LEFT_ARROW_TILDE_BRACKET",
        "LEFT_MINUS_RIGHT",
        "LEFT_MINUS_SLASH",
        "LEFT_TILDE_SLASH",
        "LESS_THAN_OR_EQUALS_OPERATOR",
        "MINUS_LEFT_BRACKET",
        "MINUS_SLASH",
        "NOT_EQUALS_OPERATOR",
        "RIGHT_ARROW",
        "RIGHT_BRACKET_MINUS",
        "RIGHT_BRACKET_TILDE",
        "RIGHT_DOUBLE_ARROW",
        "SLASH_MINUS",
        "SLASH_MINUS_RIGHT",
        "SLASH_TILDE",
        "SLASH_TILDE_RIGHT",
        "TILDE_LEFT_BRACKET",
        "TILDE_RIGHT_ARROW",
        "TILDE_SLASH",
        "AMPERSAND",
        "ASTERISK",
        "COLON",
        "COMMA",
        "COMMERCIAL_AT",
        "DOLLAR_SIGN",
        "DOUBLE_QUOTE",
        "EQUALS_OPERATOR",
        "EXCLAMATION_MARK",
        "RIGHT_ANGLE_BRACKET",
        "GRAVE_ACCENT",
        "LEFT_BRACE",
        "LEFT_BRACKET",
        "LEFT_PAREN",
        "LEFT_ANGLE_BRACKET",
        "MINUS_SIGN",
        "PERCENT",
        "PERIOD",
        "PLUS_SIGN",
        "QUESTION_MARK",
        "QUOTE",
        "REVERSE_SOLIDUS",
        "RIGHT_BRACE",
        "RIGHT_BRACKET",
        "RIGHT_PAREN",
        "SOLIDUS",
        "TILDE",
        "UNDERSCORE",
        "VERTICAL_BAR",
        "SP",
        "WHITESPACE",
        "BRACKETED_COMMENT",
        "SIMPLE_COMMENT_SOLIDUS",
        "SIMPLE_COMMENT_MINUS",
    ]

    RULE_gqlProgram = 0
    RULE_programActivity = 1
    RULE_sessionActivity = 2
    RULE_transactionActivity = 3
    RULE_endTransactionCommand = 4
    RULE_sessionSetCommand = 5
    RULE_sessionSetSchemaClause = 6
    RULE_sessionSetGraphClause = 7
    RULE_sessionSetTimeZoneClause = 8
    RULE_setTimeZoneValue = 9
    RULE_sessionSetParameterClause = 10
    RULE_sessionSetGraphParameterClause = 11
    RULE_sessionSetBindingTableParameterClause = 12
    RULE_sessionSetValueParameterClause = 13
    RULE_sessionSetParameterName = 14
    RULE_sessionResetCommand = 15
    RULE_sessionResetArguments = 16
    RULE_sessionCloseCommand = 17
    RULE_sessionParameterSpecification = 18
    RULE_startTransactionCommand = 19
    RULE_transactionCharacteristics = 20
    RULE_transactionMode = 21
    RULE_transactionAccessMode = 22
    RULE_rollbackCommand = 23
    RULE_commitCommand = 24
    RULE_nestedProcedureSpecification = 25
    RULE_procedureSpecification = 26
    RULE_nestedDataModifyingProcedureSpecification = 27
    RULE_nestedQuerySpecification = 28
    RULE_procedureBody = 29
    RULE_bindingVariableDefinitionBlock = 30
    RULE_bindingVariableDefinition = 31
    RULE_statementBlock = 32
    RULE_statement = 33
    RULE_nextStatement = 34
    RULE_graphVariableDefinition = 35
    RULE_optTypedGraphInitializer = 36
    RULE_graphInitializer = 37
    RULE_bindingTableVariableDefinition = 38
    RULE_optTypedBindingTableInitializer = 39
    RULE_bindingTableInitializer = 40
    RULE_valueVariableDefinition = 41
    RULE_optTypedValueInitializer = 42
    RULE_valueInitializer = 43
    RULE_graphExpression = 44
    RULE_currentGraph = 45
    RULE_bindingTableExpression = 46
    RULE_nestedBindingTableQuerySpecification = 47
    RULE_objectExpressionPrimary = 48
    RULE_linearCatalogModifyingStatement = 49
    RULE_simpleCatalogModifyingStatement = 50
    RULE_primitiveCatalogModifyingStatement = 51
    RULE_createSchemaStatement = 52
    RULE_dropSchemaStatement = 53
    RULE_createGraphStatement = 54
    RULE_openGraphType = 55
    RULE_ofGraphType = 56
    RULE_graphTypeLikeGraph = 57
    RULE_graphSource = 58
    RULE_dropGraphStatement = 59
    RULE_createGraphTypeStatement = 60
    RULE_graphTypeSource = 61
    RULE_copyOfGraphType = 62
    RULE_dropGraphTypeStatement = 63
    RULE_callCatalogModifyingProcedureStatement = 64
    RULE_linearDataModifyingStatement = 65
    RULE_focusedLinearDataModifyingStatement = 66
    RULE_focusedLinearDataModifyingStatementBody = 67
    RULE_focusedNestedDataModifyingProcedureSpecification = 68
    RULE_ambientLinearDataModifyingStatement = 69
    RULE_ambientLinearDataModifyingStatementBody = 70
    RULE_simpleLinearDataAccessingStatement = 71
    RULE_simpleDataAccessingStatement = 72
    RULE_simpleDataModifyingStatement = 73
    RULE_primitiveDataModifyingStatement = 74
    RULE_insertStatement = 75
    RULE_setStatement = 76
    RULE_setItemList = 77
    RULE_setItem = 78
    RULE_setPropertyItem = 79
    RULE_setAllPropertiesItem = 80
    RULE_setLabelItem = 81
    RULE_removeStatement = 82
    RULE_removeItemList = 83
    RULE_removeItem = 84
    RULE_removePropertyItem = 85
    RULE_removeLabelItem = 86
    RULE_deleteStatement = 87
    RULE_deleteItemList = 88
    RULE_deleteItem = 89
    RULE_callDataModifyingProcedureStatement = 90
    RULE_compositeQueryStatement = 91
    RULE_compositeQueryExpression = 92
    RULE_queryConjunction = 93
    RULE_setOperator = 94
    RULE_compositeQueryPrimary = 95
    RULE_linearQueryStatement = 96
    RULE_focusedLinearQueryStatement = 97
    RULE_focusedLinearQueryStatementPart = 98
    RULE_focusedLinearQueryAndPrimitiveResultStatementPart = 99
    RULE_focusedPrimitiveResultStatement = 100
    RULE_focusedNestedQuerySpecification = 101
    RULE_ambientLinearQueryStatement = 102
    RULE_simpleLinearQueryStatement = 103
    RULE_simpleQueryStatement = 104
    RULE_primitiveQueryStatement = 105
    RULE_matchStatement = 106
    RULE_simpleMatchStatement = 107
    RULE_optionalMatchStatement = 108
    RULE_optionalOperand = 109
    RULE_matchStatementBlock = 110
    RULE_callQueryStatement = 111
    RULE_filterStatement = 112
    RULE_letStatement = 113
    RULE_letVariableDefinitionList = 114
    RULE_letVariableDefinition = 115
    RULE_forStatement = 116
    RULE_forItem = 117
    RULE_forItemAlias = 118
    RULE_forItemSource = 119
    RULE_forOrdinalityOrOffset = 120
    RULE_orderByAndPageStatement = 121
    RULE_primitiveResultStatement = 122
    RULE_returnStatement = 123
    RULE_returnStatementBody = 124
    RULE_returnItemList = 125
    RULE_returnItem = 126
    RULE_returnItemAlias = 127
    RULE_selectStatement = 128
    RULE_selectItemList = 129
    RULE_selectItem = 130
    RULE_selectItemAlias = 131
    RULE_havingClause = 132
    RULE_selectStatementBody = 133
    RULE_selectGraphMatchList = 134
    RULE_selectGraphMatch = 135
    RULE_selectQuerySpecification = 136
    RULE_callProcedureStatement = 137
    RULE_procedureCall = 138
    RULE_inlineProcedureCall = 139
    RULE_variableScopeClause = 140
    RULE_bindingVariableReferenceList = 141
    RULE_namedProcedureCall = 142
    RULE_procedureArgumentList = 143
    RULE_procedureArgument = 144
    RULE_atSchemaClause = 145
    RULE_useGraphClause = 146
    RULE_graphPatternBindingTable = 147
    RULE_graphPatternYieldClause = 148
    RULE_graphPatternYieldItemList = 149
    RULE_graphPatternYieldItem = 150
    RULE_graphPattern = 151
    RULE_matchMode = 152
    RULE_repeatableElementsMatchMode = 153
    RULE_differentEdgesMatchMode = 154
    RULE_elementBindingsOrElements = 155
    RULE_edgeBindingsOrEdges = 156
    RULE_pathPatternList = 157
    RULE_pathPattern = 158
    RULE_pathVariableDeclaration = 159
    RULE_keepClause = 160
    RULE_graphPatternWhereClause = 161
    RULE_insertGraphPattern = 162
    RULE_insertPathPatternList = 163
    RULE_insertPathPattern = 164
    RULE_insertNodePattern = 165
    RULE_insertEdgePattern = 166
    RULE_insertEdgePointingLeft = 167
    RULE_insertEdgePointingRight = 168
    RULE_insertEdgeUndirected = 169
    RULE_insertElementPatternFiller = 170
    RULE_labelAndPropertySetSpecification = 171
    RULE_pathPatternPrefix = 172
    RULE_pathModePrefix = 173
    RULE_pathMode = 174
    RULE_pathSearchPrefix = 175
    RULE_allPathSearch = 176
    RULE_pathOrPaths = 177
    RULE_anyPathSearch = 178
    RULE_numberOfPaths = 179
    RULE_shortestPathSearch = 180
    RULE_allShortestPathSearch = 181
    RULE_anyShortestPathSearch = 182
    RULE_countedShortestPathSearch = 183
    RULE_countedShortestGroupSearch = 184
    RULE_numberOfGroups = 185
    RULE_pathPatternExpression = 186
    RULE_pathTerm = 187
    RULE_pathFactor = 188
    RULE_pathPrimary = 189
    RULE_elementPattern = 190
    RULE_nodePattern = 191
    RULE_elementPatternFiller = 192
    RULE_elementVariableDeclaration = 193
    RULE_isLabelExpression = 194
    RULE_isOrColon = 195
    RULE_elementPatternPredicate = 196
    RULE_elementPatternWhereClause = 197
    RULE_elementPropertySpecification = 198
    RULE_propertyKeyValuePairList = 199
    RULE_propertyKeyValuePair = 200
    RULE_edgePattern = 201
    RULE_fullEdgePattern = 202
    RULE_fullEdgePointingLeft = 203
    RULE_fullEdgeUndirected = 204
    RULE_fullEdgePointingRight = 205
    RULE_fullEdgeLeftOrUndirected = 206
    RULE_fullEdgeUndirectedOrRight = 207
    RULE_fullEdgeLeftOrRight = 208
    RULE_fullEdgeAnyDirection = 209
    RULE_abbreviatedEdgePattern = 210
    RULE_parenthesizedPathPatternExpression = 211
    RULE_subpathVariableDeclaration = 212
    RULE_parenthesizedPathPatternWhereClause = 213
    RULE_labelExpression = 214
    RULE_pathVariableReference = 215
    RULE_elementVariableReference = 216
    RULE_graphPatternQuantifier = 217
    RULE_fixedQuantifier = 218
    RULE_generalQuantifier = 219
    RULE_lowerBound = 220
    RULE_upperBound = 221
    RULE_simplifiedPathPatternExpression = 222
    RULE_simplifiedDefaultingLeft = 223
    RULE_simplifiedDefaultingUndirected = 224
    RULE_simplifiedDefaultingRight = 225
    RULE_simplifiedDefaultingLeftOrUndirected = 226
    RULE_simplifiedDefaultingUndirectedOrRight = 227
    RULE_simplifiedDefaultingLeftOrRight = 228
    RULE_simplifiedDefaultingAnyDirection = 229
    RULE_simplifiedContents = 230
    RULE_simplifiedPathUnion = 231
    RULE_simplifiedMultisetAlternation = 232
    RULE_simplifiedTerm = 233
    RULE_simplifiedFactorLow = 234
    RULE_simplifiedFactorHigh = 235
    RULE_simplifiedQuantified = 236
    RULE_simplifiedQuestioned = 237
    RULE_simplifiedTertiary = 238
    RULE_simplifiedDirectionOverride = 239
    RULE_simplifiedOverrideLeft = 240
    RULE_simplifiedOverrideUndirected = 241
    RULE_simplifiedOverrideRight = 242
    RULE_simplifiedOverrideLeftOrUndirected = 243
    RULE_simplifiedOverrideUndirectedOrRight = 244
    RULE_simplifiedOverrideLeftOrRight = 245
    RULE_simplifiedOverrideAnyDirection = 246
    RULE_simplifiedSecondary = 247
    RULE_simplifiedNegation = 248
    RULE_simplifiedPrimary = 249
    RULE_whereClause = 250
    RULE_yieldClause = 251
    RULE_yieldItemList = 252
    RULE_yieldItem = 253
    RULE_yieldItemName = 254
    RULE_yieldItemAlias = 255
    RULE_groupByClause = 256
    RULE_groupingElementList = 257
    RULE_groupingElement = 258
    RULE_emptyGroupingSet = 259
    RULE_orderByClause = 260
    RULE_sortSpecificationList = 261
    RULE_sortSpecification = 262
    RULE_sortKey = 263
    RULE_orderingSpecification = 264
    RULE_nullOrdering = 265
    RULE_limitClause = 266
    RULE_offsetClause = 267
    RULE_offsetSynonym = 268
    RULE_schemaReference = 269
    RULE_absoluteCatalogSchemaReference = 270
    RULE_catalogSchemaParentAndName = 271
    RULE_relativeCatalogSchemaReference = 272
    RULE_predefinedSchemaReference = 273
    RULE_absoluteDirectoryPath = 274
    RULE_relativeDirectoryPath = 275
    RULE_simpleDirectoryPath = 276
    RULE_graphReference = 277
    RULE_catalogGraphParentAndName = 278
    RULE_homeGraph = 279
    RULE_graphTypeReference = 280
    RULE_catalogGraphTypeParentAndName = 281
    RULE_bindingTableReference = 282
    RULE_procedureReference = 283
    RULE_catalogProcedureParentAndName = 284
    RULE_catalogObjectParentReference = 285
    RULE_referenceParameterSpecification = 286
    RULE_nestedGraphTypeSpecification = 287
    RULE_graphTypeSpecificationBody = 288
    RULE_elementTypeList = 289
    RULE_elementTypeSpecification = 290
    RULE_nodeTypeSpecification = 291
    RULE_nodeTypePattern = 292
    RULE_nodeTypePhrase = 293
    RULE_nodeTypePhraseFiller = 294
    RULE_nodeTypeFiller = 295
    RULE_localNodeTypeAlias = 296
    RULE_nodeTypeImpliedContent = 297
    RULE_nodeTypeKeyLabelSet = 298
    RULE_nodeTypeLabelSet = 299
    RULE_nodeTypePropertyTypes = 300
    RULE_edgeTypeSpecification = 301
    RULE_edgeTypePattern = 302
    RULE_edgeTypePhrase = 303
    RULE_edgeTypePhraseFiller = 304
    RULE_edgeTypeFiller = 305
    RULE_edgeTypeImpliedContent = 306
    RULE_edgeTypeKeyLabelSet = 307
    RULE_edgeTypeLabelSet = 308
    RULE_edgeTypePropertyTypes = 309
    RULE_edgeTypePatternDirected = 310
    RULE_edgeTypePatternPointingRight = 311
    RULE_edgeTypePatternPointingLeft = 312
    RULE_edgeTypePatternUndirected = 313
    RULE_arcTypePointingRight = 314
    RULE_arcTypePointingLeft = 315
    RULE_arcTypeUndirected = 316
    RULE_sourceNodeTypeReference = 317
    RULE_destinationNodeTypeReference = 318
    RULE_edgeKind = 319
    RULE_endpointPairPhrase = 320
    RULE_endpointPair = 321
    RULE_endpointPairDirected = 322
    RULE_endpointPairPointingRight = 323
    RULE_endpointPairPointingLeft = 324
    RULE_endpointPairUndirected = 325
    RULE_connectorPointingRight = 326
    RULE_connectorUndirected = 327
    RULE_sourceNodeTypeAlias = 328
    RULE_destinationNodeTypeAlias = 329
    RULE_labelSetPhrase = 330
    RULE_labelSetSpecification = 331
    RULE_propertyTypesSpecification = 332
    RULE_propertyTypeList = 333
    RULE_propertyType = 334
    RULE_propertyValueType = 335
    RULE_bindingTableType = 336
    RULE_valueType = 337
    RULE_typed = 338
    RULE_predefinedType = 339
    RULE_booleanType = 340
    RULE_characterStringType = 341
    RULE_byteStringType = 342
    RULE_minLength = 343
    RULE_maxLength = 344
    RULE_fixedLength = 345
    RULE_numericType = 346
    RULE_exactNumericType = 347
    RULE_binaryExactNumericType = 348
    RULE_signedBinaryExactNumericType = 349
    RULE_unsignedBinaryExactNumericType = 350
    RULE_verboseBinaryExactNumericType = 351
    RULE_decimalExactNumericType = 352
    RULE_precision = 353
    RULE_scale = 354
    RULE_approximateNumericType = 355
    RULE_temporalType = 356
    RULE_temporalInstantType = 357
    RULE_datetimeType = 358
    RULE_localdatetimeType = 359
    RULE_dateType = 360
    RULE_timeType = 361
    RULE_localtimeType = 362
    RULE_temporalDurationType = 363
    RULE_temporalDurationQualifier = 364
    RULE_referenceValueType = 365
    RULE_immaterialValueType = 366
    RULE_nullType = 367
    RULE_emptyType = 368
    RULE_graphReferenceValueType = 369
    RULE_closedGraphReferenceValueType = 370
    RULE_openGraphReferenceValueType = 371
    RULE_bindingTableReferenceValueType = 372
    RULE_nodeReferenceValueType = 373
    RULE_closedNodeReferenceValueType = 374
    RULE_openNodeReferenceValueType = 375
    RULE_edgeReferenceValueType = 376
    RULE_closedEdgeReferenceValueType = 377
    RULE_openEdgeReferenceValueType = 378
    RULE_pathValueType = 379
    RULE_listValueTypeName = 380
    RULE_listValueTypeNameSynonym = 381
    RULE_recordType = 382
    RULE_fieldTypesSpecification = 383
    RULE_fieldTypeList = 384
    RULE_notNull = 385
    RULE_fieldType = 386
    RULE_searchCondition = 387
    RULE_predicate = 388
    RULE_compOp = 389
    RULE_existsPredicate = 390
    RULE_nullPredicate = 391
    RULE_nullPredicatePart2 = 392
    RULE_valueTypePredicate = 393
    RULE_valueTypePredicatePart2 = 394
    RULE_normalizedPredicatePart2 = 395
    RULE_directedPredicate = 396
    RULE_directedPredicatePart2 = 397
    RULE_labeledPredicate = 398
    RULE_labeledPredicatePart2 = 399
    RULE_isLabeledOrColon = 400
    RULE_sourceDestinationPredicate = 401
    RULE_nodeReference = 402
    RULE_sourcePredicatePart2 = 403
    RULE_destinationPredicatePart2 = 404
    RULE_edgeReference = 405
    RULE_all_differentPredicate = 406
    RULE_samePredicate = 407
    RULE_property_existsPredicate = 408
    RULE_valueExpression = 409
    RULE_valueFunction = 410
    RULE_booleanValueExpression = 411
    RULE_characterOrByteStringFunction = 412
    RULE_subCharacterOrByteString = 413
    RULE_trimSingleCharacterOrByteString = 414
    RULE_foldCharacterString = 415
    RULE_trimMultiCharacterCharacterString = 416
    RULE_normalizeCharacterString = 417
    RULE_nodeReferenceValueExpression = 418
    RULE_edgeReferenceValueExpression = 419
    RULE_aggregatingValueExpression = 420
    RULE_valueExpressionPrimary = 421
    RULE_parenthesizedValueExpression = 422
    RULE_nonParenthesizedValueExpressionPrimary = 423
    RULE_nonParenthesizedValueExpressionPrimarySpecialCase = 424
    RULE_unsignedValueSpecification = 425
    RULE_nonNegativeIntegerSpecification = 426
    RULE_generalValueSpecification = 427
    RULE_dynamicParameterSpecification = 428
    RULE_letValueExpression = 429
    RULE_valueQueryExpression = 430
    RULE_caseExpression = 431
    RULE_caseAbbreviation = 432
    RULE_caseSpecification = 433
    RULE_simpleCase = 434
    RULE_searchedCase = 435
    RULE_simpleWhenClause = 436
    RULE_searchedWhenClause = 437
    RULE_elseClause = 438
    RULE_caseOperand = 439
    RULE_whenOperandList = 440
    RULE_whenOperand = 441
    RULE_result = 442
    RULE_resultExpression = 443
    RULE_castSpecification = 444
    RULE_castOperand = 445
    RULE_castTarget = 446
    RULE_aggregateFunction = 447
    RULE_generalSetFunction = 448
    RULE_binarySetFunction = 449
    RULE_generalSetFunctionType = 450
    RULE_setQuantifier = 451
    RULE_binarySetFunctionType = 452
    RULE_dependentValueExpression = 453
    RULE_independentValueExpression = 454
    RULE_element_idFunction = 455
    RULE_bindingVariableReference = 456
    RULE_pathValueExpression = 457
    RULE_pathValueConstructor = 458
    RULE_pathValueConstructorByEnumeration = 459
    RULE_pathElementList = 460
    RULE_pathElementListStart = 461
    RULE_pathElementListStep = 462
    RULE_listValueExpression = 463
    RULE_listValueFunction = 464
    RULE_trimListFunction = 465
    RULE_elementsFunction = 466
    RULE_listValueConstructor = 467
    RULE_listValueConstructorByEnumeration = 468
    RULE_listElementList = 469
    RULE_listElement = 470
    RULE_recordConstructor = 471
    RULE_fieldsSpecification = 472
    RULE_fieldList = 473
    RULE_field = 474
    RULE_truthValue = 475
    RULE_numericValueExpression = 476
    RULE_numericValueFunction = 477
    RULE_lengthExpression = 478
    RULE_cardinalityExpression = 479
    RULE_cardinalityExpressionArgument = 480
    RULE_charLengthExpression = 481
    RULE_byteLengthExpression = 482
    RULE_pathLengthExpression = 483
    RULE_absoluteValueExpression = 484
    RULE_modulusExpression = 485
    RULE_numericValueExpressionDividend = 486
    RULE_numericValueExpressionDivisor = 487
    RULE_trigonometricFunction = 488
    RULE_trigonometricFunctionName = 489
    RULE_generalLogarithmFunction = 490
    RULE_generalLogarithmBase = 491
    RULE_generalLogarithmArgument = 492
    RULE_commonLogarithm = 493
    RULE_naturalLogarithm = 494
    RULE_exponentialFunction = 495
    RULE_powerFunction = 496
    RULE_numericValueExpressionBase = 497
    RULE_numericValueExpressionExponent = 498
    RULE_squareRoot = 499
    RULE_floorFunction = 500
    RULE_ceilingFunction = 501
    RULE_characterStringValueExpression = 502
    RULE_byteStringValueExpression = 503
    RULE_trimOperands = 504
    RULE_trimCharacterOrByteStringSource = 505
    RULE_trimSpecification = 506
    RULE_trimCharacterOrByteString = 507
    RULE_normalForm = 508
    RULE_stringLength = 509
    RULE_datetimeValueExpression = 510
    RULE_datetimeValueFunction = 511
    RULE_dateFunction = 512
    RULE_timeFunction = 513
    RULE_localtimeFunction = 514
    RULE_datetimeFunction = 515
    RULE_localdatetimeFunction = 516
    RULE_dateFunctionParameters = 517
    RULE_timeFunctionParameters = 518
    RULE_datetimeFunctionParameters = 519
    RULE_durationValueExpression = 520
    RULE_datetimeSubtraction = 521
    RULE_datetimeSubtractionParameters = 522
    RULE_datetimeValueExpression1 = 523
    RULE_datetimeValueExpression2 = 524
    RULE_durationValueFunction = 525
    RULE_durationFunction = 526
    RULE_durationFunctionParameters = 527
    RULE_objectName = 528
    RULE_objectNameOrBindingVariable = 529
    RULE_directoryName = 530
    RULE_schemaName = 531
    RULE_graphName = 532
    RULE_delimitedGraphName = 533
    RULE_graphTypeName = 534
    RULE_nodeTypeName = 535
    RULE_edgeTypeName = 536
    RULE_bindingTableName = 537
    RULE_delimitedBindingTableName = 538
    RULE_procedureName = 539
    RULE_labelName = 540
    RULE_propertyName = 541
    RULE_fieldName = 542
    RULE_elementVariable = 543
    RULE_pathVariable = 544
    RULE_subpathVariable = 545
    RULE_bindingVariable = 546
    RULE_unsignedLiteral = 547
    RULE_generalLiteral = 548
    RULE_temporalLiteral = 549
    RULE_dateLiteral = 550
    RULE_timeLiteral = 551
    RULE_datetimeLiteral = 552
    RULE_listLiteral = 553
    RULE_recordLiteral = 554
    RULE_identifier = 555
    RULE_regularIdentifier = 556
    RULE_timeZoneString = 557
    RULE_characterStringLiteral = 558
    RULE_unsignedNumericLiteral = 559
    RULE_exactNumericLiteral = 560
    RULE_approximateNumericLiteral = 561
    RULE_unsignedInteger = 562
    RULE_unsignedDecimalInteger = 563
    RULE_nullLiteral = 564
    RULE_dateString = 565
    RULE_timeString = 566
    RULE_datetimeString = 567
    RULE_durationLiteral = 568
    RULE_durationString = 569
    RULE_nodeSynonym = 570
    RULE_edgesSynonym = 571
    RULE_edgeSynonym = 572
    RULE_nonReservedWords = 573

    ruleNames = [
        "gqlProgram",
        "programActivity",
        "sessionActivity",
        "transactionActivity",
        "endTransactionCommand",
        "sessionSetCommand",
        "sessionSetSchemaClause",
        "sessionSetGraphClause",
        "sessionSetTimeZoneClause",
        "setTimeZoneValue",
        "sessionSetParameterClause",
        "sessionSetGraphParameterClause",
        "sessionSetBindingTableParameterClause",
        "sessionSetValueParameterClause",
        "sessionSetParameterName",
        "sessionResetCommand",
        "sessionResetArguments",
        "sessionCloseCommand",
        "sessionParameterSpecification",
        "startTransactionCommand",
        "transactionCharacteristics",
        "transactionMode",
        "transactionAccessMode",
        "rollbackCommand",
        "commitCommand",
        "nestedProcedureSpecification",
        "procedureSpecification",
        "nestedDataModifyingProcedureSpecification",
        "nestedQuerySpecification",
        "procedureBody",
        "bindingVariableDefinitionBlock",
        "bindingVariableDefinition",
        "statementBlock",
        "statement",
        "nextStatement",
        "graphVariableDefinition",
        "optTypedGraphInitializer",
        "graphInitializer",
        "bindingTableVariableDefinition",
        "optTypedBindingTableInitializer",
        "bindingTableInitializer",
        "valueVariableDefinition",
        "optTypedValueInitializer",
        "valueInitializer",
        "graphExpression",
        "currentGraph",
        "bindingTableExpression",
        "nestedBindingTableQuerySpecification",
        "objectExpressionPrimary",
        "linearCatalogModifyingStatement",
        "simpleCatalogModifyingStatement",
        "primitiveCatalogModifyingStatement",
        "createSchemaStatement",
        "dropSchemaStatement",
        "createGraphStatement",
        "openGraphType",
        "ofGraphType",
        "graphTypeLikeGraph",
        "graphSource",
        "dropGraphStatement",
        "createGraphTypeStatement",
        "graphTypeSource",
        "copyOfGraphType",
        "dropGraphTypeStatement",
        "callCatalogModifyingProcedureStatement",
        "linearDataModifyingStatement",
        "focusedLinearDataModifyingStatement",
        "focusedLinearDataModifyingStatementBody",
        "focusedNestedDataModifyingProcedureSpecification",
        "ambientLinearDataModifyingStatement",
        "ambientLinearDataModifyingStatementBody",
        "simpleLinearDataAccessingStatement",
        "simpleDataAccessingStatement",
        "simpleDataModifyingStatement",
        "primitiveDataModifyingStatement",
        "insertStatement",
        "setStatement",
        "setItemList",
        "setItem",
        "setPropertyItem",
        "setAllPropertiesItem",
        "setLabelItem",
        "removeStatement",
        "removeItemList",
        "removeItem",
        "removePropertyItem",
        "removeLabelItem",
        "deleteStatement",
        "deleteItemList",
        "deleteItem",
        "callDataModifyingProcedureStatement",
        "compositeQueryStatement",
        "compositeQueryExpression",
        "queryConjunction",
        "setOperator",
        "compositeQueryPrimary",
        "linearQueryStatement",
        "focusedLinearQueryStatement",
        "focusedLinearQueryStatementPart",
        "focusedLinearQueryAndPrimitiveResultStatementPart",
        "focusedPrimitiveResultStatement",
        "focusedNestedQuerySpecification",
        "ambientLinearQueryStatement",
        "simpleLinearQueryStatement",
        "simpleQueryStatement",
        "primitiveQueryStatement",
        "matchStatement",
        "simpleMatchStatement",
        "optionalMatchStatement",
        "optionalOperand",
        "matchStatementBlock",
        "callQueryStatement",
        "filterStatement",
        "letStatement",
        "letVariableDefinitionList",
        "letVariableDefinition",
        "forStatement",
        "forItem",
        "forItemAlias",
        "forItemSource",
        "forOrdinalityOrOffset",
        "orderByAndPageStatement",
        "primitiveResultStatement",
        "returnStatement",
        "returnStatementBody",
        "returnItemList",
        "returnItem",
        "returnItemAlias",
        "selectStatement",
        "selectItemList",
        "selectItem",
        "selectItemAlias",
        "havingClause",
        "selectStatementBody",
        "selectGraphMatchList",
        "selectGraphMatch",
        "selectQuerySpecification",
        "callProcedureStatement",
        "procedureCall",
        "inlineProcedureCall",
        "variableScopeClause",
        "bindingVariableReferenceList",
        "namedProcedureCall",
        "procedureArgumentList",
        "procedureArgument",
        "atSchemaClause",
        "useGraphClause",
        "graphPatternBindingTable",
        "graphPatternYieldClause",
        "graphPatternYieldItemList",
        "graphPatternYieldItem",
        "graphPattern",
        "matchMode",
        "repeatableElementsMatchMode",
        "differentEdgesMatchMode",
        "elementBindingsOrElements",
        "edgeBindingsOrEdges",
        "pathPatternList",
        "pathPattern",
        "pathVariableDeclaration",
        "keepClause",
        "graphPatternWhereClause",
        "insertGraphPattern",
        "insertPathPatternList",
        "insertPathPattern",
        "insertNodePattern",
        "insertEdgePattern",
        "insertEdgePointingLeft",
        "insertEdgePointingRight",
        "insertEdgeUndirected",
        "insertElementPatternFiller",
        "labelAndPropertySetSpecification",
        "pathPatternPrefix",
        "pathModePrefix",
        "pathMode",
        "pathSearchPrefix",
        "allPathSearch",
        "pathOrPaths",
        "anyPathSearch",
        "numberOfPaths",
        "shortestPathSearch",
        "allShortestPathSearch",
        "anyShortestPathSearch",
        "countedShortestPathSearch",
        "countedShortestGroupSearch",
        "numberOfGroups",
        "pathPatternExpression",
        "pathTerm",
        "pathFactor",
        "pathPrimary",
        "elementPattern",
        "nodePattern",
        "elementPatternFiller",
        "elementVariableDeclaration",
        "isLabelExpression",
        "isOrColon",
        "elementPatternPredicate",
        "elementPatternWhereClause",
        "elementPropertySpecification",
        "propertyKeyValuePairList",
        "propertyKeyValuePair",
        "edgePattern",
        "fullEdgePattern",
        "fullEdgePointingLeft",
        "fullEdgeUndirected",
        "fullEdgePointingRight",
        "fullEdgeLeftOrUndirected",
        "fullEdgeUndirectedOrRight",
        "fullEdgeLeftOrRight",
        "fullEdgeAnyDirection",
        "abbreviatedEdgePattern",
        "parenthesizedPathPatternExpression",
        "subpathVariableDeclaration",
        "parenthesizedPathPatternWhereClause",
        "labelExpression",
        "pathVariableReference",
        "elementVariableReference",
        "graphPatternQuantifier",
        "fixedQuantifier",
        "generalQuantifier",
        "lowerBound",
        "upperBound",
        "simplifiedPathPatternExpression",
        "simplifiedDefaultingLeft",
        "simplifiedDefaultingUndirected",
        "simplifiedDefaultingRight",
        "simplifiedDefaultingLeftOrUndirected",
        "simplifiedDefaultingUndirectedOrRight",
        "simplifiedDefaultingLeftOrRight",
        "simplifiedDefaultingAnyDirection",
        "simplifiedContents",
        "simplifiedPathUnion",
        "simplifiedMultisetAlternation",
        "simplifiedTerm",
        "simplifiedFactorLow",
        "simplifiedFactorHigh",
        "simplifiedQuantified",
        "simplifiedQuestioned",
        "simplifiedTertiary",
        "simplifiedDirectionOverride",
        "simplifiedOverrideLeft",
        "simplifiedOverrideUndirected",
        "simplifiedOverrideRight",
        "simplifiedOverrideLeftOrUndirected",
        "simplifiedOverrideUndirectedOrRight",
        "simplifiedOverrideLeftOrRight",
        "simplifiedOverrideAnyDirection",
        "simplifiedSecondary",
        "simplifiedNegation",
        "simplifiedPrimary",
        "whereClause",
        "yieldClause",
        "yieldItemList",
        "yieldItem",
        "yieldItemName",
        "yieldItemAlias",
        "groupByClause",
        "groupingElementList",
        "groupingElement",
        "emptyGroupingSet",
        "orderByClause",
        "sortSpecificationList",
        "sortSpecification",
        "sortKey",
        "orderingSpecification",
        "nullOrdering",
        "limitClause",
        "offsetClause",
        "offsetSynonym",
        "schemaReference",
        "absoluteCatalogSchemaReference",
        "catalogSchemaParentAndName",
        "relativeCatalogSchemaReference",
        "predefinedSchemaReference",
        "absoluteDirectoryPath",
        "relativeDirectoryPath",
        "simpleDirectoryPath",
        "graphReference",
        "catalogGraphParentAndName",
        "homeGraph",
        "graphTypeReference",
        "catalogGraphTypeParentAndName",
        "bindingTableReference",
        "procedureReference",
        "catalogProcedureParentAndName",
        "catalogObjectParentReference",
        "referenceParameterSpecification",
        "nestedGraphTypeSpecification",
        "graphTypeSpecificationBody",
        "elementTypeList",
        "elementTypeSpecification",
        "nodeTypeSpecification",
        "nodeTypePattern",
        "nodeTypePhrase",
        "nodeTypePhraseFiller",
        "nodeTypeFiller",
        "localNodeTypeAlias",
        "nodeTypeImpliedContent",
        "nodeTypeKeyLabelSet",
        "nodeTypeLabelSet",
        "nodeTypePropertyTypes",
        "edgeTypeSpecification",
        "edgeTypePattern",
        "edgeTypePhrase",
        "edgeTypePhraseFiller",
        "edgeTypeFiller",
        "edgeTypeImpliedContent",
        "edgeTypeKeyLabelSet",
        "edgeTypeLabelSet",
        "edgeTypePropertyTypes",
        "edgeTypePatternDirected",
        "edgeTypePatternPointingRight",
        "edgeTypePatternPointingLeft",
        "edgeTypePatternUndirected",
        "arcTypePointingRight",
        "arcTypePointingLeft",
        "arcTypeUndirected",
        "sourceNodeTypeReference",
        "destinationNodeTypeReference",
        "edgeKind",
        "endpointPairPhrase",
        "endpointPair",
        "endpointPairDirected",
        "endpointPairPointingRight",
        "endpointPairPointingLeft",
        "endpointPairUndirected",
        "connectorPointingRight",
        "connectorUndirected",
        "sourceNodeTypeAlias",
        "destinationNodeTypeAlias",
        "labelSetPhrase",
        "labelSetSpecification",
        "propertyTypesSpecification",
        "propertyTypeList",
        "propertyType",
        "propertyValueType",
        "bindingTableType",
        "valueType",
        "typed",
        "predefinedType",
        "booleanType",
        "characterStringType",
        "byteStringType",
        "minLength",
        "maxLength",
        "fixedLength",
        "numericType",
        "exactNumericType",
        "binaryExactNumericType",
        "signedBinaryExactNumericType",
        "unsignedBinaryExactNumericType",
        "verboseBinaryExactNumericType",
        "decimalExactNumericType",
        "precision",
        "scale",
        "approximateNumericType",
        "temporalType",
        "temporalInstantType",
        "datetimeType",
        "localdatetimeType",
        "dateType",
        "timeType",
        "localtimeType",
        "temporalDurationType",
        "temporalDurationQualifier",
        "referenceValueType",
        "immaterialValueType",
        "nullType",
        "emptyType",
        "graphReferenceValueType",
        "closedGraphReferenceValueType",
        "openGraphReferenceValueType",
        "bindingTableReferenceValueType",
        "nodeReferenceValueType",
        "closedNodeReferenceValueType",
        "openNodeReferenceValueType",
        "edgeReferenceValueType",
        "closedEdgeReferenceValueType",
        "openEdgeReferenceValueType",
        "pathValueType",
        "listValueTypeName",
        "listValueTypeNameSynonym",
        "recordType",
        "fieldTypesSpecification",
        "fieldTypeList",
        "notNull",
        "fieldType",
        "searchCondition",
        "predicate",
        "compOp",
        "existsPredicate",
        "nullPredicate",
        "nullPredicatePart2",
        "valueTypePredicate",
        "valueTypePredicatePart2",
        "normalizedPredicatePart2",
        "directedPredicate",
        "directedPredicatePart2",
        "labeledPredicate",
        "labeledPredicatePart2",
        "isLabeledOrColon",
        "sourceDestinationPredicate",
        "nodeReference",
        "sourcePredicatePart2",
        "destinationPredicatePart2",
        "edgeReference",
        "all_differentPredicate",
        "samePredicate",
        "property_existsPredicate",
        "valueExpression",
        "valueFunction",
        "booleanValueExpression",
        "characterOrByteStringFunction",
        "subCharacterOrByteString",
        "trimSingleCharacterOrByteString",
        "foldCharacterString",
        "trimMultiCharacterCharacterString",
        "normalizeCharacterString",
        "nodeReferenceValueExpression",
        "edgeReferenceValueExpression",
        "aggregatingValueExpression",
        "valueExpressionPrimary",
        "parenthesizedValueExpression",
        "nonParenthesizedValueExpressionPrimary",
        "nonParenthesizedValueExpressionPrimarySpecialCase",
        "unsignedValueSpecification",
        "nonNegativeIntegerSpecification",
        "generalValueSpecification",
        "dynamicParameterSpecification",
        "letValueExpression",
        "valueQueryExpression",
        "caseExpression",
        "caseAbbreviation",
        "caseSpecification",
        "simpleCase",
        "searchedCase",
        "simpleWhenClause",
        "searchedWhenClause",
        "elseClause",
        "caseOperand",
        "whenOperandList",
        "whenOperand",
        "result",
        "resultExpression",
        "castSpecification",
        "castOperand",
        "castTarget",
        "aggregateFunction",
        "generalSetFunction",
        "binarySetFunction",
        "generalSetFunctionType",
        "setQuantifier",
        "binarySetFunctionType",
        "dependentValueExpression",
        "independentValueExpression",
        "element_idFunction",
        "bindingVariableReference",
        "pathValueExpression",
        "pathValueConstructor",
        "pathValueConstructorByEnumeration",
        "pathElementList",
        "pathElementListStart",
        "pathElementListStep",
        "listValueExpression",
        "listValueFunction",
        "trimListFunction",
        "elementsFunction",
        "listValueConstructor",
        "listValueConstructorByEnumeration",
        "listElementList",
        "listElement",
        "recordConstructor",
        "fieldsSpecification",
        "fieldList",
        "field",
        "truthValue",
        "numericValueExpression",
        "numericValueFunction",
        "lengthExpression",
        "cardinalityExpression",
        "cardinalityExpressionArgument",
        "charLengthExpression",
        "byteLengthExpression",
        "pathLengthExpression",
        "absoluteValueExpression",
        "modulusExpression",
        "numericValueExpressionDividend",
        "numericValueExpressionDivisor",
        "trigonometricFunction",
        "trigonometricFunctionName",
        "generalLogarithmFunction",
        "generalLogarithmBase",
        "generalLogarithmArgument",
        "commonLogarithm",
        "naturalLogarithm",
        "exponentialFunction",
        "powerFunction",
        "numericValueExpressionBase",
        "numericValueExpressionExponent",
        "squareRoot",
        "floorFunction",
        "ceilingFunction",
        "characterStringValueExpression",
        "byteStringValueExpression",
        "trimOperands",
        "trimCharacterOrByteStringSource",
        "trimSpecification",
        "trimCharacterOrByteString",
        "normalForm",
        "stringLength",
        "datetimeValueExpression",
        "datetimeValueFunction",
        "dateFunction",
        "timeFunction",
        "localtimeFunction",
        "datetimeFunction",
        "localdatetimeFunction",
        "dateFunctionParameters",
        "timeFunctionParameters",
        "datetimeFunctionParameters",
        "durationValueExpression",
        "datetimeSubtraction",
        "datetimeSubtractionParameters",
        "datetimeValueExpression1",
        "datetimeValueExpression2",
        "durationValueFunction",
        "durationFunction",
        "durationFunctionParameters",
        "objectName",
        "objectNameOrBindingVariable",
        "directoryName",
        "schemaName",
        "graphName",
        "delimitedGraphName",
        "graphTypeName",
        "nodeTypeName",
        "edgeTypeName",
        "bindingTableName",
        "delimitedBindingTableName",
        "procedureName",
        "labelName",
        "propertyName",
        "fieldName",
        "elementVariable",
        "pathVariable",
        "subpathVariable",
        "bindingVariable",
        "unsignedLiteral",
        "generalLiteral",
        "temporalLiteral",
        "dateLiteral",
        "timeLiteral",
        "datetimeLiteral",
        "listLiteral",
        "recordLiteral",
        "identifier",
        "regularIdentifier",
        "timeZoneString",
        "characterStringLiteral",
        "unsignedNumericLiteral",
        "exactNumericLiteral",
        "approximateNumericLiteral",
        "unsignedInteger",
        "unsignedDecimalInteger",
        "nullLiteral",
        "dateString",
        "timeString",
        "datetimeString",
        "durationLiteral",
        "durationString",
        "nodeSynonym",
        "edgesSynonym",
        "edgeSynonym",
        "nonReservedWords",
    ]

    EOF = Token.EOF
    IMPLIES = 1
    BOOLEAN_LITERAL = 2
    SINGLE_QUOTED_CHARACTER_SEQUENCE = 3
    DOUBLE_QUOTED_CHARACTER_SEQUENCE = 4
    ACCENT_QUOTED_CHARACTER_SEQUENCE = 5
    NO_ESCAPE = 6
    BYTE_STRING_LITERAL = 7
    UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX = 8
    UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX = 9
    UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX = 10
    UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX = 11
    UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX = 12
    UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX = 13
    UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX = 14
    UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX = 15
    UNSIGNED_DECIMAL_INTEGER = 16
    UNSIGNED_HEXADECIMAL_INTEGER = 17
    UNSIGNED_OCTAL_INTEGER = 18
    UNSIGNED_BINARY_INTEGER = 19
    ABS = 20
    ACOS = 21
    ALL = 22
    ALL_DIFFERENT = 23
    AND = 24
    ANY = 25
    ARRAY = 26
    AS = 27
    ASC = 28
    ASCENDING = 29
    ASIN = 30
    AT = 31
    ATAN = 32
    AVG = 33
    BIG = 34
    BIGINT = 35
    BINARY = 36
    BOOL = 37
    BOOLEAN = 38
    BOTH = 39
    BTRIM = 40
    BY = 41
    BYTE_LENGTH = 42
    BYTES = 43
    CALL = 44
    CARDINALITY = 45
    CASE = 46
    CAST = 47
    CEIL = 48
    CEILING = 49
    CHAR = 50
    CHAR_LENGTH = 51
    CHARACTER_LENGTH = 52
    CHARACTERISTICS = 53
    CLOSE = 54
    COALESCE = 55
    COLLECT_LIST = 56
    COMMIT = 57
    COPY = 58
    COS = 59
    COSH = 60
    COT = 61
    COUNT = 62
    CREATE = 63
    CURRENT_DATE = 64
    CURRENT_GRAPH = 65
    CURRENT_PROPERTY_GRAPH = 66
    CURRENT_SCHEMA = 67
    CURRENT_TIME = 68
    CURRENT_TIMESTAMP = 69
    DATE = 70
    DATETIME = 71
    DAY = 72
    DEC = 73
    DECIMAL = 74
    DEGREES = 75
    DELETE = 76
    DESC = 77
    DESCENDING = 78
    DETACH = 79
    DISTINCT = 80
    DOUBLE = 81
    DROP = 82
    DURATION = 83
    DURATION_BETWEEN = 84
    ELEMENT_ID = 85
    ELSE = 86
    END = 87
    EXCEPT = 88
    EXISTS = 89
    EXP = 90
    FILTER = 91
    FINISH = 92
    FLOAT = 93
    FLOAT16 = 94
    FLOAT32 = 95
    FLOAT64 = 96
    FLOAT128 = 97
    FLOAT256 = 98
    FLOOR = 99
    FOR = 100
    FROM = 101
    GROUP = 102
    HAVING = 103
    HOME_GRAPH = 104
    HOME_PROPERTY_GRAPH = 105
    HOME_SCHEMA = 106
    HOUR = 107
    IF = 108
    IN = 109
    INSERT = 110
    INT = 111
    INTEGER = 112
    INT8 = 113
    INTEGER8 = 114
    INT16 = 115
    INTEGER16 = 116
    INT32 = 117
    INTEGER32 = 118
    INT64 = 119
    INTEGER64 = 120
    INT128 = 121
    INTEGER128 = 122
    INT256 = 123
    INTEGER256 = 124
    INTERSECT = 125
    INTERVAL = 126
    IS = 127
    LEADING = 128
    LEFT = 129
    LET = 130
    LIKE = 131
    LIMIT = 132
    LIST = 133
    LN = 134
    LOCAL = 135
    LOCAL_DATETIME = 136
    LOCAL_TIME = 137
    LOCAL_TIMESTAMP = 138
    LOG_KW = 139
    LOG10 = 140
    LOWER = 141
    LTRIM = 142
    MATCH = 143
    MAX = 144
    MIN = 145
    MINUTE = 146
    MOD = 147
    MONTH = 148
    NEXT = 149
    NODETACH = 150
    NORMALIZE = 151
    NOT = 152
    NOTHING = 153
    NULL_KW = 154
    NULLS = 155
    NULLIF = 156
    OCTET_LENGTH = 157
    OF = 158
    OFFSET = 159
    OPTIONAL = 160
    OR = 161
    ORDER = 162
    OTHERWISE = 163
    PARAMETER = 164
    PARAMETERS = 165
    PATH = 166
    PATH_LENGTH = 167
    PATHS = 168
    PERCENTILE_CONT = 169
    PERCENTILE_DISC = 170
    POWER = 171
    PRECISION = 172
    PROPERTY_EXISTS = 173
    RADIANS = 174
    REAL = 175
    RECORD = 176
    REMOVE = 177
    REPLACE = 178
    RESET = 179
    RETURN = 180
    RIGHT = 181
    ROLLBACK = 182
    RTRIM = 183
    SAME = 184
    SCHEMA = 185
    SECOND = 186
    SELECT = 187
    SESSION = 188
    SESSION_USER = 189
    SET = 190
    SIGNED = 191
    SIN = 192
    SINH = 193
    SIZE = 194
    SKIP_RESERVED_WORD = 195
    SMALL = 196
    SMALLINT = 197
    SQRT = 198
    START = 199
    STDDEV_POP = 200
    STDDEV_SAMP = 201
    STRING = 202
    SUM = 203
    TAN = 204
    TANH = 205
    THEN = 206
    TIME = 207
    TIMESTAMP = 208
    TRAILING = 209
    TRIM = 210
    TYPED = 211
    UBIGINT = 212
    UINT = 213
    UINT8 = 214
    UINT16 = 215
    UINT32 = 216
    UINT64 = 217
    UINT128 = 218
    UINT256 = 219
    UNION = 220
    UNSIGNED = 221
    UPPER = 222
    USE = 223
    USMALLINT = 224
    VALUE = 225
    VARBINARY = 226
    VARCHAR = 227
    VARIABLE = 228
    WHEN = 229
    WHERE = 230
    WITH = 231
    XOR = 232
    YEAR = 233
    YIELD = 234
    ZONED = 235
    ZONED_DATETIME = 236
    ZONED_TIME = 237
    ABSTRACT = 238
    AGGREGATE = 239
    AGGREGATES = 240
    ALTER = 241
    CATALOG = 242
    CLEAR = 243
    CLONE = 244
    CONSTRAINT = 245
    CURRENT_ROLE = 246
    CURRENT_USER = 247
    DATA = 248
    DIRECTORY = 249
    DRYRUN = 250
    EXACT = 251
    EXISTING = 252
    FUNCTION = 253
    GQLSTATUS = 254
    GRANT = 255
    INSTANT = 256
    INFINITY_KW = 257
    NUMBER = 258
    NUMERIC = 259
    ON = 260
    OPEN = 261
    PARTITION = 262
    PROCEDURE = 263
    PRODUCT = 264
    PROJECT = 265
    QUERY = 266
    RECORDS = 267
    REFERENCE = 268
    RENAME = 269
    REVOKE = 270
    SUBSTRING = 271
    SYSTEM_USER = 272
    TEMPORAL = 273
    UNIQUE = 274
    UNIT = 275
    VALUES = 276
    ACYCLIC = 277
    BINDING = 278
    BINDINGS = 279
    CONNECTING = 280
    DESTINATION = 281
    DIFFERENT = 282
    DIRECTED = 283
    EDGE = 284
    EDGES = 285
    ELEMENT = 286
    ELEMENTS = 287
    FIRST = 288
    GRAPH = 289
    GROUPS = 290
    KEEP = 291
    LABEL = 292
    LABELED = 293
    LABELS = 294
    LAST = 295
    NFC = 296
    NFD = 297
    NFKC = 298
    NFKD = 299
    NO = 300
    NODE = 301
    NORMALIZED = 302
    ONLY = 303
    ORDINALITY = 304
    PROPERTY = 305
    READ = 306
    RELATIONSHIP = 307
    RELATIONSHIPS = 308
    REPEATABLE = 309
    SHORTEST = 310
    SIMPLE = 311
    SOURCE = 312
    TABLE = 313
    TO = 314
    TRAIL = 315
    TRANSACTION = 316
    TYPE = 317
    UNDIRECTED = 318
    VERTEX = 319
    WALK = 320
    WITHOUT = 321
    WRITE = 322
    ZONE = 323
    REGULAR_IDENTIFIER = 324
    SUBSTITUTED_PARAMETER_REFERENCE = 325
    GENERAL_PARAMETER_REFERENCE = 326
    MULTISET_ALTERNATION_OPERATOR = 327
    BRACKET_RIGHT_ARROW = 328
    BRACKET_TILDE_RIGHT_ARROW = 329
    CONCATENATION_OPERATOR = 330
    DOUBLE_COLON = 331
    DOUBLE_DOLLAR_SIGN = 332
    DOUBLE_PERIOD = 333
    GREATER_THAN_OR_EQUALS_OPERATOR = 334
    LEFT_ARROW = 335
    LEFT_ARROW_TILDE = 336
    LEFT_ARROW_BRACKET = 337
    LEFT_ARROW_TILDE_BRACKET = 338
    LEFT_MINUS_RIGHT = 339
    LEFT_MINUS_SLASH = 340
    LEFT_TILDE_SLASH = 341
    LESS_THAN_OR_EQUALS_OPERATOR = 342
    MINUS_LEFT_BRACKET = 343
    MINUS_SLASH = 344
    NOT_EQUALS_OPERATOR = 345
    RIGHT_ARROW = 346
    RIGHT_BRACKET_MINUS = 347
    RIGHT_BRACKET_TILDE = 348
    RIGHT_DOUBLE_ARROW = 349
    SLASH_MINUS = 350
    SLASH_MINUS_RIGHT = 351
    SLASH_TILDE = 352
    SLASH_TILDE_RIGHT = 353
    TILDE_LEFT_BRACKET = 354
    TILDE_RIGHT_ARROW = 355
    TILDE_SLASH = 356
    AMPERSAND = 357
    ASTERISK = 358
    COLON = 359
    COMMA = 360
    COMMERCIAL_AT = 361
    DOLLAR_SIGN = 362
    DOUBLE_QUOTE = 363
    EQUALS_OPERATOR = 364
    EXCLAMATION_MARK = 365
    RIGHT_ANGLE_BRACKET = 366
    GRAVE_ACCENT = 367
    LEFT_BRACE = 368
    LEFT_BRACKET = 369
    LEFT_PAREN = 370
    LEFT_ANGLE_BRACKET = 371
    MINUS_SIGN = 372
    PERCENT = 373
    PERIOD = 374
    PLUS_SIGN = 375
    QUESTION_MARK = 376
    QUOTE = 377
    REVERSE_SOLIDUS = 378
    RIGHT_BRACE = 379
    RIGHT_BRACKET = 380
    RIGHT_PAREN = 381
    SOLIDUS = 382
    TILDE = 383
    UNDERSCORE = 384
    VERTICAL_BAR = 385
    SP = 386
    WHITESPACE = 387
    BRACKETED_COMMENT = 388
    SIMPLE_COMMENT_SOLIDUS = 389
    SIMPLE_COMMENT_MINUS = 390

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class GqlProgramContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def programActivity(self):
            return self.getTypedRuleContext(GQLParser.ProgramActivityContext, 0)

        def EOF(self):
            return self.getToken(GQLParser.EOF, 0)

        def sessionCloseCommand(self):
            return self.getTypedRuleContext(GQLParser.SessionCloseCommandContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_gqlProgram

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGqlProgram"):
                listener.enterGqlProgram(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGqlProgram"):
                listener.exitGqlProgram(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGqlProgram"):
                return visitor.visitGqlProgram(self)
            else:
                return visitor.visitChildren(self)

    def gqlProgram(self):
        localctx = GQLParser.GqlProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_gqlProgram)
        self._la = 0  # Token type
        try:
            self.state = 1157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 1, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1148
                self.programActivity()
                self.state = 1150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 188:
                    self.state = 1149
                    self.sessionCloseCommand()

                self.state = 1152
                self.match(GQLParser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1154
                self.sessionCloseCommand()
                self.state = 1155
                self.match(GQLParser.EOF)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProgramActivityContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sessionActivity(self):
            return self.getTypedRuleContext(GQLParser.SessionActivityContext, 0)

        def transactionActivity(self):
            return self.getTypedRuleContext(GQLParser.TransactionActivityContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_programActivity

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProgramActivity"):
                listener.enterProgramActivity(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProgramActivity"):
                listener.exitProgramActivity(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProgramActivity"):
                return visitor.visitProgramActivity(self)
            else:
                return visitor.visitChildren(self)

    def programActivity(self):
        localctx = GQLParser.ProgramActivityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_programActivity)
        try:
            self.state = 1161
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [188]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1159
                self.sessionActivity()
                pass
            elif token in [
                31,
                44,
                57,
                63,
                76,
                79,
                82,
                91,
                92,
                100,
                110,
                130,
                132,
                143,
                150,
                159,
                160,
                162,
                177,
                180,
                182,
                187,
                190,
                195,
                199,
                223,
                225,
                278,
                289,
                305,
                313,
                368,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1160
                self.transactionActivity()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SessionActivityContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sessionResetCommand(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.SessionResetCommandContext)
            else:
                return self.getTypedRuleContext(GQLParser.SessionResetCommandContext, i)

        def sessionSetCommand(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.SessionSetCommandContext)
            else:
                return self.getTypedRuleContext(GQLParser.SessionSetCommandContext, i)

        def getRuleIndex(self):
            return GQLParser.RULE_sessionActivity

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSessionActivity"):
                listener.enterSessionActivity(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSessionActivity"):
                listener.exitSessionActivity(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSessionActivity"):
                return visitor.visitSessionActivity(self)
            else:
                return visitor.visitChildren(self)

    def sessionActivity(self):
        localctx = GQLParser.SessionActivityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sessionActivity)
        try:
            self.state = 1179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 6, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1164
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1163
                        self.sessionResetCommand()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1166
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 3, self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1169
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1168
                        self.sessionSetCommand()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1171
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)

                self.state = 1176
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 5, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1173
                        self.sessionResetCommand()
                    self.state = 1178
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 5, self._ctx)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransactionActivityContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startTransactionCommand(self):
            return self.getTypedRuleContext(GQLParser.StartTransactionCommandContext, 0)

        def procedureSpecification(self):
            return self.getTypedRuleContext(GQLParser.ProcedureSpecificationContext, 0)

        def endTransactionCommand(self):
            return self.getTypedRuleContext(GQLParser.EndTransactionCommandContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_transactionActivity

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTransactionActivity"):
                listener.enterTransactionActivity(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTransactionActivity"):
                listener.exitTransactionActivity(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTransactionActivity"):
                return visitor.visitTransactionActivity(self)
            else:
                return visitor.visitChildren(self)

    def transactionActivity(self):
        localctx = GQLParser.TransactionActivityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_transactionActivity)
        self._la = 0  # Token type
        try:
            self.state = 1193
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [199]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1181
                self.startTransactionCommand()
                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la - 31) & ~0x3F) == 0
                        and ((1 << (_la - 31)) & 3461332977278001153) != 0
                    )
                    or (
                        ((_la - 100) & ~0x3F) == 0
                        and ((1 << (_la - 100)) & 6342202976706233345) != 0
                    )
                    or (
                        ((_la - 177) & ~0x3F) == 0
                        and ((1 << (_la - 177)) & 351843721159689) != 0
                    )
                    or (
                        ((_la - 278) & ~0x3F) == 0
                        and ((1 << (_la - 278)) & 34493958145) != 0
                    )
                    or _la == 368
                ):
                    self.state = 1182
                    self.procedureSpecification()
                    self.state = 1184
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 57 or _la == 182:
                        self.state = 1183
                        self.endTransactionCommand()

                pass
            elif token in [
                31,
                44,
                63,
                76,
                79,
                82,
                91,
                92,
                100,
                110,
                130,
                132,
                143,
                150,
                159,
                160,
                162,
                177,
                180,
                187,
                190,
                195,
                223,
                225,
                278,
                289,
                305,
                313,
                368,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1188
                self.procedureSpecification()
                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 57 or _la == 182:
                    self.state = 1189
                    self.endTransactionCommand()

                pass
            elif token in [57, 182]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1192
                self.endTransactionCommand()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndTransactionCommandContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rollbackCommand(self):
            return self.getTypedRuleContext(GQLParser.RollbackCommandContext, 0)

        def commitCommand(self):
            return self.getTypedRuleContext(GQLParser.CommitCommandContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_endTransactionCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEndTransactionCommand"):
                listener.enterEndTransactionCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEndTransactionCommand"):
                listener.exitEndTransactionCommand(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEndTransactionCommand"):
                return visitor.visitEndTransactionCommand(self)
            else:
                return visitor.visitChildren(self)

    def endTransactionCommand(self):
        localctx = GQLParser.EndTransactionCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_endTransactionCommand)
        try:
            self.state = 1197
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [182]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1195
                self.rollbackCommand()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1196
                self.commitCommand()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SessionSetCommandContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SESSION(self):
            return self.getToken(GQLParser.SESSION, 0)

        def SET(self):
            return self.getToken(GQLParser.SET, 0)

        def sessionSetSchemaClause(self):
            return self.getTypedRuleContext(GQLParser.SessionSetSchemaClauseContext, 0)

        def sessionSetGraphClause(self):
            return self.getTypedRuleContext(GQLParser.SessionSetGraphClauseContext, 0)

        def sessionSetTimeZoneClause(self):
            return self.getTypedRuleContext(
                GQLParser.SessionSetTimeZoneClauseContext, 0
            )

        def sessionSetParameterClause(self):
            return self.getTypedRuleContext(
                GQLParser.SessionSetParameterClauseContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_sessionSetCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSessionSetCommand"):
                listener.enterSessionSetCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSessionSetCommand"):
                listener.exitSessionSetCommand(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSessionSetCommand"):
                return visitor.visitSessionSetCommand(self)
            else:
                return visitor.visitChildren(self)

    def sessionSetCommand(self):
        localctx = GQLParser.SessionSetCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_sessionSetCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(GQLParser.SESSION)
            self.state = 1200
            self.match(GQLParser.SET)
            self.state = 1205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
            if la_ == 1:
                self.state = 1201
                self.sessionSetSchemaClause()
                pass

            elif la_ == 2:
                self.state = 1202
                self.sessionSetGraphClause()
                pass

            elif la_ == 3:
                self.state = 1203
                self.sessionSetTimeZoneClause()
                pass

            elif la_ == 4:
                self.state = 1204
                self.sessionSetParameterClause()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SessionSetSchemaClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEMA(self):
            return self.getToken(GQLParser.SCHEMA, 0)

        def schemaReference(self):
            return self.getTypedRuleContext(GQLParser.SchemaReferenceContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_sessionSetSchemaClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSessionSetSchemaClause"):
                listener.enterSessionSetSchemaClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSessionSetSchemaClause"):
                listener.exitSessionSetSchemaClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSessionSetSchemaClause"):
                return visitor.visitSessionSetSchemaClause(self)
            else:
                return visitor.visitChildren(self)

    def sessionSetSchemaClause(self):
        localctx = GQLParser.SessionSetSchemaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_sessionSetSchemaClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.match(GQLParser.SCHEMA)
            self.state = 1208
            self.schemaReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SessionSetGraphClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAPH(self):
            return self.getToken(GQLParser.GRAPH, 0)

        def graphExpression(self):
            return self.getTypedRuleContext(GQLParser.GraphExpressionContext, 0)

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_sessionSetGraphClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSessionSetGraphClause"):
                listener.enterSessionSetGraphClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSessionSetGraphClause"):
                listener.exitSessionSetGraphClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSessionSetGraphClause"):
                return visitor.visitSessionSetGraphClause(self)
            else:
                return visitor.visitChildren(self)

    def sessionSetGraphClause(self):
        localctx = GQLParser.SessionSetGraphClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_sessionSetGraphClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 305:
                self.state = 1210
                self.match(GQLParser.PROPERTY)

            self.state = 1213
            self.match(GQLParser.GRAPH)
            self.state = 1214
            self.graphExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SessionSetTimeZoneClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME(self):
            return self.getToken(GQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(GQLParser.ZONE, 0)

        def setTimeZoneValue(self):
            return self.getTypedRuleContext(GQLParser.SetTimeZoneValueContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_sessionSetTimeZoneClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSessionSetTimeZoneClause"):
                listener.enterSessionSetTimeZoneClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSessionSetTimeZoneClause"):
                listener.exitSessionSetTimeZoneClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSessionSetTimeZoneClause"):
                return visitor.visitSessionSetTimeZoneClause(self)
            else:
                return visitor.visitChildren(self)

    def sessionSetTimeZoneClause(self):
        localctx = GQLParser.SessionSetTimeZoneClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 16, self.RULE_sessionSetTimeZoneClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(GQLParser.TIME)
            self.state = 1217
            self.match(GQLParser.ZONE)
            self.state = 1218
            self.setTimeZoneValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetTimeZoneValueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeZoneString(self):
            return self.getTypedRuleContext(GQLParser.TimeZoneStringContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_setTimeZoneValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetTimeZoneValue"):
                listener.enterSetTimeZoneValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetTimeZoneValue"):
                listener.exitSetTimeZoneValue(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSetTimeZoneValue"):
                return visitor.visitSetTimeZoneValue(self)
            else:
                return visitor.visitChildren(self)

    def setTimeZoneValue(self):
        localctx = GQLParser.SetTimeZoneValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_setTimeZoneValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.timeZoneString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SessionSetParameterClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sessionSetGraphParameterClause(self):
            return self.getTypedRuleContext(
                GQLParser.SessionSetGraphParameterClauseContext, 0
            )

        def sessionSetBindingTableParameterClause(self):
            return self.getTypedRuleContext(
                GQLParser.SessionSetBindingTableParameterClauseContext, 0
            )

        def sessionSetValueParameterClause(self):
            return self.getTypedRuleContext(
                GQLParser.SessionSetValueParameterClauseContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_sessionSetParameterClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSessionSetParameterClause"):
                listener.enterSessionSetParameterClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSessionSetParameterClause"):
                listener.exitSessionSetParameterClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSessionSetParameterClause"):
                return visitor.visitSessionSetParameterClause(self)
            else:
                return visitor.visitChildren(self)

    def sessionSetParameterClause(self):
        localctx = GQLParser.SessionSetParameterClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 20, self.RULE_sessionSetParameterClause)
        try:
            self.state = 1225
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [289, 305]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1222
                self.sessionSetGraphParameterClause()
                pass
            elif token in [278, 313]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1223
                self.sessionSetBindingTableParameterClause()
                pass
            elif token in [225]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1224
                self.sessionSetValueParameterClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SessionSetGraphParameterClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAPH(self):
            return self.getToken(GQLParser.GRAPH, 0)

        def sessionSetParameterName(self):
            return self.getTypedRuleContext(GQLParser.SessionSetParameterNameContext, 0)

        def optTypedGraphInitializer(self):
            return self.getTypedRuleContext(
                GQLParser.OptTypedGraphInitializerContext, 0
            )

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_sessionSetGraphParameterClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSessionSetGraphParameterClause"):
                listener.enterSessionSetGraphParameterClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSessionSetGraphParameterClause"):
                listener.exitSessionSetGraphParameterClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSessionSetGraphParameterClause"):
                return visitor.visitSessionSetGraphParameterClause(self)
            else:
                return visitor.visitChildren(self)

    def sessionSetGraphParameterClause(self):
        localctx = GQLParser.SessionSetGraphParameterClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 22, self.RULE_sessionSetGraphParameterClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 305:
                self.state = 1227
                self.match(GQLParser.PROPERTY)

            self.state = 1230
            self.match(GQLParser.GRAPH)
            self.state = 1231
            self.sessionSetParameterName()
            self.state = 1232
            self.optTypedGraphInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SessionSetBindingTableParameterClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(GQLParser.TABLE, 0)

        def sessionSetParameterName(self):
            return self.getTypedRuleContext(GQLParser.SessionSetParameterNameContext, 0)

        def optTypedBindingTableInitializer(self):
            return self.getTypedRuleContext(
                GQLParser.OptTypedBindingTableInitializerContext, 0
            )

        def BINDING(self):
            return self.getToken(GQLParser.BINDING, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_sessionSetBindingTableParameterClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSessionSetBindingTableParameterClause"):
                listener.enterSessionSetBindingTableParameterClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSessionSetBindingTableParameterClause"):
                listener.exitSessionSetBindingTableParameterClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSessionSetBindingTableParameterClause"):
                return visitor.visitSessionSetBindingTableParameterClause(self)
            else:
                return visitor.visitChildren(self)

    def sessionSetBindingTableParameterClause(self):
        localctx = GQLParser.SessionSetBindingTableParameterClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 24, self.RULE_sessionSetBindingTableParameterClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 278:
                self.state = 1234
                self.match(GQLParser.BINDING)

            self.state = 1237
            self.match(GQLParser.TABLE)
            self.state = 1238
            self.sessionSetParameterName()
            self.state = 1239
            self.optTypedBindingTableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SessionSetValueParameterClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUE(self):
            return self.getToken(GQLParser.VALUE, 0)

        def sessionSetParameterName(self):
            return self.getTypedRuleContext(GQLParser.SessionSetParameterNameContext, 0)

        def optTypedValueInitializer(self):
            return self.getTypedRuleContext(
                GQLParser.OptTypedValueInitializerContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_sessionSetValueParameterClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSessionSetValueParameterClause"):
                listener.enterSessionSetValueParameterClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSessionSetValueParameterClause"):
                listener.exitSessionSetValueParameterClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSessionSetValueParameterClause"):
                return visitor.visitSessionSetValueParameterClause(self)
            else:
                return visitor.visitChildren(self)

    def sessionSetValueParameterClause(self):
        localctx = GQLParser.SessionSetValueParameterClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 26, self.RULE_sessionSetValueParameterClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1241
            self.match(GQLParser.VALUE)
            self.state = 1242
            self.sessionSetParameterName()
            self.state = 1243
            self.optTypedValueInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SessionSetParameterNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sessionParameterSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.SessionParameterSpecificationContext, 0
            )

        def IF(self):
            return self.getToken(GQLParser.IF, 0)

        def NOT(self):
            return self.getToken(GQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(GQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_sessionSetParameterName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSessionSetParameterName"):
                listener.enterSessionSetParameterName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSessionSetParameterName"):
                listener.exitSessionSetParameterName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSessionSetParameterName"):
                return visitor.visitSessionSetParameterName(self)
            else:
                return visitor.visitChildren(self)

    def sessionSetParameterName(self):
        localctx = GQLParser.SessionSetParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_sessionSetParameterName)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 108:
                self.state = 1245
                self.match(GQLParser.IF)
                self.state = 1246
                self.match(GQLParser.NOT)
                self.state = 1247
                self.match(GQLParser.EXISTS)

            self.state = 1250
            self.sessionParameterSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SessionResetCommandContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SESSION(self):
            return self.getToken(GQLParser.SESSION, 0)

        def RESET(self):
            return self.getToken(GQLParser.RESET, 0)

        def sessionResetArguments(self):
            return self.getTypedRuleContext(GQLParser.SessionResetArgumentsContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_sessionResetCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSessionResetCommand"):
                listener.enterSessionResetCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSessionResetCommand"):
                listener.exitSessionResetCommand(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSessionResetCommand"):
                return visitor.visitSessionResetCommand(self)
            else:
                return visitor.visitChildren(self)

    def sessionResetCommand(self):
        localctx = GQLParser.SessionResetCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_sessionResetCommand)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(GQLParser.SESSION)
            self.state = 1253
            self.match(GQLParser.RESET)
            self.state = 1255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == 22
                or _la == 53
                or (
                    ((_la - 164) & ~0x3F) == 0
                    and ((1 << (_la - 164)) & 8796095119363) != 0
                )
                or (
                    ((_la - 289) & ~0x3F) == 0
                    and ((1 << (_la - 289)) & 137439019009) != 0
                )
            ):
                self.state = 1254
                self.sessionResetArguments()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SessionResetArgumentsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERS(self):
            return self.getToken(GQLParser.PARAMETERS, 0)

        def CHARACTERISTICS(self):
            return self.getToken(GQLParser.CHARACTERISTICS, 0)

        def ALL(self):
            return self.getToken(GQLParser.ALL, 0)

        def SCHEMA(self):
            return self.getToken(GQLParser.SCHEMA, 0)

        def GRAPH(self):
            return self.getToken(GQLParser.GRAPH, 0)

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def TIME(self):
            return self.getToken(GQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(GQLParser.ZONE, 0)

        def sessionParameterSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.SessionParameterSpecificationContext, 0
            )

        def PARAMETER(self):
            return self.getToken(GQLParser.PARAMETER, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_sessionResetArguments

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSessionResetArguments"):
                listener.enterSessionResetArguments(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSessionResetArguments"):
                listener.exitSessionResetArguments(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSessionResetArguments"):
                return visitor.visitSessionResetArguments(self)
            else:
                return visitor.visitChildren(self)

    def sessionResetArguments(self):
        localctx = GQLParser.SessionResetArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_sessionResetArguments)
        self._la = 0  # Token type
        try:
            self.state = 1272
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 53, 165]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 22:
                    self.state = 1257
                    self.match(GQLParser.ALL)

                self.state = 1260
                _la = self._input.LA(1)
                if not (_la == 53 or _la == 165):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1261
                self.match(GQLParser.SCHEMA)
                pass
            elif token in [289, 305]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 305:
                    self.state = 1262
                    self.match(GQLParser.PROPERTY)

                self.state = 1265
                self.match(GQLParser.GRAPH)
                pass
            elif token in [207]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1266
                self.match(GQLParser.TIME)
                self.state = 1267
                self.match(GQLParser.ZONE)
                pass
            elif token in [164, 326]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 164:
                    self.state = 1268
                    self.match(GQLParser.PARAMETER)

                self.state = 1271
                self.sessionParameterSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SessionCloseCommandContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SESSION(self):
            return self.getToken(GQLParser.SESSION, 0)

        def CLOSE(self):
            return self.getToken(GQLParser.CLOSE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_sessionCloseCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSessionCloseCommand"):
                listener.enterSessionCloseCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSessionCloseCommand"):
                listener.exitSessionCloseCommand(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSessionCloseCommand"):
                return visitor.visitSessionCloseCommand(self)
            else:
                return visitor.visitChildren(self)

    def sessionCloseCommand(self):
        localctx = GQLParser.SessionCloseCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_sessionCloseCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(GQLParser.SESSION)
            self.state = 1275
            self.match(GQLParser.CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SessionParameterSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERAL_PARAMETER_REFERENCE(self):
            return self.getToken(GQLParser.GENERAL_PARAMETER_REFERENCE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_sessionParameterSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSessionParameterSpecification"):
                listener.enterSessionParameterSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSessionParameterSpecification"):
                listener.exitSessionParameterSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSessionParameterSpecification"):
                return visitor.visitSessionParameterSpecification(self)
            else:
                return visitor.visitChildren(self)

    def sessionParameterSpecification(self):
        localctx = GQLParser.SessionParameterSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 36, self.RULE_sessionParameterSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1277
            self.match(GQLParser.GENERAL_PARAMETER_REFERENCE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StartTransactionCommandContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(GQLParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(GQLParser.TRANSACTION, 0)

        def transactionCharacteristics(self):
            return self.getTypedRuleContext(
                GQLParser.TransactionCharacteristicsContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_startTransactionCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStartTransactionCommand"):
                listener.enterStartTransactionCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStartTransactionCommand"):
                listener.exitStartTransactionCommand(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStartTransactionCommand"):
                return visitor.visitStartTransactionCommand(self)
            else:
                return visitor.visitChildren(self)

    def startTransactionCommand(self):
        localctx = GQLParser.StartTransactionCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_startTransactionCommand)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.match(GQLParser.START)
            self.state = 1280
            self.match(GQLParser.TRANSACTION)
            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 306:
                self.state = 1281
                self.transactionCharacteristics()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransactionCharacteristicsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transactionMode(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(GQLParser.TransactionModeContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_transactionCharacteristics

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTransactionCharacteristics"):
                listener.enterTransactionCharacteristics(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTransactionCharacteristics"):
                listener.exitTransactionCharacteristics(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTransactionCharacteristics"):
                return visitor.visitTransactionCharacteristics(self)
            else:
                return visitor.visitChildren(self)

    def transactionCharacteristics(self):
        localctx = GQLParser.TransactionCharacteristicsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 40, self.RULE_transactionCharacteristics)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.transactionMode()
            self.state = 1289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 1285
                self.match(GQLParser.COMMA)
                self.state = 1286
                self.transactionMode()
                self.state = 1291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransactionModeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transactionAccessMode(self):
            return self.getTypedRuleContext(GQLParser.TransactionAccessModeContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_transactionMode

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTransactionMode"):
                listener.enterTransactionMode(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTransactionMode"):
                listener.exitTransactionMode(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTransactionMode"):
                return visitor.visitTransactionMode(self)
            else:
                return visitor.visitChildren(self)

    def transactionMode(self):
        localctx = GQLParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_transactionMode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.transactionAccessMode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransactionAccessModeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(GQLParser.READ, 0)

        def ONLY(self):
            return self.getToken(GQLParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(GQLParser.WRITE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_transactionAccessMode

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTransactionAccessMode"):
                listener.enterTransactionAccessMode(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTransactionAccessMode"):
                listener.exitTransactionAccessMode(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTransactionAccessMode"):
                return visitor.visitTransactionAccessMode(self)
            else:
                return visitor.visitChildren(self)

    def transactionAccessMode(self):
        localctx = GQLParser.TransactionAccessModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_transactionAccessMode)
        try:
            self.state = 1298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1294
                self.match(GQLParser.READ)
                self.state = 1295
                self.match(GQLParser.ONLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1296
                self.match(GQLParser.READ)
                self.state = 1297
                self.match(GQLParser.WRITE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RollbackCommandContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(GQLParser.ROLLBACK, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_rollbackCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRollbackCommand"):
                listener.enterRollbackCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRollbackCommand"):
                listener.exitRollbackCommand(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRollbackCommand"):
                return visitor.visitRollbackCommand(self)
            else:
                return visitor.visitChildren(self)

    def rollbackCommand(self):
        localctx = GQLParser.RollbackCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_rollbackCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(GQLParser.ROLLBACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommitCommandContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(GQLParser.COMMIT, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_commitCommand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCommitCommand"):
                listener.enterCommitCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCommitCommand"):
                listener.exitCommitCommand(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCommitCommand"):
                return visitor.visitCommitCommand(self)
            else:
                return visitor.visitChildren(self)

    def commitCommand(self):
        localctx = GQLParser.CommitCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_commitCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.match(GQLParser.COMMIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestedProcedureSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GQLParser.LEFT_BRACE, 0)

        def procedureSpecification(self):
            return self.getTypedRuleContext(GQLParser.ProcedureSpecificationContext, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GQLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nestedProcedureSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestedProcedureSpecification"):
                listener.enterNestedProcedureSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestedProcedureSpecification"):
                listener.exitNestedProcedureSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNestedProcedureSpecification"):
                return visitor.visitNestedProcedureSpecification(self)
            else:
                return visitor.visitChildren(self)

    def nestedProcedureSpecification(self):
        localctx = GQLParser.NestedProcedureSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 50, self.RULE_nestedProcedureSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self.match(GQLParser.LEFT_BRACE)
            self.state = 1305
            self.procedureSpecification()
            self.state = 1306
            self.match(GQLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureBody(self):
            return self.getTypedRuleContext(GQLParser.ProcedureBodyContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_procedureSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProcedureSpecification"):
                listener.enterProcedureSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProcedureSpecification"):
                listener.exitProcedureSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProcedureSpecification"):
                return visitor.visitProcedureSpecification(self)
            else:
                return visitor.visitChildren(self)

    def procedureSpecification(self):
        localctx = GQLParser.ProcedureSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_procedureSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1308
            self.procedureBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestedDataModifyingProcedureSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GQLParser.LEFT_BRACE, 0)

        def procedureBody(self):
            return self.getTypedRuleContext(GQLParser.ProcedureBodyContext, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GQLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nestedDataModifyingProcedureSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestedDataModifyingProcedureSpecification"):
                listener.enterNestedDataModifyingProcedureSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestedDataModifyingProcedureSpecification"):
                listener.exitNestedDataModifyingProcedureSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNestedDataModifyingProcedureSpecification"):
                return visitor.visitNestedDataModifyingProcedureSpecification(self)
            else:
                return visitor.visitChildren(self)

    def nestedDataModifyingProcedureSpecification(self):
        localctx = GQLParser.NestedDataModifyingProcedureSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 54, self.RULE_nestedDataModifyingProcedureSpecification
        )
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            self.match(GQLParser.LEFT_BRACE)
            self.state = 1311
            self.procedureBody()
            self.state = 1312
            self.match(GQLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestedQuerySpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GQLParser.LEFT_BRACE, 0)

        def procedureBody(self):
            return self.getTypedRuleContext(GQLParser.ProcedureBodyContext, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GQLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nestedQuerySpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestedQuerySpecification"):
                listener.enterNestedQuerySpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestedQuerySpecification"):
                listener.exitNestedQuerySpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNestedQuerySpecification"):
                return visitor.visitNestedQuerySpecification(self)
            else:
                return visitor.visitChildren(self)

    def nestedQuerySpecification(self):
        localctx = GQLParser.NestedQuerySpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 56, self.RULE_nestedQuerySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.match(GQLParser.LEFT_BRACE)
            self.state = 1315
            self.procedureBody()
            self.state = 1316
            self.match(GQLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementBlock(self):
            return self.getTypedRuleContext(GQLParser.StatementBlockContext, 0)

        def atSchemaClause(self):
            return self.getTypedRuleContext(GQLParser.AtSchemaClauseContext, 0)

        def bindingVariableDefinitionBlock(self):
            return self.getTypedRuleContext(
                GQLParser.BindingVariableDefinitionBlockContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_procedureBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProcedureBody"):
                listener.enterProcedureBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProcedureBody"):
                listener.exitProcedureBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProcedureBody"):
                return visitor.visitProcedureBody(self)
            else:
                return visitor.visitChildren(self)

    def procedureBody(self):
        localctx = GQLParser.ProcedureBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_procedureBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 31:
                self.state = 1318
                self.atSchemaClause()

            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == 225
                or _la == 278
                or (((_la - 289) & ~0x3F) == 0 and ((1 << (_la - 289)) & 16842753) != 0)
            ):
                self.state = 1321
                self.bindingVariableDefinitionBlock()

            self.state = 1324
            self.statementBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindingVariableDefinitionBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableDefinition(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    GQLParser.BindingVariableDefinitionContext
                )
            else:
                return self.getTypedRuleContext(
                    GQLParser.BindingVariableDefinitionContext, i
                )

        def getRuleIndex(self):
            return GQLParser.RULE_bindingVariableDefinitionBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBindingVariableDefinitionBlock"):
                listener.enterBindingVariableDefinitionBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBindingVariableDefinitionBlock"):
                listener.exitBindingVariableDefinitionBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBindingVariableDefinitionBlock"):
                return visitor.visitBindingVariableDefinitionBlock(self)
            else:
                return visitor.visitChildren(self)

    def bindingVariableDefinitionBlock(self):
        localctx = GQLParser.BindingVariableDefinitionBlockContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 60, self.RULE_bindingVariableDefinitionBlock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1326
                self.bindingVariableDefinition()
                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    _la == 225
                    or _la == 278
                    or (
                        ((_la - 289) & ~0x3F) == 0
                        and ((1 << (_la - 289)) & 16842753) != 0
                    )
                ):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindingVariableDefinitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphVariableDefinition(self):
            return self.getTypedRuleContext(GQLParser.GraphVariableDefinitionContext, 0)

        def bindingTableVariableDefinition(self):
            return self.getTypedRuleContext(
                GQLParser.BindingTableVariableDefinitionContext, 0
            )

        def valueVariableDefinition(self):
            return self.getTypedRuleContext(GQLParser.ValueVariableDefinitionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_bindingVariableDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBindingVariableDefinition"):
                listener.enterBindingVariableDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBindingVariableDefinition"):
                listener.exitBindingVariableDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBindingVariableDefinition"):
                return visitor.visitBindingVariableDefinition(self)
            else:
                return visitor.visitChildren(self)

    def bindingVariableDefinition(self):
        localctx = GQLParser.BindingVariableDefinitionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 62, self.RULE_bindingVariableDefinition)
        try:
            self.state = 1334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [289, 305]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1331
                self.graphVariableDefinition()
                pass
            elif token in [278, 313]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1332
                self.bindingTableVariableDefinition()
                pass
            elif token in [225]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1333
                self.valueVariableDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(GQLParser.StatementContext, 0)

        def nextStatement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.NextStatementContext)
            else:
                return self.getTypedRuleContext(GQLParser.NextStatementContext, i)

        def getRuleIndex(self):
            return GQLParser.RULE_statementBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatementBlock"):
                listener.enterStatementBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatementBlock"):
                listener.exitStatementBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatementBlock"):
                return visitor.visitStatementBlock(self)
            else:
                return visitor.visitChildren(self)

    def statementBlock(self):
        localctx = GQLParser.StatementBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_statementBlock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            self.statement()
            self.state = 1340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 149:
                self.state = 1337
                self.nextStatement()
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def linearCatalogModifyingStatement(self):
            return self.getTypedRuleContext(
                GQLParser.LinearCatalogModifyingStatementContext, 0
            )

        def linearDataModifyingStatement(self):
            return self.getTypedRuleContext(
                GQLParser.LinearDataModifyingStatementContext, 0
            )

        def compositeQueryStatement(self):
            return self.getTypedRuleContext(GQLParser.CompositeQueryStatementContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatement"):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)

    def statement(self):
        localctx = GQLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_statement)
        try:
            self.state = 1346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1343
                self.linearCatalogModifyingStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1344
                self.linearDataModifyingStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1345
                self.compositeQueryStatement()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NextStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(GQLParser.NEXT, 0)

        def statement(self):
            return self.getTypedRuleContext(GQLParser.StatementContext, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(GQLParser.YieldClauseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nextStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNextStatement"):
                listener.enterNextStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNextStatement"):
                listener.exitNextStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNextStatement"):
                return visitor.visitNextStatement(self)
            else:
                return visitor.visitChildren(self)

    def nextStatement(self):
        localctx = GQLParser.NextStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_nextStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1348
            self.match(GQLParser.NEXT)
            self.state = 1350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 234:
                self.state = 1349
                self.yieldClause()

            self.state = 1352
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphVariableDefinitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAPH(self):
            return self.getToken(GQLParser.GRAPH, 0)

        def bindingVariable(self):
            return self.getTypedRuleContext(GQLParser.BindingVariableContext, 0)

        def optTypedGraphInitializer(self):
            return self.getTypedRuleContext(
                GQLParser.OptTypedGraphInitializerContext, 0
            )

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_graphVariableDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphVariableDefinition"):
                listener.enterGraphVariableDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphVariableDefinition"):
                listener.exitGraphVariableDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphVariableDefinition"):
                return visitor.visitGraphVariableDefinition(self)
            else:
                return visitor.visitChildren(self)

    def graphVariableDefinition(self):
        localctx = GQLParser.GraphVariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_graphVariableDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 305:
                self.state = 1354
                self.match(GQLParser.PROPERTY)

            self.state = 1357
            self.match(GQLParser.GRAPH)
            self.state = 1358
            self.bindingVariable()
            self.state = 1359
            self.optTypedGraphInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptTypedGraphInitializerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphInitializer(self):
            return self.getTypedRuleContext(GQLParser.GraphInitializerContext, 0)

        def graphReferenceValueType(self):
            return self.getTypedRuleContext(GQLParser.GraphReferenceValueTypeContext, 0)

        def typed(self):
            return self.getTypedRuleContext(GQLParser.TypedContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_optTypedGraphInitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOptTypedGraphInitializer"):
                listener.enterOptTypedGraphInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOptTypedGraphInitializer"):
                listener.exitOptTypedGraphInitializer(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOptTypedGraphInitializer"):
                return visitor.visitOptTypedGraphInitializer(self)
            else:
                return visitor.visitChildren(self)

    def optTypedGraphInitializer(self):
        localctx = GQLParser.OptTypedGraphInitializerContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 72, self.RULE_optTypedGraphInitializer)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == 25
                or _la == 211
                or (
                    ((_la - 289) & ~0x3F) == 0
                    and ((1 << (_la - 289)) & 4398046576641) != 0
                )
            ):
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 211 or _la == 331:
                    self.state = 1361
                    self.typed()

                self.state = 1364
                self.graphReferenceValueType()

            self.state = 1367
            self.graphInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphInitializerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OPERATOR(self):
            return self.getToken(GQLParser.EQUALS_OPERATOR, 0)

        def graphExpression(self):
            return self.getTypedRuleContext(GQLParser.GraphExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_graphInitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphInitializer"):
                listener.enterGraphInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphInitializer"):
                listener.exitGraphInitializer(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphInitializer"):
                return visitor.visitGraphInitializer(self)
            else:
                return visitor.visitChildren(self)

    def graphInitializer(self):
        localctx = GQLParser.GraphInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_graphInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.match(GQLParser.EQUALS_OPERATOR)
            self.state = 1370
            self.graphExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindingTableVariableDefinitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(GQLParser.TABLE, 0)

        def bindingVariable(self):
            return self.getTypedRuleContext(GQLParser.BindingVariableContext, 0)

        def optTypedBindingTableInitializer(self):
            return self.getTypedRuleContext(
                GQLParser.OptTypedBindingTableInitializerContext, 0
            )

        def BINDING(self):
            return self.getToken(GQLParser.BINDING, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_bindingTableVariableDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBindingTableVariableDefinition"):
                listener.enterBindingTableVariableDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBindingTableVariableDefinition"):
                listener.exitBindingTableVariableDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBindingTableVariableDefinition"):
                return visitor.visitBindingTableVariableDefinition(self)
            else:
                return visitor.visitChildren(self)

    def bindingTableVariableDefinition(self):
        localctx = GQLParser.BindingTableVariableDefinitionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 76, self.RULE_bindingTableVariableDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 278:
                self.state = 1372
                self.match(GQLParser.BINDING)

            self.state = 1375
            self.match(GQLParser.TABLE)
            self.state = 1376
            self.bindingVariable()
            self.state = 1377
            self.optTypedBindingTableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptTypedBindingTableInitializerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingTableInitializer(self):
            return self.getTypedRuleContext(GQLParser.BindingTableInitializerContext, 0)

        def bindingTableReferenceValueType(self):
            return self.getTypedRuleContext(
                GQLParser.BindingTableReferenceValueTypeContext, 0
            )

        def typed(self):
            return self.getTypedRuleContext(GQLParser.TypedContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_optTypedBindingTableInitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOptTypedBindingTableInitializer"):
                listener.enterOptTypedBindingTableInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOptTypedBindingTableInitializer"):
                listener.exitOptTypedBindingTableInitializer(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOptTypedBindingTableInitializer"):
                return visitor.visitOptTypedBindingTableInitializer(self)
            else:
                return visitor.visitChildren(self)

    def optTypedBindingTableInitializer(self):
        localctx = GQLParser.OptTypedBindingTableInitializerContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 78, self.RULE_optTypedBindingTableInitializer)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 211 or (
                ((_la - 278) & ~0x3F) == 0
                and ((1 << (_la - 278)) & 9007233614479361) != 0
            ):
                self.state = 1380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 211 or _la == 331:
                    self.state = 1379
                    self.typed()

                self.state = 1382
                self.bindingTableReferenceValueType()

            self.state = 1385
            self.bindingTableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindingTableInitializerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OPERATOR(self):
            return self.getToken(GQLParser.EQUALS_OPERATOR, 0)

        def bindingTableExpression(self):
            return self.getTypedRuleContext(GQLParser.BindingTableExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_bindingTableInitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBindingTableInitializer"):
                listener.enterBindingTableInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBindingTableInitializer"):
                listener.exitBindingTableInitializer(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBindingTableInitializer"):
                return visitor.visitBindingTableInitializer(self)
            else:
                return visitor.visitChildren(self)

    def bindingTableInitializer(self):
        localctx = GQLParser.BindingTableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_bindingTableInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self.match(GQLParser.EQUALS_OPERATOR)
            self.state = 1388
            self.bindingTableExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueVariableDefinitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUE(self):
            return self.getToken(GQLParser.VALUE, 0)

        def bindingVariable(self):
            return self.getTypedRuleContext(GQLParser.BindingVariableContext, 0)

        def optTypedValueInitializer(self):
            return self.getTypedRuleContext(
                GQLParser.OptTypedValueInitializerContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_valueVariableDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValueVariableDefinition"):
                listener.enterValueVariableDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValueVariableDefinition"):
                listener.exitValueVariableDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueVariableDefinition"):
                return visitor.visitValueVariableDefinition(self)
            else:
                return visitor.visitChildren(self)

    def valueVariableDefinition(self):
        localctx = GQLParser.ValueVariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_valueVariableDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1390
            self.match(GQLParser.VALUE)
            self.state = 1391
            self.bindingVariable()
            self.state = 1392
            self.optTypedValueInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptTypedValueInitializerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueInitializer(self):
            return self.getTypedRuleContext(GQLParser.ValueInitializerContext, 0)

        def valueType(self):
            return self.getTypedRuleContext(GQLParser.ValueTypeContext, 0)

        def typed(self):
            return self.getTypedRuleContext(GQLParser.TypedContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_optTypedValueInitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOptTypedValueInitializer"):
                listener.enterOptTypedValueInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOptTypedValueInitializer"):
                listener.exitOptTypedValueInitializer(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOptTypedValueInitializer"):
                return visitor.visitOptTypedValueInitializer(self)
            else:
                return visitor.visitChildren(self)

    def optTypedValueInitializer(self):
        localctx = GQLParser.OptTypedValueInitializerContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 84, self.RULE_optTypedValueInitializer)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la) & ~0x3F) == 0 and ((1 << _la) & 1135228676472832) != 0)
                or (
                    ((_la - 70) & ~0x3F) == 0
                    and ((1 << (_la - 70)) & -9187345438330574823) != 0
                )
                or (
                    ((_la - 135) & ~0x3F) == 0
                    and ((1 << (_la - 135)) & 6989589922362163201) != 0
                )
                or (
                    ((_la - 202) & ~0x3F) == 0
                    and ((1 << (_la - 202)) & 8645246561) != 0
                )
                or (
                    ((_la - 278) & ~0x3F) == 0
                    and ((1 << (_la - 278)) & 9010532828842081) != 0
                )
                or _la == 368
                or _la == 370
            ):
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 211 or _la == 331:
                    self.state = 1394
                    self.typed()

                self.state = 1397
                self.valueType(0)

            self.state = 1400
            self.valueInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueInitializerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OPERATOR(self):
            return self.getToken(GQLParser.EQUALS_OPERATOR, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_valueInitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValueInitializer"):
                listener.enterValueInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValueInitializer"):
                listener.exitValueInitializer(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueInitializer"):
                return visitor.visitValueInitializer(self)
            else:
                return visitor.visitChildren(self)

    def valueInitializer(self):
        localctx = GQLParser.ValueInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_valueInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.match(GQLParser.EQUALS_OPERATOR)
            self.state = 1403
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphReference(self):
            return self.getTypedRuleContext(GQLParser.GraphReferenceContext, 0)

        def objectExpressionPrimary(self):
            return self.getTypedRuleContext(GQLParser.ObjectExpressionPrimaryContext, 0)

        def objectNameOrBindingVariable(self):
            return self.getTypedRuleContext(
                GQLParser.ObjectNameOrBindingVariableContext, 0
            )

        def currentGraph(self):
            return self.getTypedRuleContext(GQLParser.CurrentGraphContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_graphExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphExpression"):
                listener.enterGraphExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphExpression"):
                listener.exitGraphExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphExpression"):
                return visitor.visitGraphExpression(self)
            else:
                return visitor.visitChildren(self)

    def graphExpression(self):
        localctx = GQLParser.GraphExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_graphExpression)
        try:
            self.state = 1409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 41, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1405
                self.graphReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1406
                self.objectExpressionPrimary()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1407
                self.objectNameOrBindingVariable()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1408
                self.currentGraph()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CurrentGraphContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_PROPERTY_GRAPH(self):
            return self.getToken(GQLParser.CURRENT_PROPERTY_GRAPH, 0)

        def CURRENT_GRAPH(self):
            return self.getToken(GQLParser.CURRENT_GRAPH, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_currentGraph

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCurrentGraph"):
                listener.enterCurrentGraph(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCurrentGraph"):
                listener.exitCurrentGraph(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCurrentGraph"):
                return visitor.visitCurrentGraph(self)
            else:
                return visitor.visitChildren(self)

    def currentGraph(self):
        localctx = GQLParser.CurrentGraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_currentGraph)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            _la = self._input.LA(1)
            if not (_la == 65 or _la == 66):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindingTableExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedBindingTableQuerySpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NestedBindingTableQuerySpecificationContext, 0
            )

        def bindingTableReference(self):
            return self.getTypedRuleContext(GQLParser.BindingTableReferenceContext, 0)

        def objectExpressionPrimary(self):
            return self.getTypedRuleContext(GQLParser.ObjectExpressionPrimaryContext, 0)

        def objectNameOrBindingVariable(self):
            return self.getTypedRuleContext(
                GQLParser.ObjectNameOrBindingVariableContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_bindingTableExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBindingTableExpression"):
                listener.enterBindingTableExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBindingTableExpression"):
                listener.exitBindingTableExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBindingTableExpression"):
                return visitor.visitBindingTableExpression(self)
            else:
                return visitor.visitChildren(self)

    def bindingTableExpression(self):
        localctx = GQLParser.BindingTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_bindingTableExpression)
        try:
            self.state = 1417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 42, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1413
                self.nestedBindingTableQuerySpecification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1414
                self.bindingTableReference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1415
                self.objectExpressionPrimary()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1416
                self.objectNameOrBindingVariable()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestedBindingTableQuerySpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedQuerySpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NestedQuerySpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_nestedBindingTableQuerySpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestedBindingTableQuerySpecification"):
                listener.enterNestedBindingTableQuerySpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestedBindingTableQuerySpecification"):
                listener.exitNestedBindingTableQuerySpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNestedBindingTableQuerySpecification"):
                return visitor.visitNestedBindingTableQuerySpecification(self)
            else:
                return visitor.visitChildren(self)

    def nestedBindingTableQuerySpecification(self):
        localctx = GQLParser.NestedBindingTableQuerySpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 94, self.RULE_nestedBindingTableQuerySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1419
            self.nestedQuerySpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectExpressionPrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(GQLParser.VARIABLE, 0)

        def valueExpressionPrimary(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionPrimaryContext, 0)

        def parenthesizedValueExpression(self):
            return self.getTypedRuleContext(
                GQLParser.ParenthesizedValueExpressionContext, 0
            )

        def nonParenthesizedValueExpressionPrimarySpecialCase(self):
            return self.getTypedRuleContext(
                GQLParser.NonParenthesizedValueExpressionPrimarySpecialCaseContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_objectExpressionPrimary

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterObjectExpressionPrimary"):
                listener.enterObjectExpressionPrimary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitObjectExpressionPrimary"):
                listener.exitObjectExpressionPrimary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitObjectExpressionPrimary"):
                return visitor.visitObjectExpressionPrimary(self)
            else:
                return visitor.visitChildren(self)

    def objectExpressionPrimary(self):
        localctx = GQLParser.ObjectExpressionPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_objectExpressionPrimary)
        try:
            self.state = 1425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 43, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1421
                self.match(GQLParser.VARIABLE)
                self.state = 1422
                self.valueExpressionPrimary(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1423
                self.parenthesizedValueExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1424
                self.nonParenthesizedValueExpressionPrimarySpecialCase()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinearCatalogModifyingStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCatalogModifyingStatement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    GQLParser.SimpleCatalogModifyingStatementContext
                )
            else:
                return self.getTypedRuleContext(
                    GQLParser.SimpleCatalogModifyingStatementContext, i
                )

        def getRuleIndex(self):
            return GQLParser.RULE_linearCatalogModifyingStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLinearCatalogModifyingStatement"):
                listener.enterLinearCatalogModifyingStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLinearCatalogModifyingStatement"):
                listener.exitLinearCatalogModifyingStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLinearCatalogModifyingStatement"):
                return visitor.visitLinearCatalogModifyingStatement(self)
            else:
                return visitor.visitChildren(self)

    def linearCatalogModifyingStatement(self):
        localctx = GQLParser.LinearCatalogModifyingStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 98, self.RULE_linearCatalogModifyingStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1427
                self.simpleCatalogModifyingStatement()
                self.state = 1430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la - 44) & ~0x3F) == 0
                        and ((1 << (_la - 44)) & 274878431233) != 0
                    )
                    or _la == 160
                ):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleCatalogModifyingStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveCatalogModifyingStatement(self):
            return self.getTypedRuleContext(
                GQLParser.PrimitiveCatalogModifyingStatementContext, 0
            )

        def callCatalogModifyingProcedureStatement(self):
            return self.getTypedRuleContext(
                GQLParser.CallCatalogModifyingProcedureStatementContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_simpleCatalogModifyingStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpleCatalogModifyingStatement"):
                listener.enterSimpleCatalogModifyingStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpleCatalogModifyingStatement"):
                listener.exitSimpleCatalogModifyingStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimpleCatalogModifyingStatement"):
                return visitor.visitSimpleCatalogModifyingStatement(self)
            else:
                return visitor.visitChildren(self)

    def simpleCatalogModifyingStatement(self):
        localctx = GQLParser.SimpleCatalogModifyingStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 100, self.RULE_simpleCatalogModifyingStatement)
        try:
            self.state = 1434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63, 82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1432
                self.primitiveCatalogModifyingStatement()
                pass
            elif token in [44, 160]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1433
                self.callCatalogModifyingProcedureStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveCatalogModifyingStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createSchemaStatement(self):
            return self.getTypedRuleContext(GQLParser.CreateSchemaStatementContext, 0)

        def dropSchemaStatement(self):
            return self.getTypedRuleContext(GQLParser.DropSchemaStatementContext, 0)

        def createGraphStatement(self):
            return self.getTypedRuleContext(GQLParser.CreateGraphStatementContext, 0)

        def dropGraphStatement(self):
            return self.getTypedRuleContext(GQLParser.DropGraphStatementContext, 0)

        def createGraphTypeStatement(self):
            return self.getTypedRuleContext(
                GQLParser.CreateGraphTypeStatementContext, 0
            )

        def dropGraphTypeStatement(self):
            return self.getTypedRuleContext(GQLParser.DropGraphTypeStatementContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_primitiveCatalogModifyingStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimitiveCatalogModifyingStatement"):
                listener.enterPrimitiveCatalogModifyingStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimitiveCatalogModifyingStatement"):
                listener.exitPrimitiveCatalogModifyingStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimitiveCatalogModifyingStatement"):
                return visitor.visitPrimitiveCatalogModifyingStatement(self)
            else:
                return visitor.visitChildren(self)

    def primitiveCatalogModifyingStatement(self):
        localctx = GQLParser.PrimitiveCatalogModifyingStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 102, self.RULE_primitiveCatalogModifyingStatement)
        try:
            self.state = 1442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 46, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1436
                self.createSchemaStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1437
                self.dropSchemaStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1438
                self.createGraphStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1439
                self.dropGraphStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1440
                self.createGraphTypeStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1441
                self.dropGraphTypeStatement()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateSchemaStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(GQLParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(GQLParser.SCHEMA, 0)

        def catalogSchemaParentAndName(self):
            return self.getTypedRuleContext(
                GQLParser.CatalogSchemaParentAndNameContext, 0
            )

        def IF(self):
            return self.getToken(GQLParser.IF, 0)

        def NOT(self):
            return self.getToken(GQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(GQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_createSchemaStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateSchemaStatement"):
                listener.enterCreateSchemaStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateSchemaStatement"):
                listener.exitCreateSchemaStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCreateSchemaStatement"):
                return visitor.visitCreateSchemaStatement(self)
            else:
                return visitor.visitChildren(self)

    def createSchemaStatement(self):
        localctx = GQLParser.CreateSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_createSchemaStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self.match(GQLParser.CREATE)
            self.state = 1445
            self.match(GQLParser.SCHEMA)
            self.state = 1449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 108:
                self.state = 1446
                self.match(GQLParser.IF)
                self.state = 1447
                self.match(GQLParser.NOT)
                self.state = 1448
                self.match(GQLParser.EXISTS)

            self.state = 1451
            self.catalogSchemaParentAndName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropSchemaStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(GQLParser.DROP, 0)

        def SCHEMA(self):
            return self.getToken(GQLParser.SCHEMA, 0)

        def catalogSchemaParentAndName(self):
            return self.getTypedRuleContext(
                GQLParser.CatalogSchemaParentAndNameContext, 0
            )

        def IF(self):
            return self.getToken(GQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(GQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_dropSchemaStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDropSchemaStatement"):
                listener.enterDropSchemaStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDropSchemaStatement"):
                listener.exitDropSchemaStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDropSchemaStatement"):
                return visitor.visitDropSchemaStatement(self)
            else:
                return visitor.visitChildren(self)

    def dropSchemaStatement(self):
        localctx = GQLParser.DropSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_dropSchemaStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            self.match(GQLParser.DROP)
            self.state = 1454
            self.match(GQLParser.SCHEMA)
            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 108:
                self.state = 1455
                self.match(GQLParser.IF)
                self.state = 1456
                self.match(GQLParser.EXISTS)

            self.state = 1459
            self.catalogSchemaParentAndName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateGraphStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(GQLParser.CREATE, 0)

        def catalogGraphParentAndName(self):
            return self.getTypedRuleContext(
                GQLParser.CatalogGraphParentAndNameContext, 0
            )

        def GRAPH(self):
            return self.getToken(GQLParser.GRAPH, 0)

        def OR(self):
            return self.getToken(GQLParser.OR, 0)

        def REPLACE(self):
            return self.getToken(GQLParser.REPLACE, 0)

        def openGraphType(self):
            return self.getTypedRuleContext(GQLParser.OpenGraphTypeContext, 0)

        def ofGraphType(self):
            return self.getTypedRuleContext(GQLParser.OfGraphTypeContext, 0)

        def graphSource(self):
            return self.getTypedRuleContext(GQLParser.GraphSourceContext, 0)

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def IF(self):
            return self.getToken(GQLParser.IF, 0)

        def NOT(self):
            return self.getToken(GQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(GQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_createGraphStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateGraphStatement"):
                listener.enterCreateGraphStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateGraphStatement"):
                listener.exitCreateGraphStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCreateGraphStatement"):
                return visitor.visitCreateGraphStatement(self)
            else:
                return visitor.visitChildren(self)

    def createGraphStatement(self):
        localctx = GQLParser.CreateGraphStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_createGraphStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.match(GQLParser.CREATE)
            self.state = 1477
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [289, 305]:
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 305:
                    self.state = 1462
                    self.match(GQLParser.PROPERTY)

                self.state = 1465
                self.match(GQLParser.GRAPH)
                self.state = 1469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 108:
                    self.state = 1466
                    self.match(GQLParser.IF)
                    self.state = 1467
                    self.match(GQLParser.NOT)
                    self.state = 1468
                    self.match(GQLParser.EXISTS)

                pass
            elif token in [161]:
                self.state = 1471
                self.match(GQLParser.OR)
                self.state = 1472
                self.match(GQLParser.REPLACE)
                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 305:
                    self.state = 1473
                    self.match(GQLParser.PROPERTY)

                self.state = 1476
                self.match(GQLParser.GRAPH)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1479
            self.catalogGraphParentAndName()
            self.state = 1482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
            if la_ == 1:
                self.state = 1480
                self.openGraphType()
                pass

            elif la_ == 2:
                self.state = 1481
                self.ofGraphType()
                pass

            self.state = 1485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 27:
                self.state = 1484
                self.graphSource()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenGraphTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(GQLParser.ANY, 0)

        def typed(self):
            return self.getTypedRuleContext(GQLParser.TypedContext, 0)

        def GRAPH(self):
            return self.getToken(GQLParser.GRAPH, 0)

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_openGraphType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOpenGraphType"):
                listener.enterOpenGraphType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOpenGraphType"):
                listener.exitOpenGraphType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOpenGraphType"):
                return visitor.visitOpenGraphType(self)
            else:
                return visitor.visitChildren(self)

    def openGraphType(self):
        localctx = GQLParser.OpenGraphTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_openGraphType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 211 or _la == 331:
                self.state = 1487
                self.typed()

            self.state = 1490
            self.match(GQLParser.ANY)
            self.state = 1495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 289 or _la == 305:
                self.state = 1492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 305:
                    self.state = 1491
                    self.match(GQLParser.PROPERTY)

                self.state = 1494
                self.match(GQLParser.GRAPH)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OfGraphTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphTypeLikeGraph(self):
            return self.getTypedRuleContext(GQLParser.GraphTypeLikeGraphContext, 0)

        def graphTypeReference(self):
            return self.getTypedRuleContext(GQLParser.GraphTypeReferenceContext, 0)

        def typed(self):
            return self.getTypedRuleContext(GQLParser.TypedContext, 0)

        def nestedGraphTypeSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NestedGraphTypeSpecificationContext, 0
            )

        def GRAPH(self):
            return self.getToken(GQLParser.GRAPH, 0)

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_ofGraphType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOfGraphType"):
                listener.enterOfGraphType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOfGraphType"):
                listener.exitOfGraphType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOfGraphType"):
                return visitor.visitOfGraphType(self)
            else:
                return visitor.visitChildren(self)

    def ofGraphType(self):
        localctx = GQLParser.OfGraphTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_ofGraphType)
        self._la = 0  # Token type
        try:
            self.state = 1512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 62, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1497
                self.graphTypeLikeGraph()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 211 or _la == 331:
                    self.state = 1498
                    self.typed()

                self.state = 1501
                self.graphTypeReference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 211 or _la == 331:
                    self.state = 1502
                    self.typed()

                self.state = 1509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 289 or _la == 305:
                    self.state = 1506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 305:
                        self.state = 1505
                        self.match(GQLParser.PROPERTY)

                    self.state = 1508
                    self.match(GQLParser.GRAPH)

                self.state = 1511
                self.nestedGraphTypeSpecification()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphTypeLikeGraphContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(GQLParser.LIKE, 0)

        def graphExpression(self):
            return self.getTypedRuleContext(GQLParser.GraphExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_graphTypeLikeGraph

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphTypeLikeGraph"):
                listener.enterGraphTypeLikeGraph(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphTypeLikeGraph"):
                listener.exitGraphTypeLikeGraph(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphTypeLikeGraph"):
                return visitor.visitGraphTypeLikeGraph(self)
            else:
                return visitor.visitChildren(self)

    def graphTypeLikeGraph(self):
        localctx = GQLParser.GraphTypeLikeGraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_graphTypeLikeGraph)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1514
            self.match(GQLParser.LIKE)
            self.state = 1515
            self.graphExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphSourceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(GQLParser.AS, 0)

        def COPY(self):
            return self.getToken(GQLParser.COPY, 0)

        def OF(self):
            return self.getToken(GQLParser.OF, 0)

        def graphExpression(self):
            return self.getTypedRuleContext(GQLParser.GraphExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_graphSource

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphSource"):
                listener.enterGraphSource(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphSource"):
                listener.exitGraphSource(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphSource"):
                return visitor.visitGraphSource(self)
            else:
                return visitor.visitChildren(self)

    def graphSource(self):
        localctx = GQLParser.GraphSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_graphSource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.match(GQLParser.AS)
            self.state = 1518
            self.match(GQLParser.COPY)
            self.state = 1519
            self.match(GQLParser.OF)
            self.state = 1520
            self.graphExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropGraphStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(GQLParser.DROP, 0)

        def GRAPH(self):
            return self.getToken(GQLParser.GRAPH, 0)

        def catalogGraphParentAndName(self):
            return self.getTypedRuleContext(
                GQLParser.CatalogGraphParentAndNameContext, 0
            )

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def IF(self):
            return self.getToken(GQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(GQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_dropGraphStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDropGraphStatement"):
                listener.enterDropGraphStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDropGraphStatement"):
                listener.exitDropGraphStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDropGraphStatement"):
                return visitor.visitDropGraphStatement(self)
            else:
                return visitor.visitChildren(self)

    def dropGraphStatement(self):
        localctx = GQLParser.DropGraphStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_dropGraphStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.match(GQLParser.DROP)
            self.state = 1524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 305:
                self.state = 1523
                self.match(GQLParser.PROPERTY)

            self.state = 1526
            self.match(GQLParser.GRAPH)
            self.state = 1529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 108:
                self.state = 1527
                self.match(GQLParser.IF)
                self.state = 1528
                self.match(GQLParser.EXISTS)

            self.state = 1531
            self.catalogGraphParentAndName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateGraphTypeStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(GQLParser.CREATE, 0)

        def catalogGraphTypeParentAndName(self):
            return self.getTypedRuleContext(
                GQLParser.CatalogGraphTypeParentAndNameContext, 0
            )

        def graphTypeSource(self):
            return self.getTypedRuleContext(GQLParser.GraphTypeSourceContext, 0)

        def GRAPH(self):
            return self.getToken(GQLParser.GRAPH, 0)

        def TYPE(self):
            return self.getToken(GQLParser.TYPE, 0)

        def OR(self):
            return self.getToken(GQLParser.OR, 0)

        def REPLACE(self):
            return self.getToken(GQLParser.REPLACE, 0)

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def IF(self):
            return self.getToken(GQLParser.IF, 0)

        def NOT(self):
            return self.getToken(GQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(GQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_createGraphTypeStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateGraphTypeStatement"):
                listener.enterCreateGraphTypeStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateGraphTypeStatement"):
                listener.exitCreateGraphTypeStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCreateGraphTypeStatement"):
                return visitor.visitCreateGraphTypeStatement(self)
            else:
                return visitor.visitChildren(self)

    def createGraphTypeStatement(self):
        localctx = GQLParser.CreateGraphTypeStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 120, self.RULE_createGraphTypeStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self.match(GQLParser.CREATE)
            self.state = 1551
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [289, 305]:
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 305:
                    self.state = 1534
                    self.match(GQLParser.PROPERTY)

                self.state = 1537
                self.match(GQLParser.GRAPH)
                self.state = 1538
                self.match(GQLParser.TYPE)
                self.state = 1542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 108:
                    self.state = 1539
                    self.match(GQLParser.IF)
                    self.state = 1540
                    self.match(GQLParser.NOT)
                    self.state = 1541
                    self.match(GQLParser.EXISTS)

                pass
            elif token in [161]:
                self.state = 1544
                self.match(GQLParser.OR)
                self.state = 1545
                self.match(GQLParser.REPLACE)
                self.state = 1547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 305:
                    self.state = 1546
                    self.match(GQLParser.PROPERTY)

                self.state = 1549
                self.match(GQLParser.GRAPH)
                self.state = 1550
                self.match(GQLParser.TYPE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1553
            self.catalogGraphTypeParentAndName()
            self.state = 1554
            self.graphTypeSource()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphTypeSourceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def copyOfGraphType(self):
            return self.getTypedRuleContext(GQLParser.CopyOfGraphTypeContext, 0)

        def AS(self):
            return self.getToken(GQLParser.AS, 0)

        def graphTypeLikeGraph(self):
            return self.getTypedRuleContext(GQLParser.GraphTypeLikeGraphContext, 0)

        def nestedGraphTypeSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NestedGraphTypeSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_graphTypeSource

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphTypeSource"):
                listener.enterGraphTypeSource(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphTypeSource"):
                listener.exitGraphTypeSource(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphTypeSource"):
                return visitor.visitGraphTypeSource(self)
            else:
                return visitor.visitChildren(self)

    def graphTypeSource(self):
        localctx = GQLParser.GraphTypeSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_graphTypeSource)
        self._la = 0  # Token type
        try:
            self.state = 1565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 71, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 27:
                    self.state = 1556
                    self.match(GQLParser.AS)

                self.state = 1559
                self.copyOfGraphType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1560
                self.graphTypeLikeGraph()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 27:
                    self.state = 1561
                    self.match(GQLParser.AS)

                self.state = 1564
                self.nestedGraphTypeSpecification()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CopyOfGraphTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(GQLParser.COPY, 0)

        def OF(self):
            return self.getToken(GQLParser.OF, 0)

        def graphTypeReference(self):
            return self.getTypedRuleContext(GQLParser.GraphTypeReferenceContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_copyOfGraphType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCopyOfGraphType"):
                listener.enterCopyOfGraphType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCopyOfGraphType"):
                listener.exitCopyOfGraphType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCopyOfGraphType"):
                return visitor.visitCopyOfGraphType(self)
            else:
                return visitor.visitChildren(self)

    def copyOfGraphType(self):
        localctx = GQLParser.CopyOfGraphTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_copyOfGraphType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self.match(GQLParser.COPY)
            self.state = 1568
            self.match(GQLParser.OF)
            self.state = 1569
            self.graphTypeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropGraphTypeStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(GQLParser.DROP, 0)

        def GRAPH(self):
            return self.getToken(GQLParser.GRAPH, 0)

        def TYPE(self):
            return self.getToken(GQLParser.TYPE, 0)

        def catalogGraphTypeParentAndName(self):
            return self.getTypedRuleContext(
                GQLParser.CatalogGraphTypeParentAndNameContext, 0
            )

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def IF(self):
            return self.getToken(GQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(GQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_dropGraphTypeStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDropGraphTypeStatement"):
                listener.enterDropGraphTypeStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDropGraphTypeStatement"):
                listener.exitDropGraphTypeStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDropGraphTypeStatement"):
                return visitor.visitDropGraphTypeStatement(self)
            else:
                return visitor.visitChildren(self)

    def dropGraphTypeStatement(self):
        localctx = GQLParser.DropGraphTypeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_dropGraphTypeStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1571
            self.match(GQLParser.DROP)
            self.state = 1573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 305:
                self.state = 1572
                self.match(GQLParser.PROPERTY)

            self.state = 1575
            self.match(GQLParser.GRAPH)
            self.state = 1576
            self.match(GQLParser.TYPE)
            self.state = 1579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 108:
                self.state = 1577
                self.match(GQLParser.IF)
                self.state = 1578
                self.match(GQLParser.EXISTS)

            self.state = 1581
            self.catalogGraphTypeParentAndName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallCatalogModifyingProcedureStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callProcedureStatement(self):
            return self.getTypedRuleContext(GQLParser.CallProcedureStatementContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_callCatalogModifyingProcedureStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCallCatalogModifyingProcedureStatement"):
                listener.enterCallCatalogModifyingProcedureStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCallCatalogModifyingProcedureStatement"):
                listener.exitCallCatalogModifyingProcedureStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCallCatalogModifyingProcedureStatement"):
                return visitor.visitCallCatalogModifyingProcedureStatement(self)
            else:
                return visitor.visitChildren(self)

    def callCatalogModifyingProcedureStatement(self):
        localctx = GQLParser.CallCatalogModifyingProcedureStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 128, self.RULE_callCatalogModifyingProcedureStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self.callProcedureStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinearDataModifyingStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def focusedLinearDataModifyingStatement(self):
            return self.getTypedRuleContext(
                GQLParser.FocusedLinearDataModifyingStatementContext, 0
            )

        def ambientLinearDataModifyingStatement(self):
            return self.getTypedRuleContext(
                GQLParser.AmbientLinearDataModifyingStatementContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_linearDataModifyingStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLinearDataModifyingStatement"):
                listener.enterLinearDataModifyingStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLinearDataModifyingStatement"):
                listener.exitLinearDataModifyingStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLinearDataModifyingStatement"):
                return visitor.visitLinearDataModifyingStatement(self)
            else:
                return visitor.visitChildren(self)

    def linearDataModifyingStatement(self):
        localctx = GQLParser.LinearDataModifyingStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 130, self.RULE_linearDataModifyingStatement)
        try:
            self.state = 1587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [223]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1585
                self.focusedLinearDataModifyingStatement()
                pass
            elif token in [
                44,
                76,
                79,
                91,
                100,
                110,
                130,
                132,
                143,
                150,
                159,
                160,
                162,
                177,
                190,
                195,
                368,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1586
                self.ambientLinearDataModifyingStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FocusedLinearDataModifyingStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def focusedLinearDataModifyingStatementBody(self):
            return self.getTypedRuleContext(
                GQLParser.FocusedLinearDataModifyingStatementBodyContext, 0
            )

        def focusedNestedDataModifyingProcedureSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.FocusedNestedDataModifyingProcedureSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_focusedLinearDataModifyingStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFocusedLinearDataModifyingStatement"):
                listener.enterFocusedLinearDataModifyingStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFocusedLinearDataModifyingStatement"):
                listener.exitFocusedLinearDataModifyingStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFocusedLinearDataModifyingStatement"):
                return visitor.visitFocusedLinearDataModifyingStatement(self)
            else:
                return visitor.visitChildren(self)

    def focusedLinearDataModifyingStatement(self):
        localctx = GQLParser.FocusedLinearDataModifyingStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 132, self.RULE_focusedLinearDataModifyingStatement)
        try:
            self.state = 1591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 75, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1589
                self.focusedLinearDataModifyingStatementBody()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1590
                self.focusedNestedDataModifyingProcedureSpecification()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FocusedLinearDataModifyingStatementBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useGraphClause(self):
            return self.getTypedRuleContext(GQLParser.UseGraphClauseContext, 0)

        def simpleLinearDataAccessingStatement(self):
            return self.getTypedRuleContext(
                GQLParser.SimpleLinearDataAccessingStatementContext, 0
            )

        def primitiveResultStatement(self):
            return self.getTypedRuleContext(
                GQLParser.PrimitiveResultStatementContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_focusedLinearDataModifyingStatementBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFocusedLinearDataModifyingStatementBody"):
                listener.enterFocusedLinearDataModifyingStatementBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFocusedLinearDataModifyingStatementBody"):
                listener.exitFocusedLinearDataModifyingStatementBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFocusedLinearDataModifyingStatementBody"):
                return visitor.visitFocusedLinearDataModifyingStatementBody(self)
            else:
                return visitor.visitChildren(self)

    def focusedLinearDataModifyingStatementBody(self):
        localctx = GQLParser.FocusedLinearDataModifyingStatementBodyContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 134, self.RULE_focusedLinearDataModifyingStatementBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593
            self.useGraphClause()
            self.state = 1594
            self.simpleLinearDataAccessingStatement()
            self.state = 1596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 92 or _la == 180:
                self.state = 1595
                self.primitiveResultStatement()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FocusedNestedDataModifyingProcedureSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useGraphClause(self):
            return self.getTypedRuleContext(GQLParser.UseGraphClauseContext, 0)

        def nestedDataModifyingProcedureSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NestedDataModifyingProcedureSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_focusedNestedDataModifyingProcedureSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(
                listener, "enterFocusedNestedDataModifyingProcedureSpecification"
            ):
                listener.enterFocusedNestedDataModifyingProcedureSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(
                listener, "exitFocusedNestedDataModifyingProcedureSpecification"
            ):
                listener.exitFocusedNestedDataModifyingProcedureSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(
                visitor, "visitFocusedNestedDataModifyingProcedureSpecification"
            ):
                return visitor.visitFocusedNestedDataModifyingProcedureSpecification(
                    self
                )
            else:
                return visitor.visitChildren(self)

    def focusedNestedDataModifyingProcedureSpecification(self):
        localctx = GQLParser.FocusedNestedDataModifyingProcedureSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 136, self.RULE_focusedNestedDataModifyingProcedureSpecification
        )
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1598
            self.useGraphClause()
            self.state = 1599
            self.nestedDataModifyingProcedureSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AmbientLinearDataModifyingStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambientLinearDataModifyingStatementBody(self):
            return self.getTypedRuleContext(
                GQLParser.AmbientLinearDataModifyingStatementBodyContext, 0
            )

        def nestedDataModifyingProcedureSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NestedDataModifyingProcedureSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_ambientLinearDataModifyingStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAmbientLinearDataModifyingStatement"):
                listener.enterAmbientLinearDataModifyingStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAmbientLinearDataModifyingStatement"):
                listener.exitAmbientLinearDataModifyingStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAmbientLinearDataModifyingStatement"):
                return visitor.visitAmbientLinearDataModifyingStatement(self)
            else:
                return visitor.visitChildren(self)

    def ambientLinearDataModifyingStatement(self):
        localctx = GQLParser.AmbientLinearDataModifyingStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 138, self.RULE_ambientLinearDataModifyingStatement)
        try:
            self.state = 1603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                44,
                76,
                79,
                91,
                100,
                110,
                130,
                132,
                143,
                150,
                159,
                160,
                162,
                177,
                190,
                195,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1601
                self.ambientLinearDataModifyingStatementBody()
                pass
            elif token in [368]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1602
                self.nestedDataModifyingProcedureSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AmbientLinearDataModifyingStatementBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleLinearDataAccessingStatement(self):
            return self.getTypedRuleContext(
                GQLParser.SimpleLinearDataAccessingStatementContext, 0
            )

        def primitiveResultStatement(self):
            return self.getTypedRuleContext(
                GQLParser.PrimitiveResultStatementContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_ambientLinearDataModifyingStatementBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAmbientLinearDataModifyingStatementBody"):
                listener.enterAmbientLinearDataModifyingStatementBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAmbientLinearDataModifyingStatementBody"):
                listener.exitAmbientLinearDataModifyingStatementBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAmbientLinearDataModifyingStatementBody"):
                return visitor.visitAmbientLinearDataModifyingStatementBody(self)
            else:
                return visitor.visitChildren(self)

    def ambientLinearDataModifyingStatementBody(self):
        localctx = GQLParser.AmbientLinearDataModifyingStatementBodyContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 140, self.RULE_ambientLinearDataModifyingStatementBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605
            self.simpleLinearDataAccessingStatement()
            self.state = 1607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 92 or _la == 180:
                self.state = 1606
                self.primitiveResultStatement()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleLinearDataAccessingStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDataAccessingStatement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    GQLParser.SimpleDataAccessingStatementContext
                )
            else:
                return self.getTypedRuleContext(
                    GQLParser.SimpleDataAccessingStatementContext, i
                )

        def getRuleIndex(self):
            return GQLParser.RULE_simpleLinearDataAccessingStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpleLinearDataAccessingStatement"):
                listener.enterSimpleLinearDataAccessingStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpleLinearDataAccessingStatement"):
                listener.exitSimpleLinearDataAccessingStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimpleLinearDataAccessingStatement"):
                return visitor.visitSimpleLinearDataAccessingStatement(self)
            else:
                return visitor.visitChildren(self)

    def simpleLinearDataAccessingStatement(self):
        localctx = GQLParser.SimpleLinearDataAccessingStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 142, self.RULE_simpleLinearDataAccessingStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1609
                self.simpleDataAccessingStatement()
                self.state = 1612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    _la == 44
                    or (
                        ((_la - 76) & ~0x3F) == 0
                        and ((1 << (_la - 76)) & 90072009744089097) != 0
                    )
                    or (
                        ((_la - 143) & ~0x3F) == 0
                        and ((1 << (_la - 143)) & 4644354296316033) != 0
                    )
                ):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleDataAccessingStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleQueryStatement(self):
            return self.getTypedRuleContext(GQLParser.SimpleQueryStatementContext, 0)

        def simpleDataModifyingStatement(self):
            return self.getTypedRuleContext(
                GQLParser.SimpleDataModifyingStatementContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_simpleDataAccessingStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpleDataAccessingStatement"):
                listener.enterSimpleDataAccessingStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpleDataAccessingStatement"):
                listener.exitSimpleDataAccessingStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimpleDataAccessingStatement"):
                return visitor.visitSimpleDataAccessingStatement(self)
            else:
                return visitor.visitChildren(self)

    def simpleDataAccessingStatement(self):
        localctx = GQLParser.SimpleDataAccessingStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 144, self.RULE_simpleDataAccessingStatement)
        try:
            self.state = 1616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 80, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1614
                self.simpleQueryStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1615
                self.simpleDataModifyingStatement()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleDataModifyingStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveDataModifyingStatement(self):
            return self.getTypedRuleContext(
                GQLParser.PrimitiveDataModifyingStatementContext, 0
            )

        def callDataModifyingProcedureStatement(self):
            return self.getTypedRuleContext(
                GQLParser.CallDataModifyingProcedureStatementContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_simpleDataModifyingStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpleDataModifyingStatement"):
                listener.enterSimpleDataModifyingStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpleDataModifyingStatement"):
                listener.exitSimpleDataModifyingStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimpleDataModifyingStatement"):
                return visitor.visitSimpleDataModifyingStatement(self)
            else:
                return visitor.visitChildren(self)

    def simpleDataModifyingStatement(self):
        localctx = GQLParser.SimpleDataModifyingStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 146, self.RULE_simpleDataModifyingStatement)
        try:
            self.state = 1620
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76, 79, 110, 150, 177, 190]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1618
                self.primitiveDataModifyingStatement()
                pass
            elif token in [44, 160]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1619
                self.callDataModifyingProcedureStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveDataModifyingStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertStatement(self):
            return self.getTypedRuleContext(GQLParser.InsertStatementContext, 0)

        def setStatement(self):
            return self.getTypedRuleContext(GQLParser.SetStatementContext, 0)

        def removeStatement(self):
            return self.getTypedRuleContext(GQLParser.RemoveStatementContext, 0)

        def deleteStatement(self):
            return self.getTypedRuleContext(GQLParser.DeleteStatementContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_primitiveDataModifyingStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimitiveDataModifyingStatement"):
                listener.enterPrimitiveDataModifyingStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimitiveDataModifyingStatement"):
                listener.exitPrimitiveDataModifyingStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimitiveDataModifyingStatement"):
                return visitor.visitPrimitiveDataModifyingStatement(self)
            else:
                return visitor.visitChildren(self)

    def primitiveDataModifyingStatement(self):
        localctx = GQLParser.PrimitiveDataModifyingStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 148, self.RULE_primitiveDataModifyingStatement)
        try:
            self.state = 1626
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1622
                self.insertStatement()
                pass
            elif token in [190]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1623
                self.setStatement()
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1624
                self.removeStatement()
                pass
            elif token in [76, 79, 150]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1625
                self.deleteStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(GQLParser.INSERT, 0)

        def insertGraphPattern(self):
            return self.getTypedRuleContext(GQLParser.InsertGraphPatternContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_insertStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertStatement"):
                listener.enterInsertStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertStatement"):
                listener.exitInsertStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInsertStatement"):
                return visitor.visitInsertStatement(self)
            else:
                return visitor.visitChildren(self)

    def insertStatement(self):
        localctx = GQLParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_insertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            self.match(GQLParser.INSERT)
            self.state = 1629
            self.insertGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(GQLParser.SET, 0)

        def setItemList(self):
            return self.getTypedRuleContext(GQLParser.SetItemListContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_setStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetStatement"):
                listener.enterSetStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetStatement"):
                listener.exitSetStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSetStatement"):
                return visitor.visitSetStatement(self)
            else:
                return visitor.visitChildren(self)

    def setStatement(self):
        localctx = GQLParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_setStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.match(GQLParser.SET)
            self.state = 1632
            self.setItemList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetItemListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.SetItemContext)
            else:
                return self.getTypedRuleContext(GQLParser.SetItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_setItemList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetItemList"):
                listener.enterSetItemList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetItemList"):
                listener.exitSetItemList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSetItemList"):
                return visitor.visitSetItemList(self)
            else:
                return visitor.visitChildren(self)

    def setItemList(self):
        localctx = GQLParser.SetItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_setItemList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1634
            self.setItem()
            self.state = 1639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 1635
                self.match(GQLParser.COMMA)
                self.state = 1636
                self.setItem()
                self.state = 1641
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setPropertyItem(self):
            return self.getTypedRuleContext(GQLParser.SetPropertyItemContext, 0)

        def setAllPropertiesItem(self):
            return self.getTypedRuleContext(GQLParser.SetAllPropertiesItemContext, 0)

        def setLabelItem(self):
            return self.getTypedRuleContext(GQLParser.SetLabelItemContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_setItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetItem"):
                listener.enterSetItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetItem"):
                listener.exitSetItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSetItem"):
                return visitor.visitSetItem(self)
            else:
                return visitor.visitChildren(self)

    def setItem(self):
        localctx = GQLParser.SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_setItem)
        try:
            self.state = 1645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 84, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1642
                self.setPropertyItem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1643
                self.setAllPropertiesItem()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1644
                self.setLabelItem()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetPropertyItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.BindingVariableReferenceContext, 0
            )

        def PERIOD(self):
            return self.getToken(GQLParser.PERIOD, 0)

        def propertyName(self):
            return self.getTypedRuleContext(GQLParser.PropertyNameContext, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(GQLParser.EQUALS_OPERATOR, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_setPropertyItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetPropertyItem"):
                listener.enterSetPropertyItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetPropertyItem"):
                listener.exitSetPropertyItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSetPropertyItem"):
                return visitor.visitSetPropertyItem(self)
            else:
                return visitor.visitChildren(self)

    def setPropertyItem(self):
        localctx = GQLParser.SetPropertyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_setPropertyItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.bindingVariableReference()
            self.state = 1648
            self.match(GQLParser.PERIOD)
            self.state = 1649
            self.propertyName()
            self.state = 1650
            self.match(GQLParser.EQUALS_OPERATOR)
            self.state = 1651
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetAllPropertiesItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.BindingVariableReferenceContext, 0
            )

        def EQUALS_OPERATOR(self):
            return self.getToken(GQLParser.EQUALS_OPERATOR, 0)

        def LEFT_BRACE(self):
            return self.getToken(GQLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GQLParser.RIGHT_BRACE, 0)

        def propertyKeyValuePairList(self):
            return self.getTypedRuleContext(
                GQLParser.PropertyKeyValuePairListContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_setAllPropertiesItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetAllPropertiesItem"):
                listener.enterSetAllPropertiesItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetAllPropertiesItem"):
                listener.exitSetAllPropertiesItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSetAllPropertiesItem"):
                return visitor.visitSetAllPropertiesItem(self)
            else:
                return visitor.visitChildren(self)

    def setAllPropertiesItem(self):
        localctx = GQLParser.SetAllPropertiesItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_setAllPropertiesItem)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1653
            self.bindingVariableReference()
            self.state = 1654
            self.match(GQLParser.EQUALS_OPERATOR)
            self.state = 1655
            self.match(GQLParser.LEFT_BRACE)
            self.state = 1657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == 4
                or _la == 5
                or (
                    ((_la - 277) & ~0x3F) == 0
                    and ((1 << (_la - 277)) & 281474976710655) != 0
                )
            ):
                self.state = 1656
                self.propertyKeyValuePairList()

            self.state = 1659
            self.match(GQLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetLabelItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.BindingVariableReferenceContext, 0
            )

        def isOrColon(self):
            return self.getTypedRuleContext(GQLParser.IsOrColonContext, 0)

        def labelName(self):
            return self.getTypedRuleContext(GQLParser.LabelNameContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_setLabelItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetLabelItem"):
                listener.enterSetLabelItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetLabelItem"):
                listener.exitSetLabelItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSetLabelItem"):
                return visitor.visitSetLabelItem(self)
            else:
                return visitor.visitChildren(self)

    def setLabelItem(self):
        localctx = GQLParser.SetLabelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_setLabelItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1661
            self.bindingVariableReference()
            self.state = 1662
            self.isOrColon()
            self.state = 1663
            self.labelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemoveStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(GQLParser.REMOVE, 0)

        def removeItemList(self):
            return self.getTypedRuleContext(GQLParser.RemoveItemListContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_removeStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRemoveStatement"):
                listener.enterRemoveStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRemoveStatement"):
                listener.exitRemoveStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRemoveStatement"):
                return visitor.visitRemoveStatement(self)
            else:
                return visitor.visitChildren(self)

    def removeStatement(self):
        localctx = GQLParser.RemoveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_removeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1665
            self.match(GQLParser.REMOVE)
            self.state = 1666
            self.removeItemList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemoveItemListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def removeItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.RemoveItemContext)
            else:
                return self.getTypedRuleContext(GQLParser.RemoveItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_removeItemList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRemoveItemList"):
                listener.enterRemoveItemList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRemoveItemList"):
                listener.exitRemoveItemList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRemoveItemList"):
                return visitor.visitRemoveItemList(self)
            else:
                return visitor.visitChildren(self)

    def removeItemList(self):
        localctx = GQLParser.RemoveItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_removeItemList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1668
            self.removeItem()
            self.state = 1673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 1669
                self.match(GQLParser.COMMA)
                self.state = 1670
                self.removeItem()
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemoveItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def removePropertyItem(self):
            return self.getTypedRuleContext(GQLParser.RemovePropertyItemContext, 0)

        def removeLabelItem(self):
            return self.getTypedRuleContext(GQLParser.RemoveLabelItemContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_removeItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRemoveItem"):
                listener.enterRemoveItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRemoveItem"):
                listener.exitRemoveItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRemoveItem"):
                return visitor.visitRemoveItem(self)
            else:
                return visitor.visitChildren(self)

    def removeItem(self):
        localctx = GQLParser.RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_removeItem)
        try:
            self.state = 1678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 87, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1676
                self.removePropertyItem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1677
                self.removeLabelItem()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemovePropertyItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.BindingVariableReferenceContext, 0
            )

        def PERIOD(self):
            return self.getToken(GQLParser.PERIOD, 0)

        def propertyName(self):
            return self.getTypedRuleContext(GQLParser.PropertyNameContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_removePropertyItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRemovePropertyItem"):
                listener.enterRemovePropertyItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRemovePropertyItem"):
                listener.exitRemovePropertyItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRemovePropertyItem"):
                return visitor.visitRemovePropertyItem(self)
            else:
                return visitor.visitChildren(self)

    def removePropertyItem(self):
        localctx = GQLParser.RemovePropertyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_removePropertyItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1680
            self.bindingVariableReference()
            self.state = 1681
            self.match(GQLParser.PERIOD)
            self.state = 1682
            self.propertyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemoveLabelItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.BindingVariableReferenceContext, 0
            )

        def isOrColon(self):
            return self.getTypedRuleContext(GQLParser.IsOrColonContext, 0)

        def labelName(self):
            return self.getTypedRuleContext(GQLParser.LabelNameContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_removeLabelItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRemoveLabelItem"):
                listener.enterRemoveLabelItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRemoveLabelItem"):
                listener.exitRemoveLabelItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRemoveLabelItem"):
                return visitor.visitRemoveLabelItem(self)
            else:
                return visitor.visitChildren(self)

    def removeLabelItem(self):
        localctx = GQLParser.RemoveLabelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_removeLabelItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self.bindingVariableReference()
            self.state = 1685
            self.isOrColon()
            self.state = 1686
            self.labelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(GQLParser.DELETE, 0)

        def deleteItemList(self):
            return self.getTypedRuleContext(GQLParser.DeleteItemListContext, 0)

        def DETACH(self):
            return self.getToken(GQLParser.DETACH, 0)

        def NODETACH(self):
            return self.getToken(GQLParser.NODETACH, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_deleteStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeleteStatement"):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeleteStatement"):
                listener.exitDeleteStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeleteStatement"):
                return visitor.visitDeleteStatement(self)
            else:
                return visitor.visitChildren(self)

    def deleteStatement(self):
        localctx = GQLParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_deleteStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 79 or _la == 150:
                self.state = 1688
                _la = self._input.LA(1)
                if not (_la == 79 or _la == 150):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 1691
            self.match(GQLParser.DELETE)
            self.state = 1692
            self.deleteItemList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteItemListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deleteItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.DeleteItemContext)
            else:
                return self.getTypedRuleContext(GQLParser.DeleteItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_deleteItemList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeleteItemList"):
                listener.enterDeleteItemList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeleteItemList"):
                listener.exitDeleteItemList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeleteItemList"):
                return visitor.visitDeleteItemList(self)
            else:
                return visitor.visitChildren(self)

    def deleteItemList(self):
        localctx = GQLParser.DeleteItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_deleteItemList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.deleteItem()
            self.state = 1699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 1695
                self.match(GQLParser.COMMA)
                self.state = 1696
                self.deleteItem()
                self.state = 1701
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_deleteItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeleteItem"):
                listener.enterDeleteItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeleteItem"):
                listener.exitDeleteItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeleteItem"):
                return visitor.visitDeleteItem(self)
            else:
                return visitor.visitChildren(self)

    def deleteItem(self):
        localctx = GQLParser.DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_deleteItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1702
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallDataModifyingProcedureStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callProcedureStatement(self):
            return self.getTypedRuleContext(GQLParser.CallProcedureStatementContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_callDataModifyingProcedureStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCallDataModifyingProcedureStatement"):
                listener.enterCallDataModifyingProcedureStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCallDataModifyingProcedureStatement"):
                listener.exitCallDataModifyingProcedureStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCallDataModifyingProcedureStatement"):
                return visitor.visitCallDataModifyingProcedureStatement(self)
            else:
                return visitor.visitChildren(self)

    def callDataModifyingProcedureStatement(self):
        localctx = GQLParser.CallDataModifyingProcedureStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 180, self.RULE_callDataModifyingProcedureStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self.callProcedureStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompositeQueryStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compositeQueryExpression(self):
            return self.getTypedRuleContext(
                GQLParser.CompositeQueryExpressionContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_compositeQueryStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompositeQueryStatement"):
                listener.enterCompositeQueryStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompositeQueryStatement"):
                listener.exitCompositeQueryStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompositeQueryStatement"):
                return visitor.visitCompositeQueryStatement(self)
            else:
                return visitor.visitChildren(self)

    def compositeQueryStatement(self):
        localctx = GQLParser.CompositeQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_compositeQueryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            self.compositeQueryExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompositeQueryExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compositeQueryPrimary(self):
            return self.getTypedRuleContext(GQLParser.CompositeQueryPrimaryContext, 0)

        def compositeQueryExpression(self):
            return self.getTypedRuleContext(
                GQLParser.CompositeQueryExpressionContext, 0
            )

        def queryConjunction(self):
            return self.getTypedRuleContext(GQLParser.QueryConjunctionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_compositeQueryExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompositeQueryExpression"):
                listener.enterCompositeQueryExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompositeQueryExpression"):
                listener.exitCompositeQueryExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompositeQueryExpression"):
                return visitor.visitCompositeQueryExpression(self)
            else:
                return visitor.visitChildren(self)

    def compositeQueryExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GQLParser.CompositeQueryExpressionContext(
            self, self._ctx, _parentState
        )
        _prevctx = localctx
        _startState = 184
        self.enterRecursionRule(localctx, 184, self.RULE_compositeQueryExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.compositeQueryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1717
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = GQLParser.CompositeQueryExpressionContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_compositeQueryExpression
                    )
                    self.state = 1711
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 1712
                    self.queryConjunction()
                    self.state = 1713
                    self.compositeQueryPrimary()
                self.state = 1719
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class QueryConjunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setOperator(self):
            return self.getTypedRuleContext(GQLParser.SetOperatorContext, 0)

        def OTHERWISE(self):
            return self.getToken(GQLParser.OTHERWISE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_queryConjunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQueryConjunction"):
                listener.enterQueryConjunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQueryConjunction"):
                listener.exitQueryConjunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitQueryConjunction"):
                return visitor.visitQueryConjunction(self)
            else:
                return visitor.visitChildren(self)

    def queryConjunction(self):
        localctx = GQLParser.QueryConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_queryConjunction)
        try:
            self.state = 1722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [88, 125, 220]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1720
                self.setOperator()
                pass
            elif token in [163]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1721
                self.match(GQLParser.OTHERWISE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(GQLParser.UNION, 0)

        def setQuantifier(self):
            return self.getTypedRuleContext(GQLParser.SetQuantifierContext, 0)

        def EXCEPT(self):
            return self.getToken(GQLParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(GQLParser.INTERSECT, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_setOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetOperator"):
                listener.enterSetOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetOperator"):
                listener.exitSetOperator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSetOperator"):
                return visitor.visitSetOperator(self)
            else:
                return visitor.visitChildren(self)

    def setOperator(self):
        localctx = GQLParser.SetOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_setOperator)
        self._la = 0  # Token type
        try:
            self.state = 1736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [220]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1724
                self.match(GQLParser.UNION)
                self.state = 1726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 22 or _la == 80:
                    self.state = 1725
                    self.setQuantifier()

                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1728
                self.match(GQLParser.EXCEPT)
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 22 or _la == 80:
                    self.state = 1729
                    self.setQuantifier()

                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1732
                self.match(GQLParser.INTERSECT)
                self.state = 1734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 22 or _la == 80:
                    self.state = 1733
                    self.setQuantifier()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompositeQueryPrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def linearQueryStatement(self):
            return self.getTypedRuleContext(GQLParser.LinearQueryStatementContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_compositeQueryPrimary

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompositeQueryPrimary"):
                listener.enterCompositeQueryPrimary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompositeQueryPrimary"):
                listener.exitCompositeQueryPrimary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompositeQueryPrimary"):
                return visitor.visitCompositeQueryPrimary(self)
            else:
                return visitor.visitChildren(self)

    def compositeQueryPrimary(self):
        localctx = GQLParser.CompositeQueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_compositeQueryPrimary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1738
            self.linearQueryStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinearQueryStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def focusedLinearQueryStatement(self):
            return self.getTypedRuleContext(
                GQLParser.FocusedLinearQueryStatementContext, 0
            )

        def ambientLinearQueryStatement(self):
            return self.getTypedRuleContext(
                GQLParser.AmbientLinearQueryStatementContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_linearQueryStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLinearQueryStatement"):
                listener.enterLinearQueryStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLinearQueryStatement"):
                listener.exitLinearQueryStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLinearQueryStatement"):
                return visitor.visitLinearQueryStatement(self)
            else:
                return visitor.visitChildren(self)

    def linearQueryStatement(self):
        localctx = GQLParser.LinearQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_linearQueryStatement)
        try:
            self.state = 1742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [187, 223]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1740
                self.focusedLinearQueryStatement()
                pass
            elif token in [
                44,
                91,
                92,
                100,
                130,
                132,
                143,
                159,
                160,
                162,
                180,
                195,
                368,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1741
                self.ambientLinearQueryStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FocusedLinearQueryStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def focusedLinearQueryAndPrimitiveResultStatementPart(self):
            return self.getTypedRuleContext(
                GQLParser.FocusedLinearQueryAndPrimitiveResultStatementPartContext, 0
            )

        def focusedLinearQueryStatementPart(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    GQLParser.FocusedLinearQueryStatementPartContext
                )
            else:
                return self.getTypedRuleContext(
                    GQLParser.FocusedLinearQueryStatementPartContext, i
                )

        def focusedPrimitiveResultStatement(self):
            return self.getTypedRuleContext(
                GQLParser.FocusedPrimitiveResultStatementContext, 0
            )

        def focusedNestedQuerySpecification(self):
            return self.getTypedRuleContext(
                GQLParser.FocusedNestedQuerySpecificationContext, 0
            )

        def selectStatement(self):
            return self.getTypedRuleContext(GQLParser.SelectStatementContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_focusedLinearQueryStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFocusedLinearQueryStatement"):
                listener.enterFocusedLinearQueryStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFocusedLinearQueryStatement"):
                listener.exitFocusedLinearQueryStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFocusedLinearQueryStatement"):
                return visitor.visitFocusedLinearQueryStatement(self)
            else:
                return visitor.visitChildren(self)

    def focusedLinearQueryStatement(self):
        localctx = GQLParser.FocusedLinearQueryStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 194, self.RULE_focusedLinearQueryStatement)
        try:
            self.state = 1754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 98, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1747
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1744
                        self.focusedLinearQueryStatementPart()
                    self.state = 1749
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)

                self.state = 1750
                self.focusedLinearQueryAndPrimitiveResultStatementPart()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1751
                self.focusedPrimitiveResultStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1752
                self.focusedNestedQuerySpecification()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1753
                self.selectStatement()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FocusedLinearQueryStatementPartContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useGraphClause(self):
            return self.getTypedRuleContext(GQLParser.UseGraphClauseContext, 0)

        def simpleLinearQueryStatement(self):
            return self.getTypedRuleContext(
                GQLParser.SimpleLinearQueryStatementContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_focusedLinearQueryStatementPart

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFocusedLinearQueryStatementPart"):
                listener.enterFocusedLinearQueryStatementPart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFocusedLinearQueryStatementPart"):
                listener.exitFocusedLinearQueryStatementPart(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFocusedLinearQueryStatementPart"):
                return visitor.visitFocusedLinearQueryStatementPart(self)
            else:
                return visitor.visitChildren(self)

    def focusedLinearQueryStatementPart(self):
        localctx = GQLParser.FocusedLinearQueryStatementPartContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 196, self.RULE_focusedLinearQueryStatementPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self.useGraphClause()
            self.state = 1757
            self.simpleLinearQueryStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FocusedLinearQueryAndPrimitiveResultStatementPartContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useGraphClause(self):
            return self.getTypedRuleContext(GQLParser.UseGraphClauseContext, 0)

        def simpleLinearQueryStatement(self):
            return self.getTypedRuleContext(
                GQLParser.SimpleLinearQueryStatementContext, 0
            )

        def primitiveResultStatement(self):
            return self.getTypedRuleContext(
                GQLParser.PrimitiveResultStatementContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_focusedLinearQueryAndPrimitiveResultStatementPart

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(
                listener, "enterFocusedLinearQueryAndPrimitiveResultStatementPart"
            ):
                listener.enterFocusedLinearQueryAndPrimitiveResultStatementPart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(
                listener, "exitFocusedLinearQueryAndPrimitiveResultStatementPart"
            ):
                listener.exitFocusedLinearQueryAndPrimitiveResultStatementPart(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(
                visitor, "visitFocusedLinearQueryAndPrimitiveResultStatementPart"
            ):
                return visitor.visitFocusedLinearQueryAndPrimitiveResultStatementPart(
                    self
                )
            else:
                return visitor.visitChildren(self)

    def focusedLinearQueryAndPrimitiveResultStatementPart(self):
        localctx = GQLParser.FocusedLinearQueryAndPrimitiveResultStatementPartContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 198, self.RULE_focusedLinearQueryAndPrimitiveResultStatementPart
        )
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1759
            self.useGraphClause()
            self.state = 1760
            self.simpleLinearQueryStatement()
            self.state = 1761
            self.primitiveResultStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FocusedPrimitiveResultStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useGraphClause(self):
            return self.getTypedRuleContext(GQLParser.UseGraphClauseContext, 0)

        def primitiveResultStatement(self):
            return self.getTypedRuleContext(
                GQLParser.PrimitiveResultStatementContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_focusedPrimitiveResultStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFocusedPrimitiveResultStatement"):
                listener.enterFocusedPrimitiveResultStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFocusedPrimitiveResultStatement"):
                listener.exitFocusedPrimitiveResultStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFocusedPrimitiveResultStatement"):
                return visitor.visitFocusedPrimitiveResultStatement(self)
            else:
                return visitor.visitChildren(self)

    def focusedPrimitiveResultStatement(self):
        localctx = GQLParser.FocusedPrimitiveResultStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 200, self.RULE_focusedPrimitiveResultStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1763
            self.useGraphClause()
            self.state = 1764
            self.primitiveResultStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FocusedNestedQuerySpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useGraphClause(self):
            return self.getTypedRuleContext(GQLParser.UseGraphClauseContext, 0)

        def nestedQuerySpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NestedQuerySpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_focusedNestedQuerySpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFocusedNestedQuerySpecification"):
                listener.enterFocusedNestedQuerySpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFocusedNestedQuerySpecification"):
                listener.exitFocusedNestedQuerySpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFocusedNestedQuerySpecification"):
                return visitor.visitFocusedNestedQuerySpecification(self)
            else:
                return visitor.visitChildren(self)

    def focusedNestedQuerySpecification(self):
        localctx = GQLParser.FocusedNestedQuerySpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 202, self.RULE_focusedNestedQuerySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            self.useGraphClause()
            self.state = 1767
            self.nestedQuerySpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AmbientLinearQueryStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveResultStatement(self):
            return self.getTypedRuleContext(
                GQLParser.PrimitiveResultStatementContext, 0
            )

        def simpleLinearQueryStatement(self):
            return self.getTypedRuleContext(
                GQLParser.SimpleLinearQueryStatementContext, 0
            )

        def nestedQuerySpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NestedQuerySpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_ambientLinearQueryStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAmbientLinearQueryStatement"):
                listener.enterAmbientLinearQueryStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAmbientLinearQueryStatement"):
                listener.exitAmbientLinearQueryStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAmbientLinearQueryStatement"):
                return visitor.visitAmbientLinearQueryStatement(self)
            else:
                return visitor.visitChildren(self)

    def ambientLinearQueryStatement(self):
        localctx = GQLParser.AmbientLinearQueryStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 204, self.RULE_ambientLinearQueryStatement)
        self._la = 0  # Token type
        try:
            self.state = 1774
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44, 91, 92, 100, 130, 132, 143, 159, 160, 162, 180, 195]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    _la == 44
                    or (
                        ((_la - 91) & ~0x3F) == 0
                        and ((1 << (_la - 91)) & 4506348406440449) != 0
                    )
                    or (
                        ((_la - 159) & ~0x3F) == 0
                        and ((1 << (_la - 159)) & 68719476747) != 0
                    )
                ):
                    self.state = 1769
                    self.simpleLinearQueryStatement()

                self.state = 1772
                self.primitiveResultStatement()
                pass
            elif token in [368]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1773
                self.nestedQuerySpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleLinearQueryStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleQueryStatement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.SimpleQueryStatementContext)
            else:
                return self.getTypedRuleContext(
                    GQLParser.SimpleQueryStatementContext, i
                )

        def getRuleIndex(self):
            return GQLParser.RULE_simpleLinearQueryStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpleLinearQueryStatement"):
                listener.enterSimpleLinearQueryStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpleLinearQueryStatement"):
                listener.exitSimpleLinearQueryStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimpleLinearQueryStatement"):
                return visitor.visitSimpleLinearQueryStatement(self)
            else:
                return visitor.visitChildren(self)

    def simpleLinearQueryStatement(self):
        localctx = GQLParser.SimpleLinearQueryStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 206, self.RULE_simpleLinearQueryStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1776
                self.simpleQueryStatement()
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    _la == 44
                    or (
                        ((_la - 91) & ~0x3F) == 0
                        and ((1 << (_la - 91)) & 4506348406440449) != 0
                    )
                    or (
                        ((_la - 159) & ~0x3F) == 0
                        and ((1 << (_la - 159)) & 68719476747) != 0
                    )
                ):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleQueryStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveQueryStatement(self):
            return self.getTypedRuleContext(GQLParser.PrimitiveQueryStatementContext, 0)

        def callQueryStatement(self):
            return self.getTypedRuleContext(GQLParser.CallQueryStatementContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simpleQueryStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpleQueryStatement"):
                listener.enterSimpleQueryStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpleQueryStatement"):
                listener.exitSimpleQueryStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimpleQueryStatement"):
                return visitor.visitSimpleQueryStatement(self)
            else:
                return visitor.visitChildren(self)

    def simpleQueryStatement(self):
        localctx = GQLParser.SimpleQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_simpleQueryStatement)
        try:
            self.state = 1783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 102, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1781
                self.primitiveQueryStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1782
                self.callQueryStatement()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveQueryStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchStatement(self):
            return self.getTypedRuleContext(GQLParser.MatchStatementContext, 0)

        def letStatement(self):
            return self.getTypedRuleContext(GQLParser.LetStatementContext, 0)

        def forStatement(self):
            return self.getTypedRuleContext(GQLParser.ForStatementContext, 0)

        def filterStatement(self):
            return self.getTypedRuleContext(GQLParser.FilterStatementContext, 0)

        def orderByAndPageStatement(self):
            return self.getTypedRuleContext(GQLParser.OrderByAndPageStatementContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_primitiveQueryStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimitiveQueryStatement"):
                listener.enterPrimitiveQueryStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimitiveQueryStatement"):
                listener.exitPrimitiveQueryStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimitiveQueryStatement"):
                return visitor.visitPrimitiveQueryStatement(self)
            else:
                return visitor.visitChildren(self)

    def primitiveQueryStatement(self):
        localctx = GQLParser.PrimitiveQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_primitiveQueryStatement)
        try:
            self.state = 1790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143, 160]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1785
                self.matchStatement()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1786
                self.letStatement()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1787
                self.forStatement()
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1788
                self.filterStatement()
                pass
            elif token in [132, 159, 162, 195]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1789
                self.orderByAndPageStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MatchStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleMatchStatement(self):
            return self.getTypedRuleContext(GQLParser.SimpleMatchStatementContext, 0)

        def optionalMatchStatement(self):
            return self.getTypedRuleContext(GQLParser.OptionalMatchStatementContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_matchStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMatchStatement"):
                listener.enterMatchStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMatchStatement"):
                listener.exitMatchStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMatchStatement"):
                return visitor.visitMatchStatement(self)
            else:
                return visitor.visitChildren(self)

    def matchStatement(self):
        localctx = GQLParser.MatchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_matchStatement)
        try:
            self.state = 1794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1792
                self.simpleMatchStatement()
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1793
                self.optionalMatchStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleMatchStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(GQLParser.MATCH, 0)

        def graphPatternBindingTable(self):
            return self.getTypedRuleContext(
                GQLParser.GraphPatternBindingTableContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_simpleMatchStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpleMatchStatement"):
                listener.enterSimpleMatchStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpleMatchStatement"):
                listener.exitSimpleMatchStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimpleMatchStatement"):
                return visitor.visitSimpleMatchStatement(self)
            else:
                return visitor.visitChildren(self)

    def simpleMatchStatement(self):
        localctx = GQLParser.SimpleMatchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_simpleMatchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1796
            self.match(GQLParser.MATCH)
            self.state = 1797
            self.graphPatternBindingTable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionalMatchStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(GQLParser.OPTIONAL, 0)

        def optionalOperand(self):
            return self.getTypedRuleContext(GQLParser.OptionalOperandContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_optionalMatchStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOptionalMatchStatement"):
                listener.enterOptionalMatchStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOptionalMatchStatement"):
                listener.exitOptionalMatchStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOptionalMatchStatement"):
                return visitor.visitOptionalMatchStatement(self)
            else:
                return visitor.visitChildren(self)

    def optionalMatchStatement(self):
        localctx = GQLParser.OptionalMatchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_optionalMatchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1799
            self.match(GQLParser.OPTIONAL)
            self.state = 1800
            self.optionalOperand()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionalOperandContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleMatchStatement(self):
            return self.getTypedRuleContext(GQLParser.SimpleMatchStatementContext, 0)

        def LEFT_BRACE(self):
            return self.getToken(GQLParser.LEFT_BRACE, 0)

        def matchStatementBlock(self):
            return self.getTypedRuleContext(GQLParser.MatchStatementBlockContext, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GQLParser.RIGHT_BRACE, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_optionalOperand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOptionalOperand"):
                listener.enterOptionalOperand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOptionalOperand"):
                listener.exitOptionalOperand(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOptionalOperand"):
                return visitor.visitOptionalOperand(self)
            else:
                return visitor.visitChildren(self)

    def optionalOperand(self):
        localctx = GQLParser.OptionalOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_optionalOperand)
        try:
            self.state = 1811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1802
                self.simpleMatchStatement()
                pass
            elif token in [368]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1803
                self.match(GQLParser.LEFT_BRACE)
                self.state = 1804
                self.matchStatementBlock()
                self.state = 1805
                self.match(GQLParser.RIGHT_BRACE)
                pass
            elif token in [370]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1807
                self.match(GQLParser.LEFT_PAREN)
                self.state = 1808
                self.matchStatementBlock()
                self.state = 1809
                self.match(GQLParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MatchStatementBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchStatement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.MatchStatementContext)
            else:
                return self.getTypedRuleContext(GQLParser.MatchStatementContext, i)

        def getRuleIndex(self):
            return GQLParser.RULE_matchStatementBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMatchStatementBlock"):
                listener.enterMatchStatementBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMatchStatementBlock"):
                listener.exitMatchStatementBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMatchStatementBlock"):
                return visitor.visitMatchStatementBlock(self)
            else:
                return visitor.visitChildren(self)

    def matchStatementBlock(self):
        localctx = GQLParser.MatchStatementBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_matchStatementBlock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1813
                self.matchStatement()
                self.state = 1816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 143 or _la == 160):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallQueryStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callProcedureStatement(self):
            return self.getTypedRuleContext(GQLParser.CallProcedureStatementContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_callQueryStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCallQueryStatement"):
                listener.enterCallQueryStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCallQueryStatement"):
                listener.exitCallQueryStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCallQueryStatement"):
                return visitor.visitCallQueryStatement(self)
            else:
                return visitor.visitChildren(self)

    def callQueryStatement(self):
        localctx = GQLParser.CallQueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_callQueryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1818
            self.callProcedureStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FilterStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(GQLParser.FILTER, 0)

        def whereClause(self):
            return self.getTypedRuleContext(GQLParser.WhereClauseContext, 0)

        def searchCondition(self):
            return self.getTypedRuleContext(GQLParser.SearchConditionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_filterStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFilterStatement"):
                listener.enterFilterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFilterStatement"):
                listener.exitFilterStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFilterStatement"):
                return visitor.visitFilterStatement(self)
            else:
                return visitor.visitChildren(self)

    def filterStatement(self):
        localctx = GQLParser.FilterStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_filterStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self.match(GQLParser.FILTER)
            self.state = 1823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [230]:
                self.state = 1821
                self.whereClause()
                pass
            elif token in [
                2,
                3,
                4,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                23,
                26,
                30,
                32,
                33,
                40,
                42,
                45,
                46,
                47,
                48,
                49,
                51,
                52,
                55,
                56,
                59,
                60,
                61,
                62,
                64,
                68,
                69,
                70,
                71,
                75,
                83,
                84,
                85,
                89,
                90,
                99,
                129,
                130,
                133,
                134,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                144,
                145,
                147,
                151,
                152,
                154,
                156,
                157,
                166,
                167,
                169,
                170,
                171,
                173,
                174,
                176,
                181,
                183,
                184,
                189,
                192,
                193,
                194,
                198,
                200,
                201,
                203,
                204,
                205,
                207,
                208,
                210,
                222,
                225,
                236,
                237,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
                326,
                368,
                369,
                370,
                372,
                375,
            ]:
                self.state = 1822
                self.searchCondition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LetStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(GQLParser.LET, 0)

        def letVariableDefinitionList(self):
            return self.getTypedRuleContext(
                GQLParser.LetVariableDefinitionListContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_letStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLetStatement"):
                listener.enterLetStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLetStatement"):
                listener.exitLetStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLetStatement"):
                return visitor.visitLetStatement(self)
            else:
                return visitor.visitChildren(self)

    def letStatement(self):
        localctx = GQLParser.LetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_letStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1825
            self.match(GQLParser.LET)
            self.state = 1826
            self.letVariableDefinitionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LetVariableDefinitionListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letVariableDefinition(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.LetVariableDefinitionContext)
            else:
                return self.getTypedRuleContext(
                    GQLParser.LetVariableDefinitionContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_letVariableDefinitionList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLetVariableDefinitionList"):
                listener.enterLetVariableDefinitionList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLetVariableDefinitionList"):
                listener.exitLetVariableDefinitionList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLetVariableDefinitionList"):
                return visitor.visitLetVariableDefinitionList(self)
            else:
                return visitor.visitChildren(self)

    def letVariableDefinitionList(self):
        localctx = GQLParser.LetVariableDefinitionListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 228, self.RULE_letVariableDefinitionList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.letVariableDefinition()
            self.state = 1833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 1829
                self.match(GQLParser.COMMA)
                self.state = 1830
                self.letVariableDefinition()
                self.state = 1835
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LetVariableDefinitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueVariableDefinition(self):
            return self.getTypedRuleContext(GQLParser.ValueVariableDefinitionContext, 0)

        def bindingVariable(self):
            return self.getTypedRuleContext(GQLParser.BindingVariableContext, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(GQLParser.EQUALS_OPERATOR, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_letVariableDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLetVariableDefinition"):
                listener.enterLetVariableDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLetVariableDefinition"):
                listener.exitLetVariableDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLetVariableDefinition"):
                return visitor.visitLetVariableDefinition(self)
            else:
                return visitor.visitChildren(self)

    def letVariableDefinition(self):
        localctx = GQLParser.LetVariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_letVariableDefinition)
        try:
            self.state = 1841
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [225]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1836
                self.valueVariableDefinition()
                pass
            elif token in [
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1837
                self.bindingVariable()
                self.state = 1838
                self.match(GQLParser.EQUALS_OPERATOR)
                self.state = 1839
                self.valueExpression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(GQLParser.FOR, 0)

        def forItem(self):
            return self.getTypedRuleContext(GQLParser.ForItemContext, 0)

        def forOrdinalityOrOffset(self):
            return self.getTypedRuleContext(GQLParser.ForOrdinalityOrOffsetContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_forStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForStatement"):
                listener.enterForStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForStatement"):
                listener.exitForStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitForStatement"):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)

    def forStatement(self):
        localctx = GQLParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_forStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            self.match(GQLParser.FOR)
            self.state = 1844
            self.forItem()
            self.state = 1846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 231:
                self.state = 1845
                self.forOrdinalityOrOffset()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forItemAlias(self):
            return self.getTypedRuleContext(GQLParser.ForItemAliasContext, 0)

        def forItemSource(self):
            return self.getTypedRuleContext(GQLParser.ForItemSourceContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_forItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForItem"):
                listener.enterForItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForItem"):
                listener.exitForItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitForItem"):
                return visitor.visitForItem(self)
            else:
                return visitor.visitChildren(self)

    def forItem(self):
        localctx = GQLParser.ForItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_forItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1848
            self.forItemAlias()
            self.state = 1849
            self.forItemSource()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForItemAliasContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariable(self):
            return self.getTypedRuleContext(GQLParser.BindingVariableContext, 0)

        def IN(self):
            return self.getToken(GQLParser.IN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_forItemAlias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForItemAlias"):
                listener.enterForItemAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForItemAlias"):
                listener.exitForItemAlias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitForItemAlias"):
                return visitor.visitForItemAlias(self)
            else:
                return visitor.visitChildren(self)

    def forItemAlias(self):
        localctx = GQLParser.ForItemAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_forItemAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1851
            self.bindingVariable()
            self.state = 1852
            self.match(GQLParser.IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForItemSourceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_forItemSource

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForItemSource"):
                listener.enterForItemSource(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForItemSource"):
                listener.exitForItemSource(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitForItemSource"):
                return visitor.visitForItemSource(self)
            else:
                return visitor.visitChildren(self)

    def forItemSource(self):
        localctx = GQLParser.ForItemSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_forItemSource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1854
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForOrdinalityOrOffsetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(GQLParser.WITH, 0)

        def bindingVariable(self):
            return self.getTypedRuleContext(GQLParser.BindingVariableContext, 0)

        def ORDINALITY(self):
            return self.getToken(GQLParser.ORDINALITY, 0)

        def OFFSET(self):
            return self.getToken(GQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_forOrdinalityOrOffset

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForOrdinalityOrOffset"):
                listener.enterForOrdinalityOrOffset(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForOrdinalityOrOffset"):
                listener.exitForOrdinalityOrOffset(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitForOrdinalityOrOffset"):
                return visitor.visitForOrdinalityOrOffset(self)
            else:
                return visitor.visitChildren(self)

    def forOrdinalityOrOffset(self):
        localctx = GQLParser.ForOrdinalityOrOffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_forOrdinalityOrOffset)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1856
            self.match(GQLParser.WITH)
            self.state = 1857
            _la = self._input.LA(1)
            if not (_la == 159 or _la == 304):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1858
            self.bindingVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByAndPageStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderByClause(self):
            return self.getTypedRuleContext(GQLParser.OrderByClauseContext, 0)

        def offsetClause(self):
            return self.getTypedRuleContext(GQLParser.OffsetClauseContext, 0)

        def limitClause(self):
            return self.getTypedRuleContext(GQLParser.LimitClauseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_orderByAndPageStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderByAndPageStatement"):
                listener.enterOrderByAndPageStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderByAndPageStatement"):
                listener.exitOrderByAndPageStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrderByAndPageStatement"):
                return visitor.visitOrderByAndPageStatement(self)
            else:
                return visitor.visitChildren(self)

    def orderByAndPageStatement(self):
        localctx = GQLParser.OrderByAndPageStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_orderByAndPageStatement)
        try:
            self.state = 1872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [162]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1860
                self.orderByClause()
                self.state = 1862
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 111, self._ctx)
                if la_ == 1:
                    self.state = 1861
                    self.offsetClause()

                self.state = 1865
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 112, self._ctx)
                if la_ == 1:
                    self.state = 1864
                    self.limitClause()

                pass
            elif token in [159, 195]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1867
                self.offsetClause()
                self.state = 1869
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 113, self._ctx)
                if la_ == 1:
                    self.state = 1868
                    self.limitClause()

                pass
            elif token in [132]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1871
                self.limitClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveResultStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnStatement(self):
            return self.getTypedRuleContext(GQLParser.ReturnStatementContext, 0)

        def orderByAndPageStatement(self):
            return self.getTypedRuleContext(GQLParser.OrderByAndPageStatementContext, 0)

        def FINISH(self):
            return self.getToken(GQLParser.FINISH, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_primitiveResultStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimitiveResultStatement"):
                listener.enterPrimitiveResultStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimitiveResultStatement"):
                listener.exitPrimitiveResultStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimitiveResultStatement"):
                return visitor.visitPrimitiveResultStatement(self)
            else:
                return visitor.visitChildren(self)

    def primitiveResultStatement(self):
        localctx = GQLParser.PrimitiveResultStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 244, self.RULE_primitiveResultStatement)
        try:
            self.state = 1879
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [180]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1874
                self.returnStatement()
                self.state = 1876
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 115, self._ctx)
                if la_ == 1:
                    self.state = 1875
                    self.orderByAndPageStatement()

                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1878
                self.match(GQLParser.FINISH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(GQLParser.RETURN, 0)

        def returnStatementBody(self):
            return self.getTypedRuleContext(GQLParser.ReturnStatementBodyContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_returnStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturnStatement"):
                listener.enterReturnStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturnStatement"):
                listener.exitReturnStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturnStatement"):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)

    def returnStatement(self):
        localctx = GQLParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1881
            self.match(GQLParser.RETURN)
            self.state = 1882
            self.returnStatementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(GQLParser.ASTERISK, 0)

        def returnItemList(self):
            return self.getTypedRuleContext(GQLParser.ReturnItemListContext, 0)

        def setQuantifier(self):
            return self.getTypedRuleContext(GQLParser.SetQuantifierContext, 0)

        def groupByClause(self):
            return self.getTypedRuleContext(GQLParser.GroupByClauseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_returnStatementBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturnStatementBody"):
                listener.enterReturnStatementBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturnStatementBody"):
                listener.exitReturnStatementBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturnStatementBody"):
                return visitor.visitReturnStatementBody(self)
            else:
                return visitor.visitChildren(self)

    def returnStatementBody(self):
        localctx = GQLParser.ReturnStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_returnStatementBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 22 or _la == 80:
                self.state = 1884
                self.setQuantifier()

            self.state = 1889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [358]:
                self.state = 1887
                self.match(GQLParser.ASTERISK)
                pass
            elif token in [
                2,
                3,
                4,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                23,
                26,
                30,
                32,
                33,
                40,
                42,
                45,
                46,
                47,
                48,
                49,
                51,
                52,
                55,
                56,
                59,
                60,
                61,
                62,
                64,
                68,
                69,
                70,
                71,
                75,
                83,
                84,
                85,
                89,
                90,
                99,
                129,
                130,
                133,
                134,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                144,
                145,
                147,
                151,
                152,
                154,
                156,
                157,
                166,
                167,
                169,
                170,
                171,
                173,
                174,
                176,
                181,
                183,
                184,
                189,
                192,
                193,
                194,
                198,
                200,
                201,
                203,
                204,
                205,
                207,
                208,
                210,
                222,
                225,
                236,
                237,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
                326,
                368,
                369,
                370,
                372,
                375,
            ]:
                self.state = 1888
                self.returnItemList()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 119, self._ctx)
            if la_ == 1:
                self.state = 1891
                self.groupByClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnItemListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.ReturnItemContext)
            else:
                return self.getTypedRuleContext(GQLParser.ReturnItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_returnItemList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturnItemList"):
                listener.enterReturnItemList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturnItemList"):
                listener.exitReturnItemList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturnItemList"):
                return visitor.visitReturnItemList(self)
            else:
                return visitor.visitChildren(self)

    def returnItemList(self):
        localctx = GQLParser.ReturnItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_returnItemList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            self.returnItem()
            self.state = 1899
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1895
                    self.match(GQLParser.COMMA)
                    self.state = 1896
                    self.returnItem()
                self.state = 1901
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregatingValueExpression(self):
            return self.getTypedRuleContext(
                GQLParser.AggregatingValueExpressionContext, 0
            )

        def returnItemAlias(self):
            return self.getTypedRuleContext(GQLParser.ReturnItemAliasContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_returnItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturnItem"):
                listener.enterReturnItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturnItem"):
                listener.exitReturnItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturnItem"):
                return visitor.visitReturnItem(self)
            else:
                return visitor.visitChildren(self)

    def returnItem(self):
        localctx = GQLParser.ReturnItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_returnItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1902
            self.aggregatingValueExpression()
            self.state = 1904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 121, self._ctx)
            if la_ == 1:
                self.state = 1903
                self.returnItemAlias()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnItemAliasContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(GQLParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(GQLParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_returnItemAlias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturnItemAlias"):
                listener.enterReturnItemAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturnItemAlias"):
                listener.exitReturnItemAlias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturnItemAlias"):
                return visitor.visitReturnItemAlias(self)
            else:
                return visitor.visitChildren(self)

    def returnItemAlias(self):
        localctx = GQLParser.ReturnItemAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_returnItemAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1906
            self.match(GQLParser.AS)
            self.state = 1907
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(GQLParser.SELECT, 0)

        def ASTERISK(self):
            return self.getToken(GQLParser.ASTERISK, 0)

        def selectItemList(self):
            return self.getTypedRuleContext(GQLParser.SelectItemListContext, 0)

        def setQuantifier(self):
            return self.getTypedRuleContext(GQLParser.SetQuantifierContext, 0)

        def selectStatementBody(self):
            return self.getTypedRuleContext(GQLParser.SelectStatementBodyContext, 0)

        def whereClause(self):
            return self.getTypedRuleContext(GQLParser.WhereClauseContext, 0)

        def groupByClause(self):
            return self.getTypedRuleContext(GQLParser.GroupByClauseContext, 0)

        def havingClause(self):
            return self.getTypedRuleContext(GQLParser.HavingClauseContext, 0)

        def orderByClause(self):
            return self.getTypedRuleContext(GQLParser.OrderByClauseContext, 0)

        def offsetClause(self):
            return self.getTypedRuleContext(GQLParser.OffsetClauseContext, 0)

        def limitClause(self):
            return self.getTypedRuleContext(GQLParser.LimitClauseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_selectStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectStatement"):
                listener.enterSelectStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectStatement"):
                listener.exitSelectStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectStatement"):
                return visitor.visitSelectStatement(self)
            else:
                return visitor.visitChildren(self)

    def selectStatement(self):
        localctx = GQLParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_selectStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1909
            self.match(GQLParser.SELECT)
            self.state = 1911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 22 or _la == 80:
                self.state = 1910
                self.setQuantifier()

            self.state = 1915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [358]:
                self.state = 1913
                self.match(GQLParser.ASTERISK)
                pass
            elif token in [
                2,
                3,
                4,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                23,
                26,
                30,
                32,
                33,
                40,
                42,
                45,
                46,
                47,
                48,
                49,
                51,
                52,
                55,
                56,
                59,
                60,
                61,
                62,
                64,
                68,
                69,
                70,
                71,
                75,
                83,
                84,
                85,
                89,
                90,
                99,
                129,
                130,
                133,
                134,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                144,
                145,
                147,
                151,
                152,
                154,
                156,
                157,
                166,
                167,
                169,
                170,
                171,
                173,
                174,
                176,
                181,
                183,
                184,
                189,
                192,
                193,
                194,
                198,
                200,
                201,
                203,
                204,
                205,
                207,
                208,
                210,
                222,
                225,
                236,
                237,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
                326,
                368,
                369,
                370,
                372,
                375,
            ]:
                self.state = 1914
                self.selectItemList()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 130, self._ctx)
            if la_ == 1:
                self.state = 1917
                self.selectStatementBody()
                self.state = 1919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 124, self._ctx)
                if la_ == 1:
                    self.state = 1918
                    self.whereClause()

                self.state = 1922
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 125, self._ctx)
                if la_ == 1:
                    self.state = 1921
                    self.groupByClause()

                self.state = 1925
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 126, self._ctx)
                if la_ == 1:
                    self.state = 1924
                    self.havingClause()

                self.state = 1928
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 127, self._ctx)
                if la_ == 1:
                    self.state = 1927
                    self.orderByClause()

                self.state = 1931
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 128, self._ctx)
                if la_ == 1:
                    self.state = 1930
                    self.offsetClause()

                self.state = 1934
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 129, self._ctx)
                if la_ == 1:
                    self.state = 1933
                    self.limitClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectItemListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(GQLParser.SelectItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_selectItemList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectItemList"):
                listener.enterSelectItemList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectItemList"):
                listener.exitSelectItemList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectItemList"):
                return visitor.visitSelectItemList(self)
            else:
                return visitor.visitChildren(self)

    def selectItemList(self):
        localctx = GQLParser.SelectItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_selectItemList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1938
            self.selectItem()
            self.state = 1943
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 131, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1939
                    self.match(GQLParser.COMMA)
                    self.state = 1940
                    self.selectItem()
                self.state = 1945
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 131, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregatingValueExpression(self):
            return self.getTypedRuleContext(
                GQLParser.AggregatingValueExpressionContext, 0
            )

        def selectItemAlias(self):
            return self.getTypedRuleContext(GQLParser.SelectItemAliasContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_selectItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectItem"):
                listener.enterSelectItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectItem"):
                listener.exitSelectItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectItem"):
                return visitor.visitSelectItem(self)
            else:
                return visitor.visitChildren(self)

    def selectItem(self):
        localctx = GQLParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_selectItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1946
            self.aggregatingValueExpression()
            self.state = 1948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 132, self._ctx)
            if la_ == 1:
                self.state = 1947
                self.selectItemAlias()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectItemAliasContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(GQLParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(GQLParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_selectItemAlias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectItemAlias"):
                listener.enterSelectItemAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectItemAlias"):
                listener.exitSelectItemAlias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectItemAlias"):
                return visitor.visitSelectItemAlias(self)
            else:
                return visitor.visitChildren(self)

    def selectItemAlias(self):
        localctx = GQLParser.SelectItemAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_selectItemAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1950
            self.match(GQLParser.AS)
            self.state = 1951
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HavingClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(GQLParser.HAVING, 0)

        def searchCondition(self):
            return self.getTypedRuleContext(GQLParser.SearchConditionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_havingClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHavingClause"):
                listener.enterHavingClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHavingClause"):
                listener.exitHavingClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHavingClause"):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)

    def havingClause(self):
        localctx = GQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self.match(GQLParser.HAVING)
            self.state = 1954
            self.searchCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectStatementBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(GQLParser.FROM, 0)

        def selectGraphMatchList(self):
            return self.getTypedRuleContext(GQLParser.SelectGraphMatchListContext, 0)

        def selectQuerySpecification(self):
            return self.getTypedRuleContext(
                GQLParser.SelectQuerySpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_selectStatementBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectStatementBody"):
                listener.enterSelectStatementBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectStatementBody"):
                listener.exitSelectStatementBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectStatementBody"):
                return visitor.visitSelectStatementBody(self)
            else:
                return visitor.visitChildren(self)

    def selectStatementBody(self):
        localctx = GQLParser.SelectStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_selectStatementBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1956
            self.match(GQLParser.FROM)
            self.state = 1959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 133, self._ctx)
            if la_ == 1:
                self.state = 1957
                self.selectGraphMatchList()
                pass

            elif la_ == 2:
                self.state = 1958
                self.selectQuerySpecification()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectGraphMatchListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectGraphMatch(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.SelectGraphMatchContext)
            else:
                return self.getTypedRuleContext(GQLParser.SelectGraphMatchContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_selectGraphMatchList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectGraphMatchList"):
                listener.enterSelectGraphMatchList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectGraphMatchList"):
                listener.exitSelectGraphMatchList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectGraphMatchList"):
                return visitor.visitSelectGraphMatchList(self)
            else:
                return visitor.visitChildren(self)

    def selectGraphMatchList(self):
        localctx = GQLParser.SelectGraphMatchListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_selectGraphMatchList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1961
            self.selectGraphMatch()
            self.state = 1966
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 134, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1962
                    self.match(GQLParser.COMMA)
                    self.state = 1963
                    self.selectGraphMatch()
                self.state = 1968
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 134, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectGraphMatchContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphExpression(self):
            return self.getTypedRuleContext(GQLParser.GraphExpressionContext, 0)

        def matchStatement(self):
            return self.getTypedRuleContext(GQLParser.MatchStatementContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_selectGraphMatch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectGraphMatch"):
                listener.enterSelectGraphMatch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectGraphMatch"):
                listener.exitSelectGraphMatch(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectGraphMatch"):
                return visitor.visitSelectGraphMatch(self)
            else:
                return visitor.visitChildren(self)

    def selectGraphMatch(self):
        localctx = GQLParser.SelectGraphMatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_selectGraphMatch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.graphExpression()
            self.state = 1970
            self.matchStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectQuerySpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedQuerySpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NestedQuerySpecificationContext, 0
            )

        def graphExpression(self):
            return self.getTypedRuleContext(GQLParser.GraphExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_selectQuerySpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectQuerySpecification"):
                listener.enterSelectQuerySpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectQuerySpecification"):
                listener.exitSelectQuerySpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectQuerySpecification"):
                return visitor.visitSelectQuerySpecification(self)
            else:
                return visitor.visitChildren(self)

    def selectQuerySpecification(self):
        localctx = GQLParser.SelectQuerySpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 272, self.RULE_selectQuerySpecification)
        try:
            self.state = 1976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 135, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1972
                self.nestedQuerySpecification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1973
                self.graphExpression()
                self.state = 1974
                self.nestedQuerySpecification()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallProcedureStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(GQLParser.CALL, 0)

        def procedureCall(self):
            return self.getTypedRuleContext(GQLParser.ProcedureCallContext, 0)

        def OPTIONAL(self):
            return self.getToken(GQLParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_callProcedureStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCallProcedureStatement"):
                listener.enterCallProcedureStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCallProcedureStatement"):
                listener.exitCallProcedureStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCallProcedureStatement"):
                return visitor.visitCallProcedureStatement(self)
            else:
                return visitor.visitChildren(self)

    def callProcedureStatement(self):
        localctx = GQLParser.CallProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_callProcedureStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 160:
                self.state = 1978
                self.match(GQLParser.OPTIONAL)

            self.state = 1981
            self.match(GQLParser.CALL)
            self.state = 1982
            self.procedureCall()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureCallContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inlineProcedureCall(self):
            return self.getTypedRuleContext(GQLParser.InlineProcedureCallContext, 0)

        def namedProcedureCall(self):
            return self.getTypedRuleContext(GQLParser.NamedProcedureCallContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_procedureCall

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProcedureCall"):
                listener.enterProcedureCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProcedureCall"):
                listener.exitProcedureCall(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProcedureCall"):
                return visitor.visitProcedureCall(self)
            else:
                return visitor.visitChildren(self)

    def procedureCall(self):
        localctx = GQLParser.ProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_procedureCall)
        try:
            self.state = 1986
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [368, 370]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1984
                self.inlineProcedureCall()
                pass
            elif token in [
                4,
                5,
                67,
                106,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
                325,
                333,
                374,
                382,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1985
                self.namedProcedureCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlineProcedureCallContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedProcedureSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NestedProcedureSpecificationContext, 0
            )

        def variableScopeClause(self):
            return self.getTypedRuleContext(GQLParser.VariableScopeClauseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_inlineProcedureCall

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInlineProcedureCall"):
                listener.enterInlineProcedureCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInlineProcedureCall"):
                listener.exitInlineProcedureCall(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInlineProcedureCall"):
                return visitor.visitInlineProcedureCall(self)
            else:
                return visitor.visitChildren(self)

    def inlineProcedureCall(self):
        localctx = GQLParser.InlineProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_inlineProcedureCall)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 370:
                self.state = 1988
                self.variableScopeClause()

            self.state = 1991
            self.nestedProcedureSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableScopeClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def bindingVariableReferenceList(self):
            return self.getTypedRuleContext(
                GQLParser.BindingVariableReferenceListContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_variableScopeClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableScopeClause"):
                listener.enterVariableScopeClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableScopeClause"):
                listener.exitVariableScopeClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariableScopeClause"):
                return visitor.visitVariableScopeClause(self)
            else:
                return visitor.visitChildren(self)

    def variableScopeClause(self):
        localctx = GQLParser.VariableScopeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_variableScopeClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1993
            self.match(GQLParser.LEFT_PAREN)
            self.state = 1995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la - 277) & ~0x3F) == 0 and (
                (1 << (_la - 277)) & 281474976710655
            ) != 0:
                self.state = 1994
                self.bindingVariableReferenceList()

            self.state = 1997
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindingVariableReferenceListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    GQLParser.BindingVariableReferenceContext
                )
            else:
                return self.getTypedRuleContext(
                    GQLParser.BindingVariableReferenceContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_bindingVariableReferenceList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBindingVariableReferenceList"):
                listener.enterBindingVariableReferenceList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBindingVariableReferenceList"):
                listener.exitBindingVariableReferenceList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBindingVariableReferenceList"):
                return visitor.visitBindingVariableReferenceList(self)
            else:
                return visitor.visitChildren(self)

    def bindingVariableReferenceList(self):
        localctx = GQLParser.BindingVariableReferenceListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 282, self.RULE_bindingVariableReferenceList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1999
            self.bindingVariableReference()
            self.state = 2004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 2000
                self.match(GQLParser.COMMA)
                self.state = 2001
                self.bindingVariableReference()
                self.state = 2006
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamedProcedureCallContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureReference(self):
            return self.getTypedRuleContext(GQLParser.ProcedureReferenceContext, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def procedureArgumentList(self):
            return self.getTypedRuleContext(GQLParser.ProcedureArgumentListContext, 0)

        def yieldClause(self):
            return self.getTypedRuleContext(GQLParser.YieldClauseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_namedProcedureCall

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamedProcedureCall"):
                listener.enterNamedProcedureCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamedProcedureCall"):
                listener.exitNamedProcedureCall(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNamedProcedureCall"):
                return visitor.visitNamedProcedureCall(self)
            else:
                return visitor.visitChildren(self)

    def namedProcedureCall(self):
        localctx = GQLParser.NamedProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_namedProcedureCall)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2007
            self.procedureReference()
            self.state = 2008
            self.match(GQLParser.LEFT_PAREN)
            self.state = 2010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la) & ~0x3F) == 0 and ((1 << _la) & 8762849302180528028) != 0)
                or (
                    ((_la - 64) & ~0x3F) == 0 and ((1 << (_la - 64)) & 34464073969) != 0
                )
                or (
                    ((_la - 129) & ~0x3F) == 0
                    and ((1 << (_la - 129)) & -8011702113698201677) != 0
                )
                or (
                    ((_la - 193) & ~0x3F) == 0
                    and ((1 << (_la - 193)) & 26393111092643) != 0
                )
                or (
                    ((_la - 277) & ~0x3F) == 0
                    and ((1 << (_la - 277)) & 844424930131967) != 0
                )
                or (((_la - 368) & ~0x3F) == 0 and ((1 << (_la - 368)) & 151) != 0)
            ):
                self.state = 2009
                self.procedureArgumentList()

            self.state = 2012
            self.match(GQLParser.RIGHT_PAREN)
            self.state = 2014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 234:
                self.state = 2013
                self.yieldClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureArgumentListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureArgument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.ProcedureArgumentContext)
            else:
                return self.getTypedRuleContext(GQLParser.ProcedureArgumentContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_procedureArgumentList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProcedureArgumentList"):
                listener.enterProcedureArgumentList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProcedureArgumentList"):
                listener.exitProcedureArgumentList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProcedureArgumentList"):
                return visitor.visitProcedureArgumentList(self)
            else:
                return visitor.visitChildren(self)

    def procedureArgumentList(self):
        localctx = GQLParser.ProcedureArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_procedureArgumentList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self.procedureArgument()
            self.state = 2021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 2017
                self.match(GQLParser.COMMA)
                self.state = 2018
                self.procedureArgument()
                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureArgumentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_procedureArgument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProcedureArgument"):
                listener.enterProcedureArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProcedureArgument"):
                listener.exitProcedureArgument(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProcedureArgument"):
                return visitor.visitProcedureArgument(self)
            else:
                return visitor.visitChildren(self)

    def procedureArgument(self):
        localctx = GQLParser.ProcedureArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_procedureArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtSchemaClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(GQLParser.AT, 0)

        def schemaReference(self):
            return self.getTypedRuleContext(GQLParser.SchemaReferenceContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_atSchemaClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtSchemaClause"):
                listener.enterAtSchemaClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtSchemaClause"):
                listener.exitAtSchemaClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAtSchemaClause"):
                return visitor.visitAtSchemaClause(self)
            else:
                return visitor.visitChildren(self)

    def atSchemaClause(self):
        localctx = GQLParser.AtSchemaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_atSchemaClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self.match(GQLParser.AT)
            self.state = 2027
            self.schemaReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseGraphClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(GQLParser.USE, 0)

        def graphExpression(self):
            return self.getTypedRuleContext(GQLParser.GraphExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_useGraphClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUseGraphClause"):
                listener.enterUseGraphClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUseGraphClause"):
                listener.exitUseGraphClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUseGraphClause"):
                return visitor.visitUseGraphClause(self)
            else:
                return visitor.visitChildren(self)

    def useGraphClause(self):
        localctx = GQLParser.UseGraphClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_useGraphClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2029
            self.match(GQLParser.USE)
            self.state = 2030
            self.graphExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphPatternBindingTableContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphPattern(self):
            return self.getTypedRuleContext(GQLParser.GraphPatternContext, 0)

        def graphPatternYieldClause(self):
            return self.getTypedRuleContext(GQLParser.GraphPatternYieldClauseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_graphPatternBindingTable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphPatternBindingTable"):
                listener.enterGraphPatternBindingTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphPatternBindingTable"):
                listener.exitGraphPatternBindingTable(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphPatternBindingTable"):
                return visitor.visitGraphPatternBindingTable(self)
            else:
                return visitor.visitChildren(self)

    def graphPatternBindingTable(self):
        localctx = GQLParser.GraphPatternBindingTableContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 294, self.RULE_graphPatternBindingTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self.graphPattern()
            self.state = 2034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 144, self._ctx)
            if la_ == 1:
                self.state = 2033
                self.graphPatternYieldClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphPatternYieldClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(GQLParser.YIELD, 0)

        def graphPatternYieldItemList(self):
            return self.getTypedRuleContext(
                GQLParser.GraphPatternYieldItemListContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_graphPatternYieldClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphPatternYieldClause"):
                listener.enterGraphPatternYieldClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphPatternYieldClause"):
                listener.exitGraphPatternYieldClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphPatternYieldClause"):
                return visitor.visitGraphPatternYieldClause(self)
            else:
                return visitor.visitChildren(self)

    def graphPatternYieldClause(self):
        localctx = GQLParser.GraphPatternYieldClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_graphPatternYieldClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2036
            self.match(GQLParser.YIELD)
            self.state = 2037
            self.graphPatternYieldItemList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphPatternYieldItemListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphPatternYieldItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.GraphPatternYieldItemContext)
            else:
                return self.getTypedRuleContext(
                    GQLParser.GraphPatternYieldItemContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_graphPatternYieldItemList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphPatternYieldItemList"):
                listener.enterGraphPatternYieldItemList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphPatternYieldItemList"):
                listener.exitGraphPatternYieldItemList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphPatternYieldItemList"):
                return visitor.visitGraphPatternYieldItemList(self)
            else:
                return visitor.visitChildren(self)

    def graphPatternYieldItemList(self):
        localctx = GQLParser.GraphPatternYieldItemListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 298, self.RULE_graphPatternYieldItemList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2039
            self.graphPatternYieldItem()
            self.state = 2044
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2040
                    self.match(GQLParser.COMMA)
                    self.state = 2041
                    self.graphPatternYieldItem()
                self.state = 2046
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphPatternYieldItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.BindingVariableReferenceContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_graphPatternYieldItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphPatternYieldItem"):
                listener.enterGraphPatternYieldItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphPatternYieldItem"):
                listener.exitGraphPatternYieldItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphPatternYieldItem"):
                return visitor.visitGraphPatternYieldItem(self)
            else:
                return visitor.visitChildren(self)

    def graphPatternYieldItem(self):
        localctx = GQLParser.GraphPatternYieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_graphPatternYieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2047
            self.bindingVariableReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphPatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPatternList(self):
            return self.getTypedRuleContext(GQLParser.PathPatternListContext, 0)

        def matchMode(self):
            return self.getTypedRuleContext(GQLParser.MatchModeContext, 0)

        def keepClause(self):
            return self.getTypedRuleContext(GQLParser.KeepClauseContext, 0)

        def graphPatternWhereClause(self):
            return self.getTypedRuleContext(GQLParser.GraphPatternWhereClauseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_graphPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphPattern"):
                listener.enterGraphPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphPattern"):
                listener.exitGraphPattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphPattern"):
                return visitor.visitGraphPattern(self)
            else:
                return visitor.visitChildren(self)

    def graphPattern(self):
        localctx = GQLParser.GraphPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_graphPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 146, self._ctx)
            if la_ == 1:
                self.state = 2049
                self.matchMode()

            self.state = 2052
            self.pathPatternList()
            self.state = 2054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 147, self._ctx)
            if la_ == 1:
                self.state = 2053
                self.keepClause()

            self.state = 2057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 148, self._ctx)
            if la_ == 1:
                self.state = 2056
                self.graphPatternWhereClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MatchModeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def repeatableElementsMatchMode(self):
            return self.getTypedRuleContext(
                GQLParser.RepeatableElementsMatchModeContext, 0
            )

        def differentEdgesMatchMode(self):
            return self.getTypedRuleContext(GQLParser.DifferentEdgesMatchModeContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_matchMode

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMatchMode"):
                listener.enterMatchMode(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMatchMode"):
                listener.exitMatchMode(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMatchMode"):
                return visitor.visitMatchMode(self)
            else:
                return visitor.visitChildren(self)

    def matchMode(self):
        localctx = GQLParser.MatchModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_matchMode)
        try:
            self.state = 2061
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [309]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2059
                self.repeatableElementsMatchMode()
                pass
            elif token in [282]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2060
                self.differentEdgesMatchMode()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RepeatableElementsMatchModeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(GQLParser.REPEATABLE, 0)

        def elementBindingsOrElements(self):
            return self.getTypedRuleContext(
                GQLParser.ElementBindingsOrElementsContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_repeatableElementsMatchMode

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRepeatableElementsMatchMode"):
                listener.enterRepeatableElementsMatchMode(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRepeatableElementsMatchMode"):
                listener.exitRepeatableElementsMatchMode(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRepeatableElementsMatchMode"):
                return visitor.visitRepeatableElementsMatchMode(self)
            else:
                return visitor.visitChildren(self)

    def repeatableElementsMatchMode(self):
        localctx = GQLParser.RepeatableElementsMatchModeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 306, self.RULE_repeatableElementsMatchMode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.match(GQLParser.REPEATABLE)
            self.state = 2064
            self.elementBindingsOrElements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DifferentEdgesMatchModeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIFFERENT(self):
            return self.getToken(GQLParser.DIFFERENT, 0)

        def edgeBindingsOrEdges(self):
            return self.getTypedRuleContext(GQLParser.EdgeBindingsOrEdgesContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_differentEdgesMatchMode

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDifferentEdgesMatchMode"):
                listener.enterDifferentEdgesMatchMode(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDifferentEdgesMatchMode"):
                listener.exitDifferentEdgesMatchMode(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDifferentEdgesMatchMode"):
                return visitor.visitDifferentEdgesMatchMode(self)
            else:
                return visitor.visitChildren(self)

    def differentEdgesMatchMode(self):
        localctx = GQLParser.DifferentEdgesMatchModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_differentEdgesMatchMode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2066
            self.match(GQLParser.DIFFERENT)
            self.state = 2067
            self.edgeBindingsOrEdges()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementBindingsOrElementsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELEMENT(self):
            return self.getToken(GQLParser.ELEMENT, 0)

        def BINDINGS(self):
            return self.getToken(GQLParser.BINDINGS, 0)

        def ELEMENTS(self):
            return self.getToken(GQLParser.ELEMENTS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_elementBindingsOrElements

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementBindingsOrElements"):
                listener.enterElementBindingsOrElements(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementBindingsOrElements"):
                listener.exitElementBindingsOrElements(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementBindingsOrElements"):
                return visitor.visitElementBindingsOrElements(self)
            else:
                return visitor.visitChildren(self)

    def elementBindingsOrElements(self):
        localctx = GQLParser.ElementBindingsOrElementsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 310, self.RULE_elementBindingsOrElements)
        try:
            self.state = 2074
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [286]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2069
                self.match(GQLParser.ELEMENT)
                self.state = 2071
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 150, self._ctx)
                if la_ == 1:
                    self.state = 2070
                    self.match(GQLParser.BINDINGS)

                pass
            elif token in [287]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2073
                self.match(GQLParser.ELEMENTS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeBindingsOrEdgesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeSynonym(self):
            return self.getTypedRuleContext(GQLParser.EdgeSynonymContext, 0)

        def BINDINGS(self):
            return self.getToken(GQLParser.BINDINGS, 0)

        def edgesSynonym(self):
            return self.getTypedRuleContext(GQLParser.EdgesSynonymContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgeBindingsOrEdges

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeBindingsOrEdges"):
                listener.enterEdgeBindingsOrEdges(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeBindingsOrEdges"):
                listener.exitEdgeBindingsOrEdges(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeBindingsOrEdges"):
                return visitor.visitEdgeBindingsOrEdges(self)
            else:
                return visitor.visitChildren(self)

    def edgeBindingsOrEdges(self):
        localctx = GQLParser.EdgeBindingsOrEdgesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_edgeBindingsOrEdges)
        try:
            self.state = 2081
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [284, 307]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2076
                self.edgeSynonym()
                self.state = 2078
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 152, self._ctx)
                if la_ == 1:
                    self.state = 2077
                    self.match(GQLParser.BINDINGS)

                pass
            elif token in [285, 308]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2080
                self.edgesSynonym()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathPatternListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.PathPatternContext)
            else:
                return self.getTypedRuleContext(GQLParser.PathPatternContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_pathPatternList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathPatternList"):
                listener.enterPathPatternList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathPatternList"):
                listener.exitPathPatternList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathPatternList"):
                return visitor.visitPathPatternList(self)
            else:
                return visitor.visitChildren(self)

    def pathPatternList(self):
        localctx = GQLParser.PathPatternListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_pathPatternList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2083
            self.pathPattern()
            self.state = 2088
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 154, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2084
                    self.match(GQLParser.COMMA)
                    self.state = 2085
                    self.pathPattern()
                self.state = 2090
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 154, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathPatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPatternExpression(self):
            return self.getTypedRuleContext(GQLParser.PathPatternExpressionContext, 0)

        def pathVariableDeclaration(self):
            return self.getTypedRuleContext(GQLParser.PathVariableDeclarationContext, 0)

        def pathPatternPrefix(self):
            return self.getTypedRuleContext(GQLParser.PathPatternPrefixContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_pathPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathPattern"):
                listener.enterPathPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathPattern"):
                listener.exitPathPattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathPattern"):
                return visitor.visitPathPattern(self)
            else:
                return visitor.visitChildren(self)

    def pathPattern(self):
        localctx = GQLParser.PathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_pathPattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2092
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 155, self._ctx)
            if la_ == 1:
                self.state = 2091
                self.pathVariableDeclaration()

            self.state = 2095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == 22
                or _la == 25
                or (
                    ((_la - 277) & ~0x3F) == 0
                    and ((1 << (_la - 277)) & 9096740732929) != 0
                )
            ):
                self.state = 2094
                self.pathPatternPrefix()

            self.state = 2097
            self.pathPatternExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathVariableDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathVariable(self):
            return self.getTypedRuleContext(GQLParser.PathVariableContext, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(GQLParser.EQUALS_OPERATOR, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_pathVariableDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathVariableDeclaration"):
                listener.enterPathVariableDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathVariableDeclaration"):
                listener.exitPathVariableDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathVariableDeclaration"):
                return visitor.visitPathVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def pathVariableDeclaration(self):
        localctx = GQLParser.PathVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_pathVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2099
            self.pathVariable()
            self.state = 2100
            self.match(GQLParser.EQUALS_OPERATOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeepClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEEP(self):
            return self.getToken(GQLParser.KEEP, 0)

        def pathPatternPrefix(self):
            return self.getTypedRuleContext(GQLParser.PathPatternPrefixContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_keepClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKeepClause"):
                listener.enterKeepClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKeepClause"):
                listener.exitKeepClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKeepClause"):
                return visitor.visitKeepClause(self)
            else:
                return visitor.visitChildren(self)

    def keepClause(self):
        localctx = GQLParser.KeepClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_keepClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2102
            self.match(GQLParser.KEEP)
            self.state = 2103
            self.pathPatternPrefix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphPatternWhereClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(GQLParser.WHERE, 0)

        def searchCondition(self):
            return self.getTypedRuleContext(GQLParser.SearchConditionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_graphPatternWhereClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphPatternWhereClause"):
                listener.enterGraphPatternWhereClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphPatternWhereClause"):
                listener.exitGraphPatternWhereClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphPatternWhereClause"):
                return visitor.visitGraphPatternWhereClause(self)
            else:
                return visitor.visitChildren(self)

    def graphPatternWhereClause(self):
        localctx = GQLParser.GraphPatternWhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_graphPatternWhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2105
            self.match(GQLParser.WHERE)
            self.state = 2106
            self.searchCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertGraphPatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertPathPatternList(self):
            return self.getTypedRuleContext(GQLParser.InsertPathPatternListContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_insertGraphPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertGraphPattern"):
                listener.enterInsertGraphPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertGraphPattern"):
                listener.exitInsertGraphPattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInsertGraphPattern"):
                return visitor.visitInsertGraphPattern(self)
            else:
                return visitor.visitChildren(self)

    def insertGraphPattern(self):
        localctx = GQLParser.InsertGraphPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_insertGraphPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2108
            self.insertPathPatternList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertPathPatternListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertPathPattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.InsertPathPatternContext)
            else:
                return self.getTypedRuleContext(GQLParser.InsertPathPatternContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_insertPathPatternList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertPathPatternList"):
                listener.enterInsertPathPatternList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertPathPatternList"):
                listener.exitInsertPathPatternList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInsertPathPatternList"):
                return visitor.visitInsertPathPatternList(self)
            else:
                return visitor.visitChildren(self)

    def insertPathPatternList(self):
        localctx = GQLParser.InsertPathPatternListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_insertPathPatternList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2110
            self.insertPathPattern()
            self.state = 2115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 2111
                self.match(GQLParser.COMMA)
                self.state = 2112
                self.insertPathPattern()
                self.state = 2117
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertPathPatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertNodePattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.InsertNodePatternContext)
            else:
                return self.getTypedRuleContext(GQLParser.InsertNodePatternContext, i)

        def insertEdgePattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.InsertEdgePatternContext)
            else:
                return self.getTypedRuleContext(GQLParser.InsertEdgePatternContext, i)

        def getRuleIndex(self):
            return GQLParser.RULE_insertPathPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertPathPattern"):
                listener.enterInsertPathPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertPathPattern"):
                listener.exitInsertPathPattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInsertPathPattern"):
                return visitor.visitInsertPathPattern(self)
            else:
                return visitor.visitChildren(self)

    def insertPathPattern(self):
        localctx = GQLParser.InsertPathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_insertPathPattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2118
            self.insertNodePattern()
            self.state = 2124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la - 337) & ~0x3F) == 0 and ((1 << (_la - 337)) & 131137) != 0:
                self.state = 2119
                self.insertEdgePattern()
                self.state = 2120
                self.insertNodePattern()
                self.state = 2126
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertNodePatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def insertElementPatternFiller(self):
            return self.getTypedRuleContext(
                GQLParser.InsertElementPatternFillerContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_insertNodePattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertNodePattern"):
                listener.enterInsertNodePattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertNodePattern"):
                listener.exitInsertNodePattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInsertNodePattern"):
                return visitor.visitInsertNodePattern(self)
            else:
                return visitor.visitChildren(self)

    def insertNodePattern(self):
        localctx = GQLParser.InsertNodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_insertNodePattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2127
            self.match(GQLParser.LEFT_PAREN)
            self.state = 2129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == 127
                or (
                    ((_la - 277) & ~0x3F) == 0
                    and ((1 << (_la - 277)) & 281474976710655) != 0
                )
                or _la == 359
                or _la == 368
            ):
                self.state = 2128
                self.insertElementPatternFiller()

            self.state = 2131
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertEdgePatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertEdgePointingLeft(self):
            return self.getTypedRuleContext(GQLParser.InsertEdgePointingLeftContext, 0)

        def insertEdgePointingRight(self):
            return self.getTypedRuleContext(GQLParser.InsertEdgePointingRightContext, 0)

        def insertEdgeUndirected(self):
            return self.getTypedRuleContext(GQLParser.InsertEdgeUndirectedContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_insertEdgePattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertEdgePattern"):
                listener.enterInsertEdgePattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertEdgePattern"):
                listener.exitInsertEdgePattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInsertEdgePattern"):
                return visitor.visitInsertEdgePattern(self)
            else:
                return visitor.visitChildren(self)

    def insertEdgePattern(self):
        localctx = GQLParser.InsertEdgePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_insertEdgePattern)
        try:
            self.state = 2136
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [337]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2133
                self.insertEdgePointingLeft()
                pass
            elif token in [343]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2134
                self.insertEdgePointingRight()
                pass
            elif token in [354]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2135
                self.insertEdgeUndirected()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertEdgePointingLeftContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ARROW_BRACKET(self):
            return self.getToken(GQLParser.LEFT_ARROW_BRACKET, 0)

        def RIGHT_BRACKET_MINUS(self):
            return self.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0)

        def insertElementPatternFiller(self):
            return self.getTypedRuleContext(
                GQLParser.InsertElementPatternFillerContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_insertEdgePointingLeft

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertEdgePointingLeft"):
                listener.enterInsertEdgePointingLeft(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertEdgePointingLeft"):
                listener.exitInsertEdgePointingLeft(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInsertEdgePointingLeft"):
                return visitor.visitInsertEdgePointingLeft(self)
            else:
                return visitor.visitChildren(self)

    def insertEdgePointingLeft(self):
        localctx = GQLParser.InsertEdgePointingLeftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_insertEdgePointingLeft)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2138
            self.match(GQLParser.LEFT_ARROW_BRACKET)
            self.state = 2140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == 127
                or (
                    ((_la - 277) & ~0x3F) == 0
                    and ((1 << (_la - 277)) & 281474976710655) != 0
                )
                or _la == 359
                or _la == 368
            ):
                self.state = 2139
                self.insertElementPatternFiller()

            self.state = 2142
            self.match(GQLParser.RIGHT_BRACKET_MINUS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertEdgePointingRightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_LEFT_BRACKET(self):
            return self.getToken(GQLParser.MINUS_LEFT_BRACKET, 0)

        def BRACKET_RIGHT_ARROW(self):
            return self.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0)

        def insertElementPatternFiller(self):
            return self.getTypedRuleContext(
                GQLParser.InsertElementPatternFillerContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_insertEdgePointingRight

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertEdgePointingRight"):
                listener.enterInsertEdgePointingRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertEdgePointingRight"):
                listener.exitInsertEdgePointingRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInsertEdgePointingRight"):
                return visitor.visitInsertEdgePointingRight(self)
            else:
                return visitor.visitChildren(self)

    def insertEdgePointingRight(self):
        localctx = GQLParser.InsertEdgePointingRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_insertEdgePointingRight)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2144
            self.match(GQLParser.MINUS_LEFT_BRACKET)
            self.state = 2146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == 127
                or (
                    ((_la - 277) & ~0x3F) == 0
                    and ((1 << (_la - 277)) & 281474976710655) != 0
                )
                or _la == 359
                or _la == 368
            ):
                self.state = 2145
                self.insertElementPatternFiller()

            self.state = 2148
            self.match(GQLParser.BRACKET_RIGHT_ARROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertEdgeUndirectedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE_LEFT_BRACKET(self):
            return self.getToken(GQLParser.TILDE_LEFT_BRACKET, 0)

        def RIGHT_BRACKET_TILDE(self):
            return self.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0)

        def insertElementPatternFiller(self):
            return self.getTypedRuleContext(
                GQLParser.InsertElementPatternFillerContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_insertEdgeUndirected

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertEdgeUndirected"):
                listener.enterInsertEdgeUndirected(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertEdgeUndirected"):
                listener.exitInsertEdgeUndirected(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInsertEdgeUndirected"):
                return visitor.visitInsertEdgeUndirected(self)
            else:
                return visitor.visitChildren(self)

    def insertEdgeUndirected(self):
        localctx = GQLParser.InsertEdgeUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_insertEdgeUndirected)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2150
            self.match(GQLParser.TILDE_LEFT_BRACKET)
            self.state = 2152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == 127
                or (
                    ((_la - 277) & ~0x3F) == 0
                    and ((1 << (_la - 277)) & 281474976710655) != 0
                )
                or _la == 359
                or _la == 368
            ):
                self.state = 2151
                self.insertElementPatternFiller()

            self.state = 2154
            self.match(GQLParser.RIGHT_BRACKET_TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertElementPatternFillerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementVariableDeclaration(self):
            return self.getTypedRuleContext(
                GQLParser.ElementVariableDeclarationContext, 0
            )

        def labelAndPropertySetSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.LabelAndPropertySetSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_insertElementPatternFiller

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertElementPatternFiller"):
                listener.enterInsertElementPatternFiller(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertElementPatternFiller"):
                listener.exitInsertElementPatternFiller(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInsertElementPatternFiller"):
                return visitor.visitInsertElementPatternFiller(self)
            else:
                return visitor.visitChildren(self)

    def insertElementPatternFiller(self):
        localctx = GQLParser.InsertElementPatternFillerContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 340, self.RULE_insertElementPatternFiller)
        self._la = 0  # Token type
        try:
            self.state = 2164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 166, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2156
                self.elementVariableDeclaration()
                self.state = 2158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 127 or _la == 359 or _la == 368:
                    self.state = 2157
                    self.labelAndPropertySetSpecification()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la - 277) & ~0x3F) == 0 and (
                    (1 << (_la - 277)) & 281474976710655
                ) != 0:
                    self.state = 2160
                    self.elementVariableDeclaration()

                self.state = 2163
                self.labelAndPropertySetSpecification()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelAndPropertySetSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isOrColon(self):
            return self.getTypedRuleContext(GQLParser.IsOrColonContext, 0)

        def labelSetSpecification(self):
            return self.getTypedRuleContext(GQLParser.LabelSetSpecificationContext, 0)

        def elementPropertySpecification(self):
            return self.getTypedRuleContext(
                GQLParser.ElementPropertySpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_labelAndPropertySetSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabelAndPropertySetSpecification"):
                listener.enterLabelAndPropertySetSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabelAndPropertySetSpecification"):
                listener.exitLabelAndPropertySetSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabelAndPropertySetSpecification"):
                return visitor.visitLabelAndPropertySetSpecification(self)
            else:
                return visitor.visitChildren(self)

    def labelAndPropertySetSpecification(self):
        localctx = GQLParser.LabelAndPropertySetSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 342, self.RULE_labelAndPropertySetSpecification)
        self._la = 0  # Token type
        try:
            self.state = 2177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 169, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2166
                self.isOrColon()
                self.state = 2167
                self.labelSetSpecification()
                self.state = 2169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 368:
                    self.state = 2168
                    self.elementPropertySpecification()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 127 or _la == 359:
                    self.state = 2171
                    self.isOrColon()
                    self.state = 2172
                    self.labelSetSpecification()

                self.state = 2176
                self.elementPropertySpecification()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathPatternPrefixContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathModePrefix(self):
            return self.getTypedRuleContext(GQLParser.PathModePrefixContext, 0)

        def pathSearchPrefix(self):
            return self.getTypedRuleContext(GQLParser.PathSearchPrefixContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_pathPatternPrefix

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathPatternPrefix"):
                listener.enterPathPatternPrefix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathPatternPrefix"):
                listener.exitPathPatternPrefix(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathPatternPrefix"):
                return visitor.visitPathPatternPrefix(self)
            else:
                return visitor.visitChildren(self)

    def pathPatternPrefix(self):
        localctx = GQLParser.PathPatternPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_pathPatternPrefix)
        try:
            self.state = 2181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [277, 311, 315, 320]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2179
                self.pathModePrefix()
                pass
            elif token in [22, 25, 310]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2180
                self.pathSearchPrefix()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathModePrefixContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathMode(self):
            return self.getTypedRuleContext(GQLParser.PathModeContext, 0)

        def pathOrPaths(self):
            return self.getTypedRuleContext(GQLParser.PathOrPathsContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_pathModePrefix

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathModePrefix"):
                listener.enterPathModePrefix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathModePrefix"):
                listener.exitPathModePrefix(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathModePrefix"):
                return visitor.visitPathModePrefix(self)
            else:
                return visitor.visitChildren(self)

    def pathModePrefix(self):
        localctx = GQLParser.PathModePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_pathModePrefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2183
            self.pathMode()
            self.state = 2185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 171, self._ctx)
            if la_ == 1:
                self.state = 2184
                self.pathOrPaths()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathModeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WALK(self):
            return self.getToken(GQLParser.WALK, 0)

        def TRAIL(self):
            return self.getToken(GQLParser.TRAIL, 0)

        def SIMPLE(self):
            return self.getToken(GQLParser.SIMPLE, 0)

        def ACYCLIC(self):
            return self.getToken(GQLParser.ACYCLIC, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_pathMode

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathMode"):
                listener.enterPathMode(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathMode"):
                listener.exitPathMode(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathMode"):
                return visitor.visitPathMode(self)
            else:
                return visitor.visitChildren(self)

    def pathMode(self):
        localctx = GQLParser.PathModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_pathMode)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2187
            _la = self._input.LA(1)
            if not (
                ((_la - 277) & ~0x3F) == 0 and ((1 << (_la - 277)) & 9088150798337) != 0
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathSearchPrefixContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def allPathSearch(self):
            return self.getTypedRuleContext(GQLParser.AllPathSearchContext, 0)

        def anyPathSearch(self):
            return self.getTypedRuleContext(GQLParser.AnyPathSearchContext, 0)

        def shortestPathSearch(self):
            return self.getTypedRuleContext(GQLParser.ShortestPathSearchContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_pathSearchPrefix

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathSearchPrefix"):
                listener.enterPathSearchPrefix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathSearchPrefix"):
                listener.exitPathSearchPrefix(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathSearchPrefix"):
                return visitor.visitPathSearchPrefix(self)
            else:
                return visitor.visitChildren(self)

    def pathSearchPrefix(self):
        localctx = GQLParser.PathSearchPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_pathSearchPrefix)
        try:
            self.state = 2192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 172, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2189
                self.allPathSearch()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2190
                self.anyPathSearch()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2191
                self.shortestPathSearch()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AllPathSearchContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(GQLParser.ALL, 0)

        def pathMode(self):
            return self.getTypedRuleContext(GQLParser.PathModeContext, 0)

        def pathOrPaths(self):
            return self.getTypedRuleContext(GQLParser.PathOrPathsContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_allPathSearch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAllPathSearch"):
                listener.enterAllPathSearch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAllPathSearch"):
                listener.exitAllPathSearch(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAllPathSearch"):
                return visitor.visitAllPathSearch(self)
            else:
                return visitor.visitChildren(self)

    def allPathSearch(self):
        localctx = GQLParser.AllPathSearchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_allPathSearch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2194
            self.match(GQLParser.ALL)
            self.state = 2196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 173, self._ctx)
            if la_ == 1:
                self.state = 2195
                self.pathMode()

            self.state = 2199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 174, self._ctx)
            if la_ == 1:
                self.state = 2198
                self.pathOrPaths()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathOrPathsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH(self):
            return self.getToken(GQLParser.PATH, 0)

        def PATHS(self):
            return self.getToken(GQLParser.PATHS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_pathOrPaths

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathOrPaths"):
                listener.enterPathOrPaths(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathOrPaths"):
                listener.exitPathOrPaths(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathOrPaths"):
                return visitor.visitPathOrPaths(self)
            else:
                return visitor.visitChildren(self)

    def pathOrPaths(self):
        localctx = GQLParser.PathOrPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_pathOrPaths)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2201
            _la = self._input.LA(1)
            if not (_la == 166 or _la == 168):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnyPathSearchContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(GQLParser.ANY, 0)

        def numberOfPaths(self):
            return self.getTypedRuleContext(GQLParser.NumberOfPathsContext, 0)

        def pathMode(self):
            return self.getTypedRuleContext(GQLParser.PathModeContext, 0)

        def pathOrPaths(self):
            return self.getTypedRuleContext(GQLParser.PathOrPathsContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_anyPathSearch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnyPathSearch"):
                listener.enterAnyPathSearch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnyPathSearch"):
                listener.exitAnyPathSearch(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnyPathSearch"):
                return visitor.visitAnyPathSearch(self)
            else:
                return visitor.visitChildren(self)

    def anyPathSearch(self):
        localctx = GQLParser.AnyPathSearchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_anyPathSearch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2203
            self.match(GQLParser.ANY)
            self.state = 2205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 175, self._ctx)
            if la_ == 1:
                self.state = 2204
                self.numberOfPaths()

            self.state = 2208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 176, self._ctx)
            if la_ == 1:
                self.state = 2207
                self.pathMode()

            self.state = 2211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 177, self._ctx)
            if la_ == 1:
                self.state = 2210
                self.pathOrPaths()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberOfPathsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonNegativeIntegerSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NonNegativeIntegerSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_numberOfPaths

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumberOfPaths"):
                listener.enterNumberOfPaths(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumberOfPaths"):
                listener.exitNumberOfPaths(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumberOfPaths"):
                return visitor.visitNumberOfPaths(self)
            else:
                return visitor.visitChildren(self)

    def numberOfPaths(self):
        localctx = GQLParser.NumberOfPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_numberOfPaths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2213
            self.nonNegativeIntegerSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShortestPathSearchContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def allShortestPathSearch(self):
            return self.getTypedRuleContext(GQLParser.AllShortestPathSearchContext, 0)

        def anyShortestPathSearch(self):
            return self.getTypedRuleContext(GQLParser.AnyShortestPathSearchContext, 0)

        def countedShortestPathSearch(self):
            return self.getTypedRuleContext(
                GQLParser.CountedShortestPathSearchContext, 0
            )

        def countedShortestGroupSearch(self):
            return self.getTypedRuleContext(
                GQLParser.CountedShortestGroupSearchContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_shortestPathSearch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShortestPathSearch"):
                listener.enterShortestPathSearch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShortestPathSearch"):
                listener.exitShortestPathSearch(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitShortestPathSearch"):
                return visitor.visitShortestPathSearch(self)
            else:
                return visitor.visitChildren(self)

    def shortestPathSearch(self):
        localctx = GQLParser.ShortestPathSearchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_shortestPathSearch)
        try:
            self.state = 2219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 178, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2215
                self.allShortestPathSearch()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2216
                self.anyShortestPathSearch()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2217
                self.countedShortestPathSearch()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2218
                self.countedShortestGroupSearch()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AllShortestPathSearchContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(GQLParser.ALL, 0)

        def SHORTEST(self):
            return self.getToken(GQLParser.SHORTEST, 0)

        def pathMode(self):
            return self.getTypedRuleContext(GQLParser.PathModeContext, 0)

        def pathOrPaths(self):
            return self.getTypedRuleContext(GQLParser.PathOrPathsContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_allShortestPathSearch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAllShortestPathSearch"):
                listener.enterAllShortestPathSearch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAllShortestPathSearch"):
                listener.exitAllShortestPathSearch(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAllShortestPathSearch"):
                return visitor.visitAllShortestPathSearch(self)
            else:
                return visitor.visitChildren(self)

    def allShortestPathSearch(self):
        localctx = GQLParser.AllShortestPathSearchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_allShortestPathSearch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2221
            self.match(GQLParser.ALL)
            self.state = 2222
            self.match(GQLParser.SHORTEST)
            self.state = 2224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 179, self._ctx)
            if la_ == 1:
                self.state = 2223
                self.pathMode()

            self.state = 2227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 180, self._ctx)
            if la_ == 1:
                self.state = 2226
                self.pathOrPaths()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnyShortestPathSearchContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(GQLParser.ANY, 0)

        def SHORTEST(self):
            return self.getToken(GQLParser.SHORTEST, 0)

        def pathMode(self):
            return self.getTypedRuleContext(GQLParser.PathModeContext, 0)

        def pathOrPaths(self):
            return self.getTypedRuleContext(GQLParser.PathOrPathsContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_anyShortestPathSearch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnyShortestPathSearch"):
                listener.enterAnyShortestPathSearch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnyShortestPathSearch"):
                listener.exitAnyShortestPathSearch(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnyShortestPathSearch"):
                return visitor.visitAnyShortestPathSearch(self)
            else:
                return visitor.visitChildren(self)

    def anyShortestPathSearch(self):
        localctx = GQLParser.AnyShortestPathSearchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_anyShortestPathSearch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2229
            self.match(GQLParser.ANY)
            self.state = 2230
            self.match(GQLParser.SHORTEST)
            self.state = 2232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 181, self._ctx)
            if la_ == 1:
                self.state = 2231
                self.pathMode()

            self.state = 2235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 182, self._ctx)
            if la_ == 1:
                self.state = 2234
                self.pathOrPaths()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CountedShortestPathSearchContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHORTEST(self):
            return self.getToken(GQLParser.SHORTEST, 0)

        def numberOfPaths(self):
            return self.getTypedRuleContext(GQLParser.NumberOfPathsContext, 0)

        def pathMode(self):
            return self.getTypedRuleContext(GQLParser.PathModeContext, 0)

        def pathOrPaths(self):
            return self.getTypedRuleContext(GQLParser.PathOrPathsContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_countedShortestPathSearch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCountedShortestPathSearch"):
                listener.enterCountedShortestPathSearch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCountedShortestPathSearch"):
                listener.exitCountedShortestPathSearch(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCountedShortestPathSearch"):
                return visitor.visitCountedShortestPathSearch(self)
            else:
                return visitor.visitChildren(self)

    def countedShortestPathSearch(self):
        localctx = GQLParser.CountedShortestPathSearchContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 366, self.RULE_countedShortestPathSearch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2237
            self.match(GQLParser.SHORTEST)
            self.state = 2238
            self.numberOfPaths()
            self.state = 2240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 183, self._ctx)
            if la_ == 1:
                self.state = 2239
                self.pathMode()

            self.state = 2243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 184, self._ctx)
            if la_ == 1:
                self.state = 2242
                self.pathOrPaths()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CountedShortestGroupSearchContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHORTEST(self):
            return self.getToken(GQLParser.SHORTEST, 0)

        def GROUP(self):
            return self.getToken(GQLParser.GROUP, 0)

        def GROUPS(self):
            return self.getToken(GQLParser.GROUPS, 0)

        def numberOfGroups(self):
            return self.getTypedRuleContext(GQLParser.NumberOfGroupsContext, 0)

        def pathMode(self):
            return self.getTypedRuleContext(GQLParser.PathModeContext, 0)

        def pathOrPaths(self):
            return self.getTypedRuleContext(GQLParser.PathOrPathsContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_countedShortestGroupSearch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCountedShortestGroupSearch"):
                listener.enterCountedShortestGroupSearch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCountedShortestGroupSearch"):
                listener.exitCountedShortestGroupSearch(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCountedShortestGroupSearch"):
                return visitor.visitCountedShortestGroupSearch(self)
            else:
                return visitor.visitChildren(self)

    def countedShortestGroupSearch(self):
        localctx = GQLParser.CountedShortestGroupSearchContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 368, self.RULE_countedShortestGroupSearch)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2245
            self.match(GQLParser.SHORTEST)
            self.state = 2247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & 983040) != 0) or _la == 326:
                self.state = 2246
                self.numberOfGroups()

            self.state = 2250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la - 277) & ~0x3F) == 0 and ((1 << (_la - 277)) & 9088150798337) != 0:
                self.state = 2249
                self.pathMode()

            self.state = 2253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 166 or _la == 168:
                self.state = 2252
                self.pathOrPaths()

            self.state = 2255
            _la = self._input.LA(1)
            if not (_la == 102 or _la == 290):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberOfGroupsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonNegativeIntegerSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NonNegativeIntegerSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_numberOfGroups

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumberOfGroups"):
                listener.enterNumberOfGroups(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumberOfGroups"):
                listener.exitNumberOfGroups(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumberOfGroups"):
                return visitor.visitNumberOfGroups(self)
            else:
                return visitor.visitChildren(self)

    def numberOfGroups(self):
        localctx = GQLParser.NumberOfGroupsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_numberOfGroups)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2257
            self.nonNegativeIntegerSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathPatternExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return GQLParser.RULE_pathPatternExpression

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class PpePatternUnionContext(PathPatternExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.PathPatternExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pathTerm(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.PathTermContext)
            else:
                return self.getTypedRuleContext(GQLParser.PathTermContext, i)

        def VERTICAL_BAR(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.VERTICAL_BAR)
            else:
                return self.getToken(GQLParser.VERTICAL_BAR, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPpePatternUnion"):
                listener.enterPpePatternUnion(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPpePatternUnion"):
                listener.exitPpePatternUnion(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPpePatternUnion"):
                return visitor.visitPpePatternUnion(self)
            else:
                return visitor.visitChildren(self)

    class PpePathTermContext(PathPatternExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.PathPatternExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pathTerm(self):
            return self.getTypedRuleContext(GQLParser.PathTermContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPpePathTerm"):
                listener.enterPpePathTerm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPpePathTerm"):
                listener.exitPpePathTerm(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPpePathTerm"):
                return visitor.visitPpePathTerm(self)
            else:
                return visitor.visitChildren(self)

    class PpeMultisetAlternationContext(PathPatternExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.PathPatternExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pathTerm(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.PathTermContext)
            else:
                return self.getTypedRuleContext(GQLParser.PathTermContext, i)

        def MULTISET_ALTERNATION_OPERATOR(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.MULTISET_ALTERNATION_OPERATOR)
            else:
                return self.getToken(GQLParser.MULTISET_ALTERNATION_OPERATOR, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPpeMultisetAlternation"):
                listener.enterPpeMultisetAlternation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPpeMultisetAlternation"):
                listener.exitPpeMultisetAlternation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPpeMultisetAlternation"):
                return visitor.visitPpeMultisetAlternation(self)
            else:
                return visitor.visitChildren(self)

    def pathPatternExpression(self):
        localctx = GQLParser.PathPatternExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_pathPatternExpression)
        try:
            self.state = 2274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 190, self._ctx)
            if la_ == 1:
                localctx = GQLParser.PpePathTermContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2259
                self.pathTerm()
                pass

            elif la_ == 2:
                localctx = GQLParser.PpeMultisetAlternationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2260
                self.pathTerm()
                self.state = 2263
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2261
                        self.match(GQLParser.MULTISET_ALTERNATION_OPERATOR)
                        self.state = 2262
                        self.pathTerm()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2265
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 188, self._ctx)

                pass

            elif la_ == 3:
                localctx = GQLParser.PpePatternUnionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2267
                self.pathTerm()
                self.state = 2270
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2268
                        self.match(GQLParser.VERTICAL_BAR)
                        self.state = 2269
                        self.pathTerm()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2272
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 189, self._ctx)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathTermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathFactor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.PathFactorContext)
            else:
                return self.getTypedRuleContext(GQLParser.PathFactorContext, i)

        def getRuleIndex(self):
            return GQLParser.RULE_pathTerm

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathTerm"):
                listener.enterPathTerm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathTerm"):
                listener.exitPathTerm(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathTerm"):
                return visitor.visitPathTerm(self)
            else:
                return visitor.visitChildren(self)

    def pathTerm(self):
        localctx = GQLParser.PathTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_pathTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2277
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2276
                    self.pathFactor()

                else:
                    raise NoViableAltException(self)
                self.state = 2279
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 191, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathFactorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return GQLParser.RULE_pathFactor

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class PfQuantifiedPathPrimaryContext(PathFactorContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.PathFactorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pathPrimary(self):
            return self.getTypedRuleContext(GQLParser.PathPrimaryContext, 0)

        def graphPatternQuantifier(self):
            return self.getTypedRuleContext(GQLParser.GraphPatternQuantifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPfQuantifiedPathPrimary"):
                listener.enterPfQuantifiedPathPrimary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPfQuantifiedPathPrimary"):
                listener.exitPfQuantifiedPathPrimary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPfQuantifiedPathPrimary"):
                return visitor.visitPfQuantifiedPathPrimary(self)
            else:
                return visitor.visitChildren(self)

    class PfQuestionedPathPrimaryContext(PathFactorContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.PathFactorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pathPrimary(self):
            return self.getTypedRuleContext(GQLParser.PathPrimaryContext, 0)

        def QUESTION_MARK(self):
            return self.getToken(GQLParser.QUESTION_MARK, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPfQuestionedPathPrimary"):
                listener.enterPfQuestionedPathPrimary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPfQuestionedPathPrimary"):
                listener.exitPfQuestionedPathPrimary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPfQuestionedPathPrimary"):
                return visitor.visitPfQuestionedPathPrimary(self)
            else:
                return visitor.visitChildren(self)

    class PfPathPrimaryContext(PathFactorContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.PathFactorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pathPrimary(self):
            return self.getTypedRuleContext(GQLParser.PathPrimaryContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPfPathPrimary"):
                listener.enterPfPathPrimary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPfPathPrimary"):
                listener.exitPfPathPrimary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPfPathPrimary"):
                return visitor.visitPfPathPrimary(self)
            else:
                return visitor.visitChildren(self)

    def pathFactor(self):
        localctx = GQLParser.PathFactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_pathFactor)
        try:
            self.state = 2288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 192, self._ctx)
            if la_ == 1:
                localctx = GQLParser.PfPathPrimaryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2281
                self.pathPrimary()
                pass

            elif la_ == 2:
                localctx = GQLParser.PfQuantifiedPathPrimaryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2282
                self.pathPrimary()
                self.state = 2283
                self.graphPatternQuantifier()
                pass

            elif la_ == 3:
                localctx = GQLParser.PfQuestionedPathPrimaryContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2285
                self.pathPrimary()
                self.state = 2286
                self.match(GQLParser.QUESTION_MARK)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathPrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return GQLParser.RULE_pathPrimary

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class PpParenthesizedPathPatternExpressionContext(PathPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.PathPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parenthesizedPathPatternExpression(self):
            return self.getTypedRuleContext(
                GQLParser.ParenthesizedPathPatternExpressionContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPpParenthesizedPathPatternExpression"):
                listener.enterPpParenthesizedPathPatternExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPpParenthesizedPathPatternExpression"):
                listener.exitPpParenthesizedPathPatternExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPpParenthesizedPathPatternExpression"):
                return visitor.visitPpParenthesizedPathPatternExpression(self)
            else:
                return visitor.visitChildren(self)

    class PpElementPatternContext(PathPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.PathPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elementPattern(self):
            return self.getTypedRuleContext(GQLParser.ElementPatternContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPpElementPattern"):
                listener.enterPpElementPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPpElementPattern"):
                listener.exitPpElementPattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPpElementPattern"):
                return visitor.visitPpElementPattern(self)
            else:
                return visitor.visitChildren(self)

    class PpSimplifiedPathPatternExpressionContext(PathPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.PathPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simplifiedPathPatternExpression(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedPathPatternExpressionContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPpSimplifiedPathPatternExpression"):
                listener.enterPpSimplifiedPathPatternExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPpSimplifiedPathPatternExpression"):
                listener.exitPpSimplifiedPathPatternExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPpSimplifiedPathPatternExpression"):
                return visitor.visitPpSimplifiedPathPatternExpression(self)
            else:
                return visitor.visitChildren(self)

    def pathPrimary(self):
        localctx = GQLParser.PathPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_pathPrimary)
        try:
            self.state = 2293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 193, self._ctx)
            if la_ == 1:
                localctx = GQLParser.PpElementPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2290
                self.elementPattern()
                pass

            elif la_ == 2:
                localctx = GQLParser.PpParenthesizedPathPatternExpressionContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 2)
                self.state = 2291
                self.parenthesizedPathPatternExpression()
                pass

            elif la_ == 3:
                localctx = GQLParser.PpSimplifiedPathPatternExpressionContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 3)
                self.state = 2292
                self.simplifiedPathPatternExpression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementPatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodePattern(self):
            return self.getTypedRuleContext(GQLParser.NodePatternContext, 0)

        def edgePattern(self):
            return self.getTypedRuleContext(GQLParser.EdgePatternContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_elementPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementPattern"):
                listener.enterElementPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementPattern"):
                listener.exitElementPattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementPattern"):
                return visitor.visitElementPattern(self)
            else:
                return visitor.visitChildren(self)

    def elementPattern(self):
        localctx = GQLParser.ElementPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_elementPattern)
        try:
            self.state = 2297
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [370]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2295
                self.nodePattern()
                pass
            elif token in [335, 336, 337, 338, 339, 343, 346, 354, 355, 372, 383]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2296
                self.edgePattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodePatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GQLParser.ElementPatternFillerContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nodePattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodePattern"):
                listener.enterNodePattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodePattern"):
                listener.exitNodePattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodePattern"):
                return visitor.visitNodePattern(self)
            else:
                return visitor.visitChildren(self)

    def nodePattern(self):
        localctx = GQLParser.NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_nodePattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2299
            self.match(GQLParser.LEFT_PAREN)
            self.state = 2300
            self.elementPatternFiller()
            self.state = 2301
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementPatternFillerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementVariableDeclaration(self):
            return self.getTypedRuleContext(
                GQLParser.ElementVariableDeclarationContext, 0
            )

        def isLabelExpression(self):
            return self.getTypedRuleContext(GQLParser.IsLabelExpressionContext, 0)

        def elementPatternPredicate(self):
            return self.getTypedRuleContext(GQLParser.ElementPatternPredicateContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_elementPatternFiller

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementPatternFiller"):
                listener.enterElementPatternFiller(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementPatternFiller"):
                listener.exitElementPatternFiller(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementPatternFiller"):
                return visitor.visitElementPatternFiller(self)
            else:
                return visitor.visitChildren(self)

    def elementPatternFiller(self):
        localctx = GQLParser.ElementPatternFillerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_elementPatternFiller)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la - 277) & ~0x3F) == 0 and (
                (1 << (_la - 277)) & 281474976710655
            ) != 0:
                self.state = 2303
                self.elementVariableDeclaration()

            self.state = 2307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 127 or _la == 359:
                self.state = 2306
                self.isLabelExpression()

            self.state = 2310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 230 or _la == 368:
                self.state = 2309
                self.elementPatternPredicate()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementVariableDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementVariable(self):
            return self.getTypedRuleContext(GQLParser.ElementVariableContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_elementVariableDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementVariableDeclaration"):
                listener.enterElementVariableDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementVariableDeclaration"):
                listener.exitElementVariableDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementVariableDeclaration"):
                return visitor.visitElementVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def elementVariableDeclaration(self):
        localctx = GQLParser.ElementVariableDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 386, self.RULE_elementVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2312
            self.elementVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IsLabelExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isOrColon(self):
            return self.getTypedRuleContext(GQLParser.IsOrColonContext, 0)

        def labelExpression(self):
            return self.getTypedRuleContext(GQLParser.LabelExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_isLabelExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIsLabelExpression"):
                listener.enterIsLabelExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIsLabelExpression"):
                listener.exitIsLabelExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIsLabelExpression"):
                return visitor.visitIsLabelExpression(self)
            else:
                return visitor.visitChildren(self)

    def isLabelExpression(self):
        localctx = GQLParser.IsLabelExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_isLabelExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2314
            self.isOrColon()
            self.state = 2315
            self.labelExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IsOrColonContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(GQLParser.IS, 0)

        def COLON(self):
            return self.getToken(GQLParser.COLON, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_isOrColon

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIsOrColon"):
                listener.enterIsOrColon(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIsOrColon"):
                listener.exitIsOrColon(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIsOrColon"):
                return visitor.visitIsOrColon(self)
            else:
                return visitor.visitChildren(self)

    def isOrColon(self):
        localctx = GQLParser.IsOrColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_isOrColon)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2317
            _la = self._input.LA(1)
            if not (_la == 127 or _la == 359):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementPatternPredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementPatternWhereClause(self):
            return self.getTypedRuleContext(
                GQLParser.ElementPatternWhereClauseContext, 0
            )

        def elementPropertySpecification(self):
            return self.getTypedRuleContext(
                GQLParser.ElementPropertySpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_elementPatternPredicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementPatternPredicate"):
                listener.enterElementPatternPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementPatternPredicate"):
                listener.exitElementPatternPredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementPatternPredicate"):
                return visitor.visitElementPatternPredicate(self)
            else:
                return visitor.visitChildren(self)

    def elementPatternPredicate(self):
        localctx = GQLParser.ElementPatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_elementPatternPredicate)
        try:
            self.state = 2321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [230]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2319
                self.elementPatternWhereClause()
                pass
            elif token in [368]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2320
                self.elementPropertySpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementPatternWhereClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(GQLParser.WHERE, 0)

        def searchCondition(self):
            return self.getTypedRuleContext(GQLParser.SearchConditionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_elementPatternWhereClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementPatternWhereClause"):
                listener.enterElementPatternWhereClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementPatternWhereClause"):
                listener.exitElementPatternWhereClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementPatternWhereClause"):
                return visitor.visitElementPatternWhereClause(self)
            else:
                return visitor.visitChildren(self)

    def elementPatternWhereClause(self):
        localctx = GQLParser.ElementPatternWhereClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 394, self.RULE_elementPatternWhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2323
            self.match(GQLParser.WHERE)
            self.state = 2324
            self.searchCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementPropertySpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GQLParser.LEFT_BRACE, 0)

        def propertyKeyValuePairList(self):
            return self.getTypedRuleContext(
                GQLParser.PropertyKeyValuePairListContext, 0
            )

        def RIGHT_BRACE(self):
            return self.getToken(GQLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_elementPropertySpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementPropertySpecification"):
                listener.enterElementPropertySpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementPropertySpecification"):
                listener.exitElementPropertySpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementPropertySpecification"):
                return visitor.visitElementPropertySpecification(self)
            else:
                return visitor.visitChildren(self)

    def elementPropertySpecification(self):
        localctx = GQLParser.ElementPropertySpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 396, self.RULE_elementPropertySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2326
            self.match(GQLParser.LEFT_BRACE)
            self.state = 2327
            self.propertyKeyValuePairList()
            self.state = 2328
            self.match(GQLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyKeyValuePairListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyKeyValuePair(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.PropertyKeyValuePairContext)
            else:
                return self.getTypedRuleContext(
                    GQLParser.PropertyKeyValuePairContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_propertyKeyValuePairList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertyKeyValuePairList"):
                listener.enterPropertyKeyValuePairList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertyKeyValuePairList"):
                listener.exitPropertyKeyValuePairList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertyKeyValuePairList"):
                return visitor.visitPropertyKeyValuePairList(self)
            else:
                return visitor.visitChildren(self)

    def propertyKeyValuePairList(self):
        localctx = GQLParser.PropertyKeyValuePairListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 398, self.RULE_propertyKeyValuePairList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.propertyKeyValuePair()
            self.state = 2335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 2331
                self.match(GQLParser.COMMA)
                self.state = 2332
                self.propertyKeyValuePair()
                self.state = 2337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyKeyValuePairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyName(self):
            return self.getTypedRuleContext(GQLParser.PropertyNameContext, 0)

        def COLON(self):
            return self.getToken(GQLParser.COLON, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_propertyKeyValuePair

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertyKeyValuePair"):
                listener.enterPropertyKeyValuePair(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertyKeyValuePair"):
                listener.exitPropertyKeyValuePair(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertyKeyValuePair"):
                return visitor.visitPropertyKeyValuePair(self)
            else:
                return visitor.visitChildren(self)

    def propertyKeyValuePair(self):
        localctx = GQLParser.PropertyKeyValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_propertyKeyValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2338
            self.propertyName()
            self.state = 2339
            self.match(GQLParser.COLON)
            self.state = 2340
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgePatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullEdgePattern(self):
            return self.getTypedRuleContext(GQLParser.FullEdgePatternContext, 0)

        def abbreviatedEdgePattern(self):
            return self.getTypedRuleContext(GQLParser.AbbreviatedEdgePatternContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgePattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgePattern"):
                listener.enterEdgePattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgePattern"):
                listener.exitEdgePattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgePattern"):
                return visitor.visitEdgePattern(self)
            else:
                return visitor.visitChildren(self)

    def edgePattern(self):
        localctx = GQLParser.EdgePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_edgePattern)
        try:
            self.state = 2344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [337, 338, 343, 354]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2342
                self.fullEdgePattern()
                pass
            elif token in [335, 336, 339, 346, 355, 372, 383]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2343
                self.abbreviatedEdgePattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullEdgePatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullEdgePointingLeft(self):
            return self.getTypedRuleContext(GQLParser.FullEdgePointingLeftContext, 0)

        def fullEdgeUndirected(self):
            return self.getTypedRuleContext(GQLParser.FullEdgeUndirectedContext, 0)

        def fullEdgePointingRight(self):
            return self.getTypedRuleContext(GQLParser.FullEdgePointingRightContext, 0)

        def fullEdgeLeftOrUndirected(self):
            return self.getTypedRuleContext(
                GQLParser.FullEdgeLeftOrUndirectedContext, 0
            )

        def fullEdgeUndirectedOrRight(self):
            return self.getTypedRuleContext(
                GQLParser.FullEdgeUndirectedOrRightContext, 0
            )

        def fullEdgeLeftOrRight(self):
            return self.getTypedRuleContext(GQLParser.FullEdgeLeftOrRightContext, 0)

        def fullEdgeAnyDirection(self):
            return self.getTypedRuleContext(GQLParser.FullEdgeAnyDirectionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_fullEdgePattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFullEdgePattern"):
                listener.enterFullEdgePattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFullEdgePattern"):
                listener.exitFullEdgePattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFullEdgePattern"):
                return visitor.visitFullEdgePattern(self)
            else:
                return visitor.visitChildren(self)

    def fullEdgePattern(self):
        localctx = GQLParser.FullEdgePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_fullEdgePattern)
        try:
            self.state = 2353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 201, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2346
                self.fullEdgePointingLeft()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2347
                self.fullEdgeUndirected()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2348
                self.fullEdgePointingRight()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2349
                self.fullEdgeLeftOrUndirected()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2350
                self.fullEdgeUndirectedOrRight()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2351
                self.fullEdgeLeftOrRight()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2352
                self.fullEdgeAnyDirection()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullEdgePointingLeftContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ARROW_BRACKET(self):
            return self.getToken(GQLParser.LEFT_ARROW_BRACKET, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GQLParser.ElementPatternFillerContext, 0)

        def RIGHT_BRACKET_MINUS(self):
            return self.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_fullEdgePointingLeft

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFullEdgePointingLeft"):
                listener.enterFullEdgePointingLeft(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFullEdgePointingLeft"):
                listener.exitFullEdgePointingLeft(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFullEdgePointingLeft"):
                return visitor.visitFullEdgePointingLeft(self)
            else:
                return visitor.visitChildren(self)

    def fullEdgePointingLeft(self):
        localctx = GQLParser.FullEdgePointingLeftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_fullEdgePointingLeft)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2355
            self.match(GQLParser.LEFT_ARROW_BRACKET)
            self.state = 2356
            self.elementPatternFiller()
            self.state = 2357
            self.match(GQLParser.RIGHT_BRACKET_MINUS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullEdgeUndirectedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE_LEFT_BRACKET(self):
            return self.getToken(GQLParser.TILDE_LEFT_BRACKET, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GQLParser.ElementPatternFillerContext, 0)

        def RIGHT_BRACKET_TILDE(self):
            return self.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_fullEdgeUndirected

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFullEdgeUndirected"):
                listener.enterFullEdgeUndirected(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFullEdgeUndirected"):
                listener.exitFullEdgeUndirected(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFullEdgeUndirected"):
                return visitor.visitFullEdgeUndirected(self)
            else:
                return visitor.visitChildren(self)

    def fullEdgeUndirected(self):
        localctx = GQLParser.FullEdgeUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_fullEdgeUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2359
            self.match(GQLParser.TILDE_LEFT_BRACKET)
            self.state = 2360
            self.elementPatternFiller()
            self.state = 2361
            self.match(GQLParser.RIGHT_BRACKET_TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullEdgePointingRightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_LEFT_BRACKET(self):
            return self.getToken(GQLParser.MINUS_LEFT_BRACKET, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GQLParser.ElementPatternFillerContext, 0)

        def BRACKET_RIGHT_ARROW(self):
            return self.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_fullEdgePointingRight

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFullEdgePointingRight"):
                listener.enterFullEdgePointingRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFullEdgePointingRight"):
                listener.exitFullEdgePointingRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFullEdgePointingRight"):
                return visitor.visitFullEdgePointingRight(self)
            else:
                return visitor.visitChildren(self)

    def fullEdgePointingRight(self):
        localctx = GQLParser.FullEdgePointingRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_fullEdgePointingRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2363
            self.match(GQLParser.MINUS_LEFT_BRACKET)
            self.state = 2364
            self.elementPatternFiller()
            self.state = 2365
            self.match(GQLParser.BRACKET_RIGHT_ARROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullEdgeLeftOrUndirectedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ARROW_TILDE_BRACKET(self):
            return self.getToken(GQLParser.LEFT_ARROW_TILDE_BRACKET, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GQLParser.ElementPatternFillerContext, 0)

        def RIGHT_BRACKET_TILDE(self):
            return self.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_fullEdgeLeftOrUndirected

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFullEdgeLeftOrUndirected"):
                listener.enterFullEdgeLeftOrUndirected(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFullEdgeLeftOrUndirected"):
                listener.exitFullEdgeLeftOrUndirected(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFullEdgeLeftOrUndirected"):
                return visitor.visitFullEdgeLeftOrUndirected(self)
            else:
                return visitor.visitChildren(self)

    def fullEdgeLeftOrUndirected(self):
        localctx = GQLParser.FullEdgeLeftOrUndirectedContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 412, self.RULE_fullEdgeLeftOrUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2367
            self.match(GQLParser.LEFT_ARROW_TILDE_BRACKET)
            self.state = 2368
            self.elementPatternFiller()
            self.state = 2369
            self.match(GQLParser.RIGHT_BRACKET_TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullEdgeUndirectedOrRightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE_LEFT_BRACKET(self):
            return self.getToken(GQLParser.TILDE_LEFT_BRACKET, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GQLParser.ElementPatternFillerContext, 0)

        def BRACKET_TILDE_RIGHT_ARROW(self):
            return self.getToken(GQLParser.BRACKET_TILDE_RIGHT_ARROW, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_fullEdgeUndirectedOrRight

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFullEdgeUndirectedOrRight"):
                listener.enterFullEdgeUndirectedOrRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFullEdgeUndirectedOrRight"):
                listener.exitFullEdgeUndirectedOrRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFullEdgeUndirectedOrRight"):
                return visitor.visitFullEdgeUndirectedOrRight(self)
            else:
                return visitor.visitChildren(self)

    def fullEdgeUndirectedOrRight(self):
        localctx = GQLParser.FullEdgeUndirectedOrRightContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 414, self.RULE_fullEdgeUndirectedOrRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2371
            self.match(GQLParser.TILDE_LEFT_BRACKET)
            self.state = 2372
            self.elementPatternFiller()
            self.state = 2373
            self.match(GQLParser.BRACKET_TILDE_RIGHT_ARROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullEdgeLeftOrRightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ARROW_BRACKET(self):
            return self.getToken(GQLParser.LEFT_ARROW_BRACKET, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GQLParser.ElementPatternFillerContext, 0)

        def BRACKET_RIGHT_ARROW(self):
            return self.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_fullEdgeLeftOrRight

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFullEdgeLeftOrRight"):
                listener.enterFullEdgeLeftOrRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFullEdgeLeftOrRight"):
                listener.exitFullEdgeLeftOrRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFullEdgeLeftOrRight"):
                return visitor.visitFullEdgeLeftOrRight(self)
            else:
                return visitor.visitChildren(self)

    def fullEdgeLeftOrRight(self):
        localctx = GQLParser.FullEdgeLeftOrRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_fullEdgeLeftOrRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2375
            self.match(GQLParser.LEFT_ARROW_BRACKET)
            self.state = 2376
            self.elementPatternFiller()
            self.state = 2377
            self.match(GQLParser.BRACKET_RIGHT_ARROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullEdgeAnyDirectionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_LEFT_BRACKET(self):
            return self.getToken(GQLParser.MINUS_LEFT_BRACKET, 0)

        def elementPatternFiller(self):
            return self.getTypedRuleContext(GQLParser.ElementPatternFillerContext, 0)

        def RIGHT_BRACKET_MINUS(self):
            return self.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_fullEdgeAnyDirection

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFullEdgeAnyDirection"):
                listener.enterFullEdgeAnyDirection(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFullEdgeAnyDirection"):
                listener.exitFullEdgeAnyDirection(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFullEdgeAnyDirection"):
                return visitor.visitFullEdgeAnyDirection(self)
            else:
                return visitor.visitChildren(self)

    def fullEdgeAnyDirection(self):
        localctx = GQLParser.FullEdgeAnyDirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_fullEdgeAnyDirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2379
            self.match(GQLParser.MINUS_LEFT_BRACKET)
            self.state = 2380
            self.elementPatternFiller()
            self.state = 2381
            self.match(GQLParser.RIGHT_BRACKET_MINUS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbbreviatedEdgePatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ARROW(self):
            return self.getToken(GQLParser.LEFT_ARROW, 0)

        def TILDE(self):
            return self.getToken(GQLParser.TILDE, 0)

        def RIGHT_ARROW(self):
            return self.getToken(GQLParser.RIGHT_ARROW, 0)

        def LEFT_ARROW_TILDE(self):
            return self.getToken(GQLParser.LEFT_ARROW_TILDE, 0)

        def TILDE_RIGHT_ARROW(self):
            return self.getToken(GQLParser.TILDE_RIGHT_ARROW, 0)

        def LEFT_MINUS_RIGHT(self):
            return self.getToken(GQLParser.LEFT_MINUS_RIGHT, 0)

        def MINUS_SIGN(self):
            return self.getToken(GQLParser.MINUS_SIGN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_abbreviatedEdgePattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbbreviatedEdgePattern"):
                listener.enterAbbreviatedEdgePattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbbreviatedEdgePattern"):
                listener.exitAbbreviatedEdgePattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAbbreviatedEdgePattern"):
                return visitor.visitAbbreviatedEdgePattern(self)
            else:
                return visitor.visitChildren(self)

    def abbreviatedEdgePattern(self):
        localctx = GQLParser.AbbreviatedEdgePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_abbreviatedEdgePattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2383
            _la = self._input.LA(1)
            if not (
                ((_la - 335) & ~0x3F) == 0
                and ((1 << (_la - 335)) & 281612416714771) != 0
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParenthesizedPathPatternExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def pathPatternExpression(self):
            return self.getTypedRuleContext(GQLParser.PathPatternExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def subpathVariableDeclaration(self):
            return self.getTypedRuleContext(
                GQLParser.SubpathVariableDeclarationContext, 0
            )

        def pathModePrefix(self):
            return self.getTypedRuleContext(GQLParser.PathModePrefixContext, 0)

        def parenthesizedPathPatternWhereClause(self):
            return self.getTypedRuleContext(
                GQLParser.ParenthesizedPathPatternWhereClauseContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_parenthesizedPathPatternExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParenthesizedPathPatternExpression"):
                listener.enterParenthesizedPathPatternExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParenthesizedPathPatternExpression"):
                listener.exitParenthesizedPathPatternExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParenthesizedPathPatternExpression"):
                return visitor.visitParenthesizedPathPatternExpression(self)
            else:
                return visitor.visitChildren(self)

    def parenthesizedPathPatternExpression(self):
        localctx = GQLParser.ParenthesizedPathPatternExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 422, self.RULE_parenthesizedPathPatternExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2385
            self.match(GQLParser.LEFT_PAREN)
            self.state = 2387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 202, self._ctx)
            if la_ == 1:
                self.state = 2386
                self.subpathVariableDeclaration()

            self.state = 2390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la - 277) & ~0x3F) == 0 and ((1 << (_la - 277)) & 9088150798337) != 0:
                self.state = 2389
                self.pathModePrefix()

            self.state = 2392
            self.pathPatternExpression()
            self.state = 2394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 230:
                self.state = 2393
                self.parenthesizedPathPatternWhereClause()

            self.state = 2396
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubpathVariableDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subpathVariable(self):
            return self.getTypedRuleContext(GQLParser.SubpathVariableContext, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(GQLParser.EQUALS_OPERATOR, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_subpathVariableDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubpathVariableDeclaration"):
                listener.enterSubpathVariableDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubpathVariableDeclaration"):
                listener.exitSubpathVariableDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubpathVariableDeclaration"):
                return visitor.visitSubpathVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def subpathVariableDeclaration(self):
        localctx = GQLParser.SubpathVariableDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 424, self.RULE_subpathVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2398
            self.subpathVariable()
            self.state = 2399
            self.match(GQLParser.EQUALS_OPERATOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParenthesizedPathPatternWhereClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(GQLParser.WHERE, 0)

        def searchCondition(self):
            return self.getTypedRuleContext(GQLParser.SearchConditionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_parenthesizedPathPatternWhereClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParenthesizedPathPatternWhereClause"):
                listener.enterParenthesizedPathPatternWhereClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParenthesizedPathPatternWhereClause"):
                listener.exitParenthesizedPathPatternWhereClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParenthesizedPathPatternWhereClause"):
                return visitor.visitParenthesizedPathPatternWhereClause(self)
            else:
                return visitor.visitChildren(self)

    def parenthesizedPathPatternWhereClause(self):
        localctx = GQLParser.ParenthesizedPathPatternWhereClauseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 426, self.RULE_parenthesizedPathPatternWhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2401
            self.match(GQLParser.WHERE)
            self.state = 2402
            self.searchCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return GQLParser.RULE_labelExpression

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class LabelExpressionNegationContext(LabelExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.LabelExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXCLAMATION_MARK(self):
            return self.getToken(GQLParser.EXCLAMATION_MARK, 0)

        def labelExpression(self):
            return self.getTypedRuleContext(GQLParser.LabelExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabelExpressionNegation"):
                listener.enterLabelExpressionNegation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabelExpressionNegation"):
                listener.exitLabelExpressionNegation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabelExpressionNegation"):
                return visitor.visitLabelExpressionNegation(self)
            else:
                return visitor.visitChildren(self)

    class LabelExpressionDisjunctionContext(LabelExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.LabelExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def labelExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.LabelExpressionContext)
            else:
                return self.getTypedRuleContext(GQLParser.LabelExpressionContext, i)

        def VERTICAL_BAR(self):
            return self.getToken(GQLParser.VERTICAL_BAR, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabelExpressionDisjunction"):
                listener.enterLabelExpressionDisjunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabelExpressionDisjunction"):
                listener.exitLabelExpressionDisjunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabelExpressionDisjunction"):
                return visitor.visitLabelExpressionDisjunction(self)
            else:
                return visitor.visitChildren(self)

    class LabelExpressionParenthesizedContext(LabelExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.LabelExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def labelExpression(self):
            return self.getTypedRuleContext(GQLParser.LabelExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabelExpressionParenthesized"):
                listener.enterLabelExpressionParenthesized(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabelExpressionParenthesized"):
                listener.exitLabelExpressionParenthesized(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabelExpressionParenthesized"):
                return visitor.visitLabelExpressionParenthesized(self)
            else:
                return visitor.visitChildren(self)

    class LabelExpressionWildcardContext(LabelExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.LabelExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERCENT(self):
            return self.getToken(GQLParser.PERCENT, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabelExpressionWildcard"):
                listener.enterLabelExpressionWildcard(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabelExpressionWildcard"):
                listener.exitLabelExpressionWildcard(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabelExpressionWildcard"):
                return visitor.visitLabelExpressionWildcard(self)
            else:
                return visitor.visitChildren(self)

    class LabelExpressionConjunctionContext(LabelExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.LabelExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def labelExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.LabelExpressionContext)
            else:
                return self.getTypedRuleContext(GQLParser.LabelExpressionContext, i)

        def AMPERSAND(self):
            return self.getToken(GQLParser.AMPERSAND, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabelExpressionConjunction"):
                listener.enterLabelExpressionConjunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabelExpressionConjunction"):
                listener.exitLabelExpressionConjunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabelExpressionConjunction"):
                return visitor.visitLabelExpressionConjunction(self)
            else:
                return visitor.visitChildren(self)

    class LabelExpressionNameContext(LabelExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.LabelExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def labelName(self):
            return self.getTypedRuleContext(GQLParser.LabelNameContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabelExpressionName"):
                listener.enterLabelExpressionName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabelExpressionName"):
                listener.exitLabelExpressionName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabelExpressionName"):
                return visitor.visitLabelExpressionName(self)
            else:
                return visitor.visitChildren(self)

    def labelExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GQLParser.LabelExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 428
        self.enterRecursionRule(localctx, 428, self.RULE_labelExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [365]:
                localctx = GQLParser.LabelExpressionNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2405
                self.match(GQLParser.EXCLAMATION_MARK)
                self.state = 2406
                self.labelExpression(6)
                pass
            elif token in [
                4,
                5,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
            ]:
                localctx = GQLParser.LabelExpressionNameContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2407
                self.labelName()
                pass
            elif token in [373]:
                localctx = GQLParser.LabelExpressionWildcardContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2408
                self.match(GQLParser.PERCENT)
                pass
            elif token in [370]:
                localctx = GQLParser.LabelExpressionParenthesizedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2409
                self.match(GQLParser.LEFT_PAREN)
                self.state = 2410
                self.labelExpression(0)
                self.state = 2411
                self.match(GQLParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2423
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 207, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2421
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 206, self._ctx)
                    if la_ == 1:
                        localctx = GQLParser.LabelExpressionConjunctionContext(
                            self,
                            GQLParser.LabelExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_labelExpression
                        )
                        self.state = 2415
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 2416
                        self.match(GQLParser.AMPERSAND)
                        self.state = 2417
                        self.labelExpression(6)
                        pass

                    elif la_ == 2:
                        localctx = GQLParser.LabelExpressionDisjunctionContext(
                            self,
                            GQLParser.LabelExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_labelExpression
                        )
                        self.state = 2418
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 2419
                        self.match(GQLParser.VERTICAL_BAR)
                        self.state = 2420
                        self.labelExpression(5)
                        pass

                self.state = 2425
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 207, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PathVariableReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.BindingVariableReferenceContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_pathVariableReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathVariableReference"):
                listener.enterPathVariableReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathVariableReference"):
                listener.exitPathVariableReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathVariableReference"):
                return visitor.visitPathVariableReference(self)
            else:
                return visitor.visitChildren(self)

    def pathVariableReference(self):
        localctx = GQLParser.PathVariableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_pathVariableReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2426
            self.bindingVariableReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementVariableReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.BindingVariableReferenceContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_elementVariableReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementVariableReference"):
                listener.enterElementVariableReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementVariableReference"):
                listener.exitElementVariableReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementVariableReference"):
                return visitor.visitElementVariableReference(self)
            else:
                return visitor.visitChildren(self)

    def elementVariableReference(self):
        localctx = GQLParser.ElementVariableReferenceContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 432, self.RULE_elementVariableReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2428
            self.bindingVariableReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphPatternQuantifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(GQLParser.ASTERISK, 0)

        def PLUS_SIGN(self):
            return self.getToken(GQLParser.PLUS_SIGN, 0)

        def fixedQuantifier(self):
            return self.getTypedRuleContext(GQLParser.FixedQuantifierContext, 0)

        def generalQuantifier(self):
            return self.getTypedRuleContext(GQLParser.GeneralQuantifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_graphPatternQuantifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphPatternQuantifier"):
                listener.enterGraphPatternQuantifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphPatternQuantifier"):
                listener.exitGraphPatternQuantifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphPatternQuantifier"):
                return visitor.visitGraphPatternQuantifier(self)
            else:
                return visitor.visitChildren(self)

    def graphPatternQuantifier(self):
        localctx = GQLParser.GraphPatternQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_graphPatternQuantifier)
        try:
            self.state = 2434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 208, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2430
                self.match(GQLParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2431
                self.match(GQLParser.PLUS_SIGN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2432
                self.fixedQuantifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2433
                self.generalQuantifier()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FixedQuantifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GQLParser.LEFT_BRACE, 0)

        def unsignedInteger(self):
            return self.getTypedRuleContext(GQLParser.UnsignedIntegerContext, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GQLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_fixedQuantifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFixedQuantifier"):
                listener.enterFixedQuantifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFixedQuantifier"):
                listener.exitFixedQuantifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFixedQuantifier"):
                return visitor.visitFixedQuantifier(self)
            else:
                return visitor.visitChildren(self)

    def fixedQuantifier(self):
        localctx = GQLParser.FixedQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_fixedQuantifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2436
            self.match(GQLParser.LEFT_BRACE)
            self.state = 2437
            self.unsignedInteger()
            self.state = 2438
            self.match(GQLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralQuantifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GQLParser.LEFT_BRACE, 0)

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GQLParser.RIGHT_BRACE, 0)

        def lowerBound(self):
            return self.getTypedRuleContext(GQLParser.LowerBoundContext, 0)

        def upperBound(self):
            return self.getTypedRuleContext(GQLParser.UpperBoundContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_generalQuantifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGeneralQuantifier"):
                listener.enterGeneralQuantifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGeneralQuantifier"):
                listener.exitGeneralQuantifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGeneralQuantifier"):
                return visitor.visitGeneralQuantifier(self)
            else:
                return visitor.visitChildren(self)

    def generalQuantifier(self):
        localctx = GQLParser.GeneralQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_generalQuantifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2440
            self.match(GQLParser.LEFT_BRACE)
            self.state = 2442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 983040) != 0:
                self.state = 2441
                self.lowerBound()

            self.state = 2444
            self.match(GQLParser.COMMA)
            self.state = 2446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 983040) != 0:
                self.state = 2445
                self.upperBound()

            self.state = 2448
            self.match(GQLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LowerBoundContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedInteger(self):
            return self.getTypedRuleContext(GQLParser.UnsignedIntegerContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_lowerBound

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLowerBound"):
                listener.enterLowerBound(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLowerBound"):
                listener.exitLowerBound(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLowerBound"):
                return visitor.visitLowerBound(self)
            else:
                return visitor.visitChildren(self)

    def lowerBound(self):
        localctx = GQLParser.LowerBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_lowerBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2450
            self.unsignedInteger()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UpperBoundContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedInteger(self):
            return self.getTypedRuleContext(GQLParser.UnsignedIntegerContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_upperBound

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUpperBound"):
                listener.enterUpperBound(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUpperBound"):
                listener.exitUpperBound(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUpperBound"):
                return visitor.visitUpperBound(self)
            else:
                return visitor.visitChildren(self)

    def upperBound(self):
        localctx = GQLParser.UpperBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_upperBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2452
            self.unsignedInteger()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedPathPatternExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedDefaultingLeft(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedDefaultingLeftContext, 0
            )

        def simplifiedDefaultingUndirected(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedDefaultingUndirectedContext, 0
            )

        def simplifiedDefaultingRight(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedDefaultingRightContext, 0
            )

        def simplifiedDefaultingLeftOrUndirected(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedDefaultingLeftOrUndirectedContext, 0
            )

        def simplifiedDefaultingUndirectedOrRight(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedDefaultingUndirectedOrRightContext, 0
            )

        def simplifiedDefaultingLeftOrRight(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedDefaultingLeftOrRightContext, 0
            )

        def simplifiedDefaultingAnyDirection(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedDefaultingAnyDirectionContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedPathPatternExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedPathPatternExpression"):
                listener.enterSimplifiedPathPatternExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedPathPatternExpression"):
                listener.exitSimplifiedPathPatternExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedPathPatternExpression"):
                return visitor.visitSimplifiedPathPatternExpression(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedPathPatternExpression(self):
        localctx = GQLParser.SimplifiedPathPatternExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 444, self.RULE_simplifiedPathPatternExpression)
        try:
            self.state = 2461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 211, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2454
                self.simplifiedDefaultingLeft()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2455
                self.simplifiedDefaultingUndirected()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2456
                self.simplifiedDefaultingRight()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2457
                self.simplifiedDefaultingLeftOrUndirected()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2458
                self.simplifiedDefaultingUndirectedOrRight()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2459
                self.simplifiedDefaultingLeftOrRight()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2460
                self.simplifiedDefaultingAnyDirection()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedDefaultingLeftContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_MINUS_SLASH(self):
            return self.getToken(GQLParser.LEFT_MINUS_SLASH, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedContentsContext, 0)

        def SLASH_MINUS(self):
            return self.getToken(GQLParser.SLASH_MINUS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedDefaultingLeft

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedDefaultingLeft"):
                listener.enterSimplifiedDefaultingLeft(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedDefaultingLeft"):
                listener.exitSimplifiedDefaultingLeft(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedDefaultingLeft"):
                return visitor.visitSimplifiedDefaultingLeft(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedDefaultingLeft(self):
        localctx = GQLParser.SimplifiedDefaultingLeftContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 446, self.RULE_simplifiedDefaultingLeft)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2463
            self.match(GQLParser.LEFT_MINUS_SLASH)
            self.state = 2464
            self.simplifiedContents()
            self.state = 2465
            self.match(GQLParser.SLASH_MINUS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedDefaultingUndirectedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE_SLASH(self):
            return self.getToken(GQLParser.TILDE_SLASH, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedContentsContext, 0)

        def SLASH_TILDE(self):
            return self.getToken(GQLParser.SLASH_TILDE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedDefaultingUndirected

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedDefaultingUndirected"):
                listener.enterSimplifiedDefaultingUndirected(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedDefaultingUndirected"):
                listener.exitSimplifiedDefaultingUndirected(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedDefaultingUndirected"):
                return visitor.visitSimplifiedDefaultingUndirected(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedDefaultingUndirected(self):
        localctx = GQLParser.SimplifiedDefaultingUndirectedContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 448, self.RULE_simplifiedDefaultingUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2467
            self.match(GQLParser.TILDE_SLASH)
            self.state = 2468
            self.simplifiedContents()
            self.state = 2469
            self.match(GQLParser.SLASH_TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedDefaultingRightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SLASH(self):
            return self.getToken(GQLParser.MINUS_SLASH, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedContentsContext, 0)

        def SLASH_MINUS_RIGHT(self):
            return self.getToken(GQLParser.SLASH_MINUS_RIGHT, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedDefaultingRight

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedDefaultingRight"):
                listener.enterSimplifiedDefaultingRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedDefaultingRight"):
                listener.exitSimplifiedDefaultingRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedDefaultingRight"):
                return visitor.visitSimplifiedDefaultingRight(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedDefaultingRight(self):
        localctx = GQLParser.SimplifiedDefaultingRightContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 450, self.RULE_simplifiedDefaultingRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2471
            self.match(GQLParser.MINUS_SLASH)
            self.state = 2472
            self.simplifiedContents()
            self.state = 2473
            self.match(GQLParser.SLASH_MINUS_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedDefaultingLeftOrUndirectedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_TILDE_SLASH(self):
            return self.getToken(GQLParser.LEFT_TILDE_SLASH, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedContentsContext, 0)

        def SLASH_TILDE(self):
            return self.getToken(GQLParser.SLASH_TILDE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedDefaultingLeftOrUndirected

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedDefaultingLeftOrUndirected"):
                listener.enterSimplifiedDefaultingLeftOrUndirected(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedDefaultingLeftOrUndirected"):
                listener.exitSimplifiedDefaultingLeftOrUndirected(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedDefaultingLeftOrUndirected"):
                return visitor.visitSimplifiedDefaultingLeftOrUndirected(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedDefaultingLeftOrUndirected(self):
        localctx = GQLParser.SimplifiedDefaultingLeftOrUndirectedContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 452, self.RULE_simplifiedDefaultingLeftOrUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2475
            self.match(GQLParser.LEFT_TILDE_SLASH)
            self.state = 2476
            self.simplifiedContents()
            self.state = 2477
            self.match(GQLParser.SLASH_TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedDefaultingUndirectedOrRightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE_SLASH(self):
            return self.getToken(GQLParser.TILDE_SLASH, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedContentsContext, 0)

        def SLASH_TILDE_RIGHT(self):
            return self.getToken(GQLParser.SLASH_TILDE_RIGHT, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedDefaultingUndirectedOrRight

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedDefaultingUndirectedOrRight"):
                listener.enterSimplifiedDefaultingUndirectedOrRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedDefaultingUndirectedOrRight"):
                listener.exitSimplifiedDefaultingUndirectedOrRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedDefaultingUndirectedOrRight"):
                return visitor.visitSimplifiedDefaultingUndirectedOrRight(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedDefaultingUndirectedOrRight(self):
        localctx = GQLParser.SimplifiedDefaultingUndirectedOrRightContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 454, self.RULE_simplifiedDefaultingUndirectedOrRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2479
            self.match(GQLParser.TILDE_SLASH)
            self.state = 2480
            self.simplifiedContents()
            self.state = 2481
            self.match(GQLParser.SLASH_TILDE_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedDefaultingLeftOrRightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_MINUS_SLASH(self):
            return self.getToken(GQLParser.LEFT_MINUS_SLASH, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedContentsContext, 0)

        def SLASH_MINUS_RIGHT(self):
            return self.getToken(GQLParser.SLASH_MINUS_RIGHT, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedDefaultingLeftOrRight

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedDefaultingLeftOrRight"):
                listener.enterSimplifiedDefaultingLeftOrRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedDefaultingLeftOrRight"):
                listener.exitSimplifiedDefaultingLeftOrRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedDefaultingLeftOrRight"):
                return visitor.visitSimplifiedDefaultingLeftOrRight(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedDefaultingLeftOrRight(self):
        localctx = GQLParser.SimplifiedDefaultingLeftOrRightContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 456, self.RULE_simplifiedDefaultingLeftOrRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2483
            self.match(GQLParser.LEFT_MINUS_SLASH)
            self.state = 2484
            self.simplifiedContents()
            self.state = 2485
            self.match(GQLParser.SLASH_MINUS_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedDefaultingAnyDirectionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SLASH(self):
            return self.getToken(GQLParser.MINUS_SLASH, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedContentsContext, 0)

        def SLASH_MINUS(self):
            return self.getToken(GQLParser.SLASH_MINUS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedDefaultingAnyDirection

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedDefaultingAnyDirection"):
                listener.enterSimplifiedDefaultingAnyDirection(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedDefaultingAnyDirection"):
                listener.exitSimplifiedDefaultingAnyDirection(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedDefaultingAnyDirection"):
                return visitor.visitSimplifiedDefaultingAnyDirection(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedDefaultingAnyDirection(self):
        localctx = GQLParser.SimplifiedDefaultingAnyDirectionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 458, self.RULE_simplifiedDefaultingAnyDirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2487
            self.match(GQLParser.MINUS_SLASH)
            self.state = 2488
            self.simplifiedContents()
            self.state = 2489
            self.match(GQLParser.SLASH_MINUS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedContentsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedTerm(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedTermContext, 0)

        def simplifiedPathUnion(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedPathUnionContext, 0)

        def simplifiedMultisetAlternation(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedMultisetAlternationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedContents

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedContents"):
                listener.enterSimplifiedContents(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedContents"):
                listener.exitSimplifiedContents(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedContents"):
                return visitor.visitSimplifiedContents(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedContents(self):
        localctx = GQLParser.SimplifiedContentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_simplifiedContents)
        try:
            self.state = 2494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 212, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2491
                self.simplifiedTerm(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2492
                self.simplifiedPathUnion()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2493
                self.simplifiedMultisetAlternation()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedPathUnionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedTerm(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.SimplifiedTermContext)
            else:
                return self.getTypedRuleContext(GQLParser.SimplifiedTermContext, i)

        def VERTICAL_BAR(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.VERTICAL_BAR)
            else:
                return self.getToken(GQLParser.VERTICAL_BAR, i)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedPathUnion

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedPathUnion"):
                listener.enterSimplifiedPathUnion(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedPathUnion"):
                listener.exitSimplifiedPathUnion(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedPathUnion"):
                return visitor.visitSimplifiedPathUnion(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedPathUnion(self):
        localctx = GQLParser.SimplifiedPathUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_simplifiedPathUnion)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2496
            self.simplifiedTerm(0)
            self.state = 2497
            self.match(GQLParser.VERTICAL_BAR)
            self.state = 2498
            self.simplifiedTerm(0)
            self.state = 2503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 385:
                self.state = 2499
                self.match(GQLParser.VERTICAL_BAR)
                self.state = 2500
                self.simplifiedTerm(0)
                self.state = 2505
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedMultisetAlternationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedTerm(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.SimplifiedTermContext)
            else:
                return self.getTypedRuleContext(GQLParser.SimplifiedTermContext, i)

        def MULTISET_ALTERNATION_OPERATOR(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.MULTISET_ALTERNATION_OPERATOR)
            else:
                return self.getToken(GQLParser.MULTISET_ALTERNATION_OPERATOR, i)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedMultisetAlternation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedMultisetAlternation"):
                listener.enterSimplifiedMultisetAlternation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedMultisetAlternation"):
                listener.exitSimplifiedMultisetAlternation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedMultisetAlternation"):
                return visitor.visitSimplifiedMultisetAlternation(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedMultisetAlternation(self):
        localctx = GQLParser.SimplifiedMultisetAlternationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 464, self.RULE_simplifiedMultisetAlternation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2506
            self.simplifiedTerm(0)
            self.state = 2507
            self.match(GQLParser.MULTISET_ALTERNATION_OPERATOR)
            self.state = 2508
            self.simplifiedTerm(0)
            self.state = 2513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 327:
                self.state = 2509
                self.match(GQLParser.MULTISET_ALTERNATION_OPERATOR)
                self.state = 2510
                self.simplifiedTerm(0)
                self.state = 2515
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedTermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedTerm

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class SimplifiedFactorLowLabelContext(SimplifiedTermContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.SimplifiedTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simplifiedFactorLow(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedFactorLowContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedFactorLowLabel"):
                listener.enterSimplifiedFactorLowLabel(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedFactorLowLabel"):
                listener.exitSimplifiedFactorLowLabel(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedFactorLowLabel"):
                return visitor.visitSimplifiedFactorLowLabel(self)
            else:
                return visitor.visitChildren(self)

    class SimplifiedConcatenationLabelContext(SimplifiedTermContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.SimplifiedTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simplifiedTerm(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedTermContext, 0)

        def simplifiedFactorLow(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedFactorLowContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedConcatenationLabel"):
                listener.enterSimplifiedConcatenationLabel(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedConcatenationLabel"):
                listener.exitSimplifiedConcatenationLabel(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedConcatenationLabel"):
                return visitor.visitSimplifiedConcatenationLabel(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedTerm(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GQLParser.SimplifiedTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 466
        self.enterRecursionRule(localctx, 466, self.RULE_simplifiedTerm, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = GQLParser.SimplifiedFactorLowLabelContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2517
            self.simplifiedFactorLow(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2523
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 215, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = GQLParser.SimplifiedConcatenationLabelContext(
                        self,
                        GQLParser.SimplifiedTermContext(self, _parentctx, _parentState),
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_simplifiedTerm
                    )
                    self.state = 2519
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 1)"
                        )
                    self.state = 2520
                    self.simplifiedFactorLow(0)
                self.state = 2525
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 215, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SimplifiedFactorLowContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedFactorLow

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class SimplifiedConjunctionLabelContext(SimplifiedFactorLowContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.SimplifiedFactorLowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simplifiedFactorLow(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedFactorLowContext, 0)

        def AMPERSAND(self):
            return self.getToken(GQLParser.AMPERSAND, 0)

        def simplifiedFactorHigh(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedFactorHighContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedConjunctionLabel"):
                listener.enterSimplifiedConjunctionLabel(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedConjunctionLabel"):
                listener.exitSimplifiedConjunctionLabel(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedConjunctionLabel"):
                return visitor.visitSimplifiedConjunctionLabel(self)
            else:
                return visitor.visitChildren(self)

    class SimplifiedFactorHighLabelContext(SimplifiedFactorLowContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.SimplifiedFactorLowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simplifiedFactorHigh(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedFactorHighContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedFactorHighLabel"):
                listener.enterSimplifiedFactorHighLabel(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedFactorHighLabel"):
                listener.exitSimplifiedFactorHighLabel(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedFactorHighLabel"):
                return visitor.visitSimplifiedFactorHighLabel(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedFactorLow(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GQLParser.SimplifiedFactorLowContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 468
        self.enterRecursionRule(localctx, 468, self.RULE_simplifiedFactorLow, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = GQLParser.SimplifiedFactorHighLabelContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2527
            self.simplifiedFactorHigh()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2534
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 216, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = GQLParser.SimplifiedConjunctionLabelContext(
                        self,
                        GQLParser.SimplifiedFactorLowContext(
                            self, _parentctx, _parentState
                        ),
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_simplifiedFactorLow
                    )
                    self.state = 2529
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 1)"
                        )
                    self.state = 2530
                    self.match(GQLParser.AMPERSAND)
                    self.state = 2531
                    self.simplifiedFactorHigh()
                self.state = 2536
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 216, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SimplifiedFactorHighContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedTertiary(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedTertiaryContext, 0)

        def simplifiedQuantified(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedQuantifiedContext, 0)

        def simplifiedQuestioned(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedQuestionedContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedFactorHigh

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedFactorHigh"):
                listener.enterSimplifiedFactorHigh(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedFactorHigh"):
                listener.exitSimplifiedFactorHigh(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedFactorHigh"):
                return visitor.visitSimplifiedFactorHigh(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedFactorHigh(self):
        localctx = GQLParser.SimplifiedFactorHighContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_simplifiedFactorHigh)
        try:
            self.state = 2540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 217, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2537
                self.simplifiedTertiary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2538
                self.simplifiedQuantified()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2539
                self.simplifiedQuestioned()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedQuantifiedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedTertiary(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedTertiaryContext, 0)

        def graphPatternQuantifier(self):
            return self.getTypedRuleContext(GQLParser.GraphPatternQuantifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedQuantified

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedQuantified"):
                listener.enterSimplifiedQuantified(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedQuantified"):
                listener.exitSimplifiedQuantified(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedQuantified"):
                return visitor.visitSimplifiedQuantified(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedQuantified(self):
        localctx = GQLParser.SimplifiedQuantifiedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_simplifiedQuantified)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2542
            self.simplifiedTertiary()
            self.state = 2543
            self.graphPatternQuantifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedQuestionedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedTertiary(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedTertiaryContext, 0)

        def QUESTION_MARK(self):
            return self.getToken(GQLParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedQuestioned

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedQuestioned"):
                listener.enterSimplifiedQuestioned(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedQuestioned"):
                listener.exitSimplifiedQuestioned(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedQuestioned"):
                return visitor.visitSimplifiedQuestioned(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedQuestioned(self):
        localctx = GQLParser.SimplifiedQuestionedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_simplifiedQuestioned)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2545
            self.simplifiedTertiary()
            self.state = 2546
            self.match(GQLParser.QUESTION_MARK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedTertiaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedDirectionOverride(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedDirectionOverrideContext, 0
            )

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedSecondaryContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedTertiary

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedTertiary"):
                listener.enterSimplifiedTertiary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedTertiary"):
                listener.exitSimplifiedTertiary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedTertiary"):
                return visitor.visitSimplifiedTertiary(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedTertiary(self):
        localctx = GQLParser.SimplifiedTertiaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_simplifiedTertiary)
        try:
            self.state = 2550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 218, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2548
                self.simplifiedDirectionOverride()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2549
                self.simplifiedSecondary()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedDirectionOverrideContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedOverrideLeft(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedOverrideLeftContext, 0)

        def simplifiedOverrideUndirected(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedOverrideUndirectedContext, 0
            )

        def simplifiedOverrideRight(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedOverrideRightContext, 0)

        def simplifiedOverrideLeftOrUndirected(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedOverrideLeftOrUndirectedContext, 0
            )

        def simplifiedOverrideUndirectedOrRight(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedOverrideUndirectedOrRightContext, 0
            )

        def simplifiedOverrideLeftOrRight(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedOverrideLeftOrRightContext, 0
            )

        def simplifiedOverrideAnyDirection(self):
            return self.getTypedRuleContext(
                GQLParser.SimplifiedOverrideAnyDirectionContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedDirectionOverride

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedDirectionOverride"):
                listener.enterSimplifiedDirectionOverride(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedDirectionOverride"):
                listener.exitSimplifiedDirectionOverride(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedDirectionOverride"):
                return visitor.visitSimplifiedDirectionOverride(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedDirectionOverride(self):
        localctx = GQLParser.SimplifiedDirectionOverrideContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 478, self.RULE_simplifiedDirectionOverride)
        try:
            self.state = 2559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 219, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2552
                self.simplifiedOverrideLeft()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2553
                self.simplifiedOverrideUndirected()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2554
                self.simplifiedOverrideRight()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2555
                self.simplifiedOverrideLeftOrUndirected()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2556
                self.simplifiedOverrideUndirectedOrRight()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2557
                self.simplifiedOverrideLeftOrRight()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2558
                self.simplifiedOverrideAnyDirection()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedOverrideLeftContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0)

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedSecondaryContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedOverrideLeft

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedOverrideLeft"):
                listener.enterSimplifiedOverrideLeft(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedOverrideLeft"):
                listener.exitSimplifiedOverrideLeft(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedOverrideLeft"):
                return visitor.visitSimplifiedOverrideLeft(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedOverrideLeft(self):
        localctx = GQLParser.SimplifiedOverrideLeftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_simplifiedOverrideLeft)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2561
            self.match(GQLParser.LEFT_ANGLE_BRACKET)
            self.state = 2562
            self.simplifiedSecondary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedOverrideUndirectedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(GQLParser.TILDE, 0)

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedSecondaryContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedOverrideUndirected

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedOverrideUndirected"):
                listener.enterSimplifiedOverrideUndirected(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedOverrideUndirected"):
                listener.exitSimplifiedOverrideUndirected(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedOverrideUndirected"):
                return visitor.visitSimplifiedOverrideUndirected(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedOverrideUndirected(self):
        localctx = GQLParser.SimplifiedOverrideUndirectedContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 482, self.RULE_simplifiedOverrideUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2564
            self.match(GQLParser.TILDE)
            self.state = 2565
            self.simplifiedSecondary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedOverrideRightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedSecondaryContext, 0)

        def RIGHT_ANGLE_BRACKET(self):
            return self.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedOverrideRight

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedOverrideRight"):
                listener.enterSimplifiedOverrideRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedOverrideRight"):
                listener.exitSimplifiedOverrideRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedOverrideRight"):
                return visitor.visitSimplifiedOverrideRight(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedOverrideRight(self):
        localctx = GQLParser.SimplifiedOverrideRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_simplifiedOverrideRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2567
            self.simplifiedSecondary()
            self.state = 2568
            self.match(GQLParser.RIGHT_ANGLE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedOverrideLeftOrUndirectedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ARROW_TILDE(self):
            return self.getToken(GQLParser.LEFT_ARROW_TILDE, 0)

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedSecondaryContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedOverrideLeftOrUndirected

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedOverrideLeftOrUndirected"):
                listener.enterSimplifiedOverrideLeftOrUndirected(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedOverrideLeftOrUndirected"):
                listener.exitSimplifiedOverrideLeftOrUndirected(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedOverrideLeftOrUndirected"):
                return visitor.visitSimplifiedOverrideLeftOrUndirected(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedOverrideLeftOrUndirected(self):
        localctx = GQLParser.SimplifiedOverrideLeftOrUndirectedContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 486, self.RULE_simplifiedOverrideLeftOrUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2570
            self.match(GQLParser.LEFT_ARROW_TILDE)
            self.state = 2571
            self.simplifiedSecondary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedOverrideUndirectedOrRightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(GQLParser.TILDE, 0)

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedSecondaryContext, 0)

        def RIGHT_ANGLE_BRACKET(self):
            return self.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedOverrideUndirectedOrRight

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedOverrideUndirectedOrRight"):
                listener.enterSimplifiedOverrideUndirectedOrRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedOverrideUndirectedOrRight"):
                listener.exitSimplifiedOverrideUndirectedOrRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedOverrideUndirectedOrRight"):
                return visitor.visitSimplifiedOverrideUndirectedOrRight(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedOverrideUndirectedOrRight(self):
        localctx = GQLParser.SimplifiedOverrideUndirectedOrRightContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 488, self.RULE_simplifiedOverrideUndirectedOrRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2573
            self.match(GQLParser.TILDE)
            self.state = 2574
            self.simplifiedSecondary()
            self.state = 2575
            self.match(GQLParser.RIGHT_ANGLE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedOverrideLeftOrRightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0)

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedSecondaryContext, 0)

        def RIGHT_ANGLE_BRACKET(self):
            return self.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedOverrideLeftOrRight

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedOverrideLeftOrRight"):
                listener.enterSimplifiedOverrideLeftOrRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedOverrideLeftOrRight"):
                listener.exitSimplifiedOverrideLeftOrRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedOverrideLeftOrRight"):
                return visitor.visitSimplifiedOverrideLeftOrRight(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedOverrideLeftOrRight(self):
        localctx = GQLParser.SimplifiedOverrideLeftOrRightContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 490, self.RULE_simplifiedOverrideLeftOrRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2577
            self.match(GQLParser.LEFT_ANGLE_BRACKET)
            self.state = 2578
            self.simplifiedSecondary()
            self.state = 2579
            self.match(GQLParser.RIGHT_ANGLE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedOverrideAnyDirectionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(GQLParser.MINUS_SIGN, 0)

        def simplifiedSecondary(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedSecondaryContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedOverrideAnyDirection

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedOverrideAnyDirection"):
                listener.enterSimplifiedOverrideAnyDirection(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedOverrideAnyDirection"):
                listener.exitSimplifiedOverrideAnyDirection(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedOverrideAnyDirection"):
                return visitor.visitSimplifiedOverrideAnyDirection(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedOverrideAnyDirection(self):
        localctx = GQLParser.SimplifiedOverrideAnyDirectionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 492, self.RULE_simplifiedOverrideAnyDirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2581
            self.match(GQLParser.MINUS_SIGN)
            self.state = 2582
            self.simplifiedSecondary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedSecondaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplifiedPrimary(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedPrimaryContext, 0)

        def simplifiedNegation(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedNegationContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedSecondary

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedSecondary"):
                listener.enterSimplifiedSecondary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedSecondary"):
                listener.exitSimplifiedSecondary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedSecondary"):
                return visitor.visitSimplifiedSecondary(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedSecondary(self):
        localctx = GQLParser.SimplifiedSecondaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_simplifiedSecondary)
        try:
            self.state = 2586
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                4,
                5,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
                370,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2584
                self.simplifiedPrimary()
                pass
            elif token in [365]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2585
                self.simplifiedNegation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedNegationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_MARK(self):
            return self.getToken(GQLParser.EXCLAMATION_MARK, 0)

        def simplifiedPrimary(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedPrimaryContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedNegation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedNegation"):
                listener.enterSimplifiedNegation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedNegation"):
                listener.exitSimplifiedNegation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedNegation"):
                return visitor.visitSimplifiedNegation(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedNegation(self):
        localctx = GQLParser.SimplifiedNegationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_simplifiedNegation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            self.match(GQLParser.EXCLAMATION_MARK)
            self.state = 2589
            self.simplifiedPrimary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplifiedPrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelName(self):
            return self.getTypedRuleContext(GQLParser.LabelNameContext, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def simplifiedContents(self):
            return self.getTypedRuleContext(GQLParser.SimplifiedContentsContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simplifiedPrimary

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimplifiedPrimary"):
                listener.enterSimplifiedPrimary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimplifiedPrimary"):
                listener.exitSimplifiedPrimary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimplifiedPrimary"):
                return visitor.visitSimplifiedPrimary(self)
            else:
                return visitor.visitChildren(self)

    def simplifiedPrimary(self):
        localctx = GQLParser.SimplifiedPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_simplifiedPrimary)
        try:
            self.state = 2596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                4,
                5,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2591
                self.labelName()
                pass
            elif token in [370]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2592
                self.match(GQLParser.LEFT_PAREN)
                self.state = 2593
                self.simplifiedContents()
                self.state = 2594
                self.match(GQLParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhereClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(GQLParser.WHERE, 0)

        def searchCondition(self):
            return self.getTypedRuleContext(GQLParser.SearchConditionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_whereClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhereClause"):
                listener.enterWhereClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhereClause"):
                listener.exitWhereClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhereClause"):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)

    def whereClause(self):
        localctx = GQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2598
            self.match(GQLParser.WHERE)
            self.state = 2599
            self.searchCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(GQLParser.YIELD, 0)

        def yieldItemList(self):
            return self.getTypedRuleContext(GQLParser.YieldItemListContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_yieldClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYieldClause"):
                listener.enterYieldClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYieldClause"):
                listener.exitYieldClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYieldClause"):
                return visitor.visitYieldClause(self)
            else:
                return visitor.visitChildren(self)

    def yieldClause(self):
        localctx = GQLParser.YieldClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_yieldClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2601
            self.match(GQLParser.YIELD)
            self.state = 2602
            self.yieldItemList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldItemListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yieldItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.YieldItemContext)
            else:
                return self.getTypedRuleContext(GQLParser.YieldItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_yieldItemList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYieldItemList"):
                listener.enterYieldItemList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYieldItemList"):
                listener.exitYieldItemList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYieldItemList"):
                return visitor.visitYieldItemList(self)
            else:
                return visitor.visitChildren(self)

    def yieldItemList(self):
        localctx = GQLParser.YieldItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_yieldItemList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2604
            self.yieldItem()
            self.state = 2609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 2605
                self.match(GQLParser.COMMA)
                self.state = 2606
                self.yieldItem()
                self.state = 2611
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yieldItemName(self):
            return self.getTypedRuleContext(GQLParser.YieldItemNameContext, 0)

        def yieldItemAlias(self):
            return self.getTypedRuleContext(GQLParser.YieldItemAliasContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_yieldItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYieldItem"):
                listener.enterYieldItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYieldItem"):
                listener.exitYieldItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYieldItem"):
                return visitor.visitYieldItem(self)
            else:
                return visitor.visitChildren(self)

    def yieldItem(self):
        localctx = GQLParser.YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_yieldItem)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2612
            self.yieldItemName()
            self.state = 2614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 27:
                self.state = 2613
                self.yieldItemAlias()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldItemNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(GQLParser.FieldNameContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_yieldItemName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYieldItemName"):
                listener.enterYieldItemName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYieldItemName"):
                listener.exitYieldItemName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYieldItemName"):
                return visitor.visitYieldItemName(self)
            else:
                return visitor.visitChildren(self)

    def yieldItemName(self):
        localctx = GQLParser.YieldItemNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_yieldItemName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2616
            self.fieldName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldItemAliasContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(GQLParser.AS, 0)

        def bindingVariable(self):
            return self.getTypedRuleContext(GQLParser.BindingVariableContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_yieldItemAlias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYieldItemAlias"):
                listener.enterYieldItemAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYieldItemAlias"):
                listener.exitYieldItemAlias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYieldItemAlias"):
                return visitor.visitYieldItemAlias(self)
            else:
                return visitor.visitChildren(self)

    def yieldItemAlias(self):
        localctx = GQLParser.YieldItemAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_yieldItemAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2618
            self.match(GQLParser.AS)
            self.state = 2619
            self.bindingVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupByClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(GQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(GQLParser.BY, 0)

        def groupingElementList(self):
            return self.getTypedRuleContext(GQLParser.GroupingElementListContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_groupByClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGroupByClause"):
                listener.enterGroupByClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGroupByClause"):
                listener.exitGroupByClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGroupByClause"):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)

    def groupByClause(self):
        localctx = GQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_groupByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2621
            self.match(GQLParser.GROUP)
            self.state = 2622
            self.match(GQLParser.BY)
            self.state = 2623
            self.groupingElementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupingElementListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingElement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.GroupingElementContext)
            else:
                return self.getTypedRuleContext(GQLParser.GroupingElementContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def emptyGroupingSet(self):
            return self.getTypedRuleContext(GQLParser.EmptyGroupingSetContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_groupingElementList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGroupingElementList"):
                listener.enterGroupingElementList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGroupingElementList"):
                listener.exitGroupingElementList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGroupingElementList"):
                return visitor.visitGroupingElementList(self)
            else:
                return visitor.visitChildren(self)

    def groupingElementList(self):
        localctx = GQLParser.GroupingElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_groupingElementList)
        try:
            self.state = 2634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2625
                self.groupingElement()
                self.state = 2630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 224, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2626
                        self.match(GQLParser.COMMA)
                        self.state = 2627
                        self.groupingElement()
                    self.state = 2632
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 224, self._ctx)

                pass
            elif token in [370]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2633
                self.emptyGroupingSet()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupingElementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.BindingVariableReferenceContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_groupingElement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGroupingElement"):
                listener.enterGroupingElement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGroupingElement"):
                listener.exitGroupingElement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGroupingElement"):
                return visitor.visitGroupingElement(self)
            else:
                return visitor.visitChildren(self)

    def groupingElement(self):
        localctx = GQLParser.GroupingElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_groupingElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2636
            self.bindingVariableReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmptyGroupingSetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_emptyGroupingSet

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEmptyGroupingSet"):
                listener.enterEmptyGroupingSet(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEmptyGroupingSet"):
                listener.exitEmptyGroupingSet(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEmptyGroupingSet"):
                return visitor.visitEmptyGroupingSet(self)
            else:
                return visitor.visitChildren(self)

    def emptyGroupingSet(self):
        localctx = GQLParser.EmptyGroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_emptyGroupingSet)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2638
            self.match(GQLParser.LEFT_PAREN)
            self.state = 2639
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(GQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(GQLParser.BY, 0)

        def sortSpecificationList(self):
            return self.getTypedRuleContext(GQLParser.SortSpecificationListContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_orderByClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderByClause"):
                listener.enterOrderByClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderByClause"):
                listener.exitOrderByClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrderByClause"):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)

    def orderByClause(self):
        localctx = GQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2641
            self.match(GQLParser.ORDER)
            self.state = 2642
            self.match(GQLParser.BY)
            self.state = 2643
            self.sortSpecificationList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortSpecificationListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sortSpecification(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.SortSpecificationContext)
            else:
                return self.getTypedRuleContext(GQLParser.SortSpecificationContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_sortSpecificationList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSortSpecificationList"):
                listener.enterSortSpecificationList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSortSpecificationList"):
                listener.exitSortSpecificationList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSortSpecificationList"):
                return visitor.visitSortSpecificationList(self)
            else:
                return visitor.visitChildren(self)

    def sortSpecificationList(self):
        localctx = GQLParser.SortSpecificationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_sortSpecificationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2645
            self.sortSpecification()
            self.state = 2650
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 226, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2646
                    self.match(GQLParser.COMMA)
                    self.state = 2647
                    self.sortSpecification()
                self.state = 2652
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 226, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sortKey(self):
            return self.getTypedRuleContext(GQLParser.SortKeyContext, 0)

        def orderingSpecification(self):
            return self.getTypedRuleContext(GQLParser.OrderingSpecificationContext, 0)

        def nullOrdering(self):
            return self.getTypedRuleContext(GQLParser.NullOrderingContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_sortSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSortSpecification"):
                listener.enterSortSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSortSpecification"):
                listener.exitSortSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSortSpecification"):
                return visitor.visitSortSpecification(self)
            else:
                return visitor.visitChildren(self)

    def sortSpecification(self):
        localctx = GQLParser.SortSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_sortSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2653
            self.sortKey()
            self.state = 2655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 227, self._ctx)
            if la_ == 1:
                self.state = 2654
                self.orderingSpecification()

            self.state = 2658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 228, self._ctx)
            if la_ == 1:
                self.state = 2657
                self.nullOrdering()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortKeyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregatingValueExpression(self):
            return self.getTypedRuleContext(
                GQLParser.AggregatingValueExpressionContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_sortKey

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSortKey"):
                listener.enterSortKey(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSortKey"):
                listener.exitSortKey(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSortKey"):
                return visitor.visitSortKey(self)
            else:
                return visitor.visitChildren(self)

    def sortKey(self):
        localctx = GQLParser.SortKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_sortKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2660
            self.aggregatingValueExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderingSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(GQLParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(GQLParser.ASCENDING, 0)

        def DESC(self):
            return self.getToken(GQLParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(GQLParser.DESCENDING, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_orderingSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderingSpecification"):
                listener.enterOrderingSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderingSpecification"):
                listener.exitOrderingSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrderingSpecification"):
                return visitor.visitOrderingSpecification(self)
            else:
                return visitor.visitChildren(self)

    def orderingSpecification(self):
        localctx = GQLParser.OrderingSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_orderingSpecification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2662
            _la = self._input.LA(1)
            if not (
                ((_la - 28) & ~0x3F) == 0
                and ((1 << (_la - 28)) & 1688849860263939) != 0
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NullOrderingContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(GQLParser.NULLS, 0)

        def FIRST(self):
            return self.getToken(GQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(GQLParser.LAST, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nullOrdering

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNullOrdering"):
                listener.enterNullOrdering(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNullOrdering"):
                listener.exitNullOrdering(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNullOrdering"):
                return visitor.visitNullOrdering(self)
            else:
                return visitor.visitChildren(self)

    def nullOrdering(self):
        localctx = GQLParser.NullOrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_nullOrdering)
        try:
            self.state = 2668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 229, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2664
                self.match(GQLParser.NULLS)
                self.state = 2665
                self.match(GQLParser.FIRST)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2666
                self.match(GQLParser.NULLS)
                self.state = 2667
                self.match(GQLParser.LAST)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(GQLParser.LIMIT, 0)

        def nonNegativeIntegerSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NonNegativeIntegerSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_limitClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLimitClause"):
                listener.enterLimitClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLimitClause"):
                listener.exitLimitClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLimitClause"):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)

    def limitClause(self):
        localctx = GQLParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2670
            self.match(GQLParser.LIMIT)
            self.state = 2671
            self.nonNegativeIntegerSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OffsetClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def offsetSynonym(self):
            return self.getTypedRuleContext(GQLParser.OffsetSynonymContext, 0)

        def nonNegativeIntegerSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NonNegativeIntegerSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_offsetClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOffsetClause"):
                listener.enterOffsetClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOffsetClause"):
                listener.exitOffsetClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOffsetClause"):
                return visitor.visitOffsetClause(self)
            else:
                return visitor.visitChildren(self)

    def offsetClause(self):
        localctx = GQLParser.OffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_offsetClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2673
            self.offsetSynonym()
            self.state = 2674
            self.nonNegativeIntegerSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OffsetSynonymContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(GQLParser.OFFSET, 0)

        def SKIP_RESERVED_WORD(self):
            return self.getToken(GQLParser.SKIP_RESERVED_WORD, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_offsetSynonym

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOffsetSynonym"):
                listener.enterOffsetSynonym(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOffsetSynonym"):
                listener.exitOffsetSynonym(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOffsetSynonym"):
                return visitor.visitOffsetSynonym(self)
            else:
                return visitor.visitChildren(self)

    def offsetSynonym(self):
        localctx = GQLParser.OffsetSynonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_offsetSynonym)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2676
            _la = self._input.LA(1)
            if not (_la == 159 or _la == 195):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SchemaReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def absoluteCatalogSchemaReference(self):
            return self.getTypedRuleContext(
                GQLParser.AbsoluteCatalogSchemaReferenceContext, 0
            )

        def relativeCatalogSchemaReference(self):
            return self.getTypedRuleContext(
                GQLParser.RelativeCatalogSchemaReferenceContext, 0
            )

        def referenceParameterSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.ReferenceParameterSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_schemaReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSchemaReference"):
                listener.enterSchemaReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSchemaReference"):
                listener.exitSchemaReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSchemaReference"):
                return visitor.visitSchemaReference(self)
            else:
                return visitor.visitChildren(self)

    def schemaReference(self):
        localctx = GQLParser.SchemaReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_schemaReference)
        try:
            self.state = 2681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [382]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2678
                self.absoluteCatalogSchemaReference()
                pass
            elif token in [67, 106, 333, 374]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2679
                self.relativeCatalogSchemaReference()
                pass
            elif token in [325]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2680
                self.referenceParameterSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbsoluteCatalogSchemaReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOLIDUS(self):
            return self.getToken(GQLParser.SOLIDUS, 0)

        def absoluteDirectoryPath(self):
            return self.getTypedRuleContext(GQLParser.AbsoluteDirectoryPathContext, 0)

        def schemaName(self):
            return self.getTypedRuleContext(GQLParser.SchemaNameContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_absoluteCatalogSchemaReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbsoluteCatalogSchemaReference"):
                listener.enterAbsoluteCatalogSchemaReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbsoluteCatalogSchemaReference"):
                listener.exitAbsoluteCatalogSchemaReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAbsoluteCatalogSchemaReference"):
                return visitor.visitAbsoluteCatalogSchemaReference(self)
            else:
                return visitor.visitChildren(self)

    def absoluteCatalogSchemaReference(self):
        localctx = GQLParser.AbsoluteCatalogSchemaReferenceContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 540, self.RULE_absoluteCatalogSchemaReference)
        try:
            self.state = 2687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 231, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2683
                self.match(GQLParser.SOLIDUS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2684
                self.absoluteDirectoryPath()
                self.state = 2685
                self.schemaName()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatalogSchemaParentAndNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def absoluteDirectoryPath(self):
            return self.getTypedRuleContext(GQLParser.AbsoluteDirectoryPathContext, 0)

        def schemaName(self):
            return self.getTypedRuleContext(GQLParser.SchemaNameContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_catalogSchemaParentAndName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCatalogSchemaParentAndName"):
                listener.enterCatalogSchemaParentAndName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCatalogSchemaParentAndName"):
                listener.exitCatalogSchemaParentAndName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCatalogSchemaParentAndName"):
                return visitor.visitCatalogSchemaParentAndName(self)
            else:
                return visitor.visitChildren(self)

    def catalogSchemaParentAndName(self):
        localctx = GQLParser.CatalogSchemaParentAndNameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 542, self.RULE_catalogSchemaParentAndName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2689
            self.absoluteDirectoryPath()
            self.state = 2690
            self.schemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelativeCatalogSchemaReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predefinedSchemaReference(self):
            return self.getTypedRuleContext(
                GQLParser.PredefinedSchemaReferenceContext, 0
            )

        def relativeDirectoryPath(self):
            return self.getTypedRuleContext(GQLParser.RelativeDirectoryPathContext, 0)

        def schemaName(self):
            return self.getTypedRuleContext(GQLParser.SchemaNameContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_relativeCatalogSchemaReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelativeCatalogSchemaReference"):
                listener.enterRelativeCatalogSchemaReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelativeCatalogSchemaReference"):
                listener.exitRelativeCatalogSchemaReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRelativeCatalogSchemaReference"):
                return visitor.visitRelativeCatalogSchemaReference(self)
            else:
                return visitor.visitChildren(self)

    def relativeCatalogSchemaReference(self):
        localctx = GQLParser.RelativeCatalogSchemaReferenceContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 544, self.RULE_relativeCatalogSchemaReference)
        try:
            self.state = 2696
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67, 106, 374]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2692
                self.predefinedSchemaReference()
                pass
            elif token in [333]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2693
                self.relativeDirectoryPath()
                self.state = 2694
                self.schemaName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredefinedSchemaReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOME_SCHEMA(self):
            return self.getToken(GQLParser.HOME_SCHEMA, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(GQLParser.CURRENT_SCHEMA, 0)

        def PERIOD(self):
            return self.getToken(GQLParser.PERIOD, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_predefinedSchemaReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPredefinedSchemaReference"):
                listener.enterPredefinedSchemaReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPredefinedSchemaReference"):
                listener.exitPredefinedSchemaReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPredefinedSchemaReference"):
                return visitor.visitPredefinedSchemaReference(self)
            else:
                return visitor.visitChildren(self)

    def predefinedSchemaReference(self):
        localctx = GQLParser.PredefinedSchemaReferenceContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 546, self.RULE_predefinedSchemaReference)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2698
            _la = self._input.LA(1)
            if not (_la == 67 or _la == 106 or _la == 374):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbsoluteDirectoryPathContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOLIDUS(self):
            return self.getToken(GQLParser.SOLIDUS, 0)

        def simpleDirectoryPath(self):
            return self.getTypedRuleContext(GQLParser.SimpleDirectoryPathContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_absoluteDirectoryPath

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbsoluteDirectoryPath"):
                listener.enterAbsoluteDirectoryPath(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbsoluteDirectoryPath"):
                listener.exitAbsoluteDirectoryPath(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAbsoluteDirectoryPath"):
                return visitor.visitAbsoluteDirectoryPath(self)
            else:
                return visitor.visitChildren(self)

    def absoluteDirectoryPath(self):
        localctx = GQLParser.AbsoluteDirectoryPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_absoluteDirectoryPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2700
            self.match(GQLParser.SOLIDUS)
            self.state = 2702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 233, self._ctx)
            if la_ == 1:
                self.state = 2701
                self.simpleDirectoryPath()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelativeDirectoryPathContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_PERIOD(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.DOUBLE_PERIOD)
            else:
                return self.getToken(GQLParser.DOUBLE_PERIOD, i)

        def SOLIDUS(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.SOLIDUS)
            else:
                return self.getToken(GQLParser.SOLIDUS, i)

        def simpleDirectoryPath(self):
            return self.getTypedRuleContext(GQLParser.SimpleDirectoryPathContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_relativeDirectoryPath

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelativeDirectoryPath"):
                listener.enterRelativeDirectoryPath(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelativeDirectoryPath"):
                listener.exitRelativeDirectoryPath(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRelativeDirectoryPath"):
                return visitor.visitRelativeDirectoryPath(self)
            else:
                return visitor.visitChildren(self)

    def relativeDirectoryPath(self):
        localctx = GQLParser.RelativeDirectoryPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_relativeDirectoryPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2704
            self.match(GQLParser.DOUBLE_PERIOD)
            self.state = 2709
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 234, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2705
                    self.match(GQLParser.SOLIDUS)
                    self.state = 2706
                    self.match(GQLParser.DOUBLE_PERIOD)
                self.state = 2711
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 234, self._ctx)

            self.state = 2712
            self.match(GQLParser.SOLIDUS)
            self.state = 2714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 235, self._ctx)
            if la_ == 1:
                self.state = 2713
                self.simpleDirectoryPath()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleDirectoryPathContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directoryName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.DirectoryNameContext)
            else:
                return self.getTypedRuleContext(GQLParser.DirectoryNameContext, i)

        def SOLIDUS(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.SOLIDUS)
            else:
                return self.getToken(GQLParser.SOLIDUS, i)

        def getRuleIndex(self):
            return GQLParser.RULE_simpleDirectoryPath

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpleDirectoryPath"):
                listener.enterSimpleDirectoryPath(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpleDirectoryPath"):
                listener.exitSimpleDirectoryPath(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimpleDirectoryPath"):
                return visitor.visitSimpleDirectoryPath(self)
            else:
                return visitor.visitChildren(self)

    def simpleDirectoryPath(self):
        localctx = GQLParser.SimpleDirectoryPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_simpleDirectoryPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2719
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2716
                    self.directoryName()
                    self.state = 2717
                    self.match(GQLParser.SOLIDUS)

                else:
                    raise NoViableAltException(self)
                self.state = 2721
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 236, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalogObjectParentReference(self):
            return self.getTypedRuleContext(
                GQLParser.CatalogObjectParentReferenceContext, 0
            )

        def graphName(self):
            return self.getTypedRuleContext(GQLParser.GraphNameContext, 0)

        def delimitedGraphName(self):
            return self.getTypedRuleContext(GQLParser.DelimitedGraphNameContext, 0)

        def homeGraph(self):
            return self.getTypedRuleContext(GQLParser.HomeGraphContext, 0)

        def referenceParameterSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.ReferenceParameterSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_graphReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphReference"):
                listener.enterGraphReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphReference"):
                listener.exitGraphReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphReference"):
                return visitor.visitGraphReference(self)
            else:
                return visitor.visitChildren(self)

    def graphReference(self):
        localctx = GQLParser.GraphReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_graphReference)
        try:
            self.state = 2729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 237, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2723
                self.catalogObjectParentReference()
                self.state = 2724
                self.graphName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2726
                self.delimitedGraphName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2727
                self.homeGraph()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2728
                self.referenceParameterSpecification()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatalogGraphParentAndNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphName(self):
            return self.getTypedRuleContext(GQLParser.GraphNameContext, 0)

        def catalogObjectParentReference(self):
            return self.getTypedRuleContext(
                GQLParser.CatalogObjectParentReferenceContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_catalogGraphParentAndName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCatalogGraphParentAndName"):
                listener.enterCatalogGraphParentAndName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCatalogGraphParentAndName"):
                listener.exitCatalogGraphParentAndName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCatalogGraphParentAndName"):
                return visitor.visitCatalogGraphParentAndName(self)
            else:
                return visitor.visitChildren(self)

    def catalogGraphParentAndName(self):
        localctx = GQLParser.CatalogGraphParentAndNameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 556, self.RULE_catalogGraphParentAndName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 238, self._ctx)
            if la_ == 1:
                self.state = 2731
                self.catalogObjectParentReference()

            self.state = 2734
            self.graphName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HomeGraphContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOME_PROPERTY_GRAPH(self):
            return self.getToken(GQLParser.HOME_PROPERTY_GRAPH, 0)

        def HOME_GRAPH(self):
            return self.getToken(GQLParser.HOME_GRAPH, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_homeGraph

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHomeGraph"):
                listener.enterHomeGraph(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHomeGraph"):
                listener.exitHomeGraph(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHomeGraph"):
                return visitor.visitHomeGraph(self)
            else:
                return visitor.visitChildren(self)

    def homeGraph(self):
        localctx = GQLParser.HomeGraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_homeGraph)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2736
            _la = self._input.LA(1)
            if not (_la == 104 or _la == 105):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphTypeReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalogGraphTypeParentAndName(self):
            return self.getTypedRuleContext(
                GQLParser.CatalogGraphTypeParentAndNameContext, 0
            )

        def referenceParameterSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.ReferenceParameterSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_graphTypeReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphTypeReference"):
                listener.enterGraphTypeReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphTypeReference"):
                listener.exitGraphTypeReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphTypeReference"):
                return visitor.visitGraphTypeReference(self)
            else:
                return visitor.visitChildren(self)

    def graphTypeReference(self):
        localctx = GQLParser.GraphTypeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_graphTypeReference)
        try:
            self.state = 2740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 239, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2738
                self.catalogGraphTypeParentAndName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2739
                self.referenceParameterSpecification()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatalogGraphTypeParentAndNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphTypeName(self):
            return self.getTypedRuleContext(GQLParser.GraphTypeNameContext, 0)

        def catalogObjectParentReference(self):
            return self.getTypedRuleContext(
                GQLParser.CatalogObjectParentReferenceContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_catalogGraphTypeParentAndName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCatalogGraphTypeParentAndName"):
                listener.enterCatalogGraphTypeParentAndName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCatalogGraphTypeParentAndName"):
                listener.exitCatalogGraphTypeParentAndName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCatalogGraphTypeParentAndName"):
                return visitor.visitCatalogGraphTypeParentAndName(self)
            else:
                return visitor.visitChildren(self)

    def catalogGraphTypeParentAndName(self):
        localctx = GQLParser.CatalogGraphTypeParentAndNameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 562, self.RULE_catalogGraphTypeParentAndName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 240, self._ctx)
            if la_ == 1:
                self.state = 2742
                self.catalogObjectParentReference()

            self.state = 2745
            self.graphTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindingTableReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalogObjectParentReference(self):
            return self.getTypedRuleContext(
                GQLParser.CatalogObjectParentReferenceContext, 0
            )

        def bindingTableName(self):
            return self.getTypedRuleContext(GQLParser.BindingTableNameContext, 0)

        def delimitedBindingTableName(self):
            return self.getTypedRuleContext(
                GQLParser.DelimitedBindingTableNameContext, 0
            )

        def referenceParameterSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.ReferenceParameterSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_bindingTableReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBindingTableReference"):
                listener.enterBindingTableReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBindingTableReference"):
                listener.exitBindingTableReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBindingTableReference"):
                return visitor.visitBindingTableReference(self)
            else:
                return visitor.visitChildren(self)

    def bindingTableReference(self):
        localctx = GQLParser.BindingTableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_bindingTableReference)
        try:
            self.state = 2752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 241, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2747
                self.catalogObjectParentReference()
                self.state = 2748
                self.bindingTableName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2750
                self.delimitedBindingTableName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2751
                self.referenceParameterSpecification()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catalogProcedureParentAndName(self):
            return self.getTypedRuleContext(
                GQLParser.CatalogProcedureParentAndNameContext, 0
            )

        def referenceParameterSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.ReferenceParameterSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_procedureReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProcedureReference"):
                listener.enterProcedureReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProcedureReference"):
                listener.exitProcedureReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProcedureReference"):
                return visitor.visitProcedureReference(self)
            else:
                return visitor.visitChildren(self)

    def procedureReference(self):
        localctx = GQLParser.ProcedureReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_procedureReference)
        try:
            self.state = 2756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 242, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2754
                self.catalogProcedureParentAndName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2755
                self.referenceParameterSpecification()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatalogProcedureParentAndNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureName(self):
            return self.getTypedRuleContext(GQLParser.ProcedureNameContext, 0)

        def catalogObjectParentReference(self):
            return self.getTypedRuleContext(
                GQLParser.CatalogObjectParentReferenceContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_catalogProcedureParentAndName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCatalogProcedureParentAndName"):
                listener.enterCatalogProcedureParentAndName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCatalogProcedureParentAndName"):
                listener.exitCatalogProcedureParentAndName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCatalogProcedureParentAndName"):
                return visitor.visitCatalogProcedureParentAndName(self)
            else:
                return visitor.visitChildren(self)

    def catalogProcedureParentAndName(self):
        localctx = GQLParser.CatalogProcedureParentAndNameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 568, self.RULE_catalogProcedureParentAndName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 243, self._ctx)
            if la_ == 1:
                self.state = 2758
                self.catalogObjectParentReference()

            self.state = 2761
            self.procedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatalogObjectParentReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemaReference(self):
            return self.getTypedRuleContext(GQLParser.SchemaReferenceContext, 0)

        def SOLIDUS(self):
            return self.getToken(GQLParser.SOLIDUS, 0)

        def objectName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.ObjectNameContext)
            else:
                return self.getTypedRuleContext(GQLParser.ObjectNameContext, i)

        def PERIOD(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.PERIOD)
            else:
                return self.getToken(GQLParser.PERIOD, i)

        def getRuleIndex(self):
            return GQLParser.RULE_catalogObjectParentReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCatalogObjectParentReference"):
                listener.enterCatalogObjectParentReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCatalogObjectParentReference"):
                listener.exitCatalogObjectParentReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCatalogObjectParentReference"):
                return visitor.visitCatalogObjectParentReference(self)
            else:
                return visitor.visitChildren(self)

    def catalogObjectParentReference(self):
        localctx = GQLParser.CatalogObjectParentReferenceContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 570, self.RULE_catalogObjectParentReference)
        self._la = 0  # Token type
        try:
            self.state = 2782
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67, 106, 325, 333, 374, 382]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2763
                self.schemaReference()
                self.state = 2765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 382:
                    self.state = 2764
                    self.match(GQLParser.SOLIDUS)

                self.state = 2772
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 245, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2767
                        self.objectName()
                        self.state = 2768
                        self.match(GQLParser.PERIOD)
                    self.state = 2774
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 245, self._ctx)

                pass
            elif token in [
                4,
                5,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2778
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2775
                        self.objectName()
                        self.state = 2776
                        self.match(GQLParser.PERIOD)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2780
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 246, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferenceParameterSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSTITUTED_PARAMETER_REFERENCE(self):
            return self.getToken(GQLParser.SUBSTITUTED_PARAMETER_REFERENCE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_referenceParameterSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReferenceParameterSpecification"):
                listener.enterReferenceParameterSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReferenceParameterSpecification"):
                listener.exitReferenceParameterSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReferenceParameterSpecification"):
                return visitor.visitReferenceParameterSpecification(self)
            else:
                return visitor.visitChildren(self)

    def referenceParameterSpecification(self):
        localctx = GQLParser.ReferenceParameterSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 572, self.RULE_referenceParameterSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2784
            self.match(GQLParser.SUBSTITUTED_PARAMETER_REFERENCE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestedGraphTypeSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GQLParser.LEFT_BRACE, 0)

        def graphTypeSpecificationBody(self):
            return self.getTypedRuleContext(
                GQLParser.GraphTypeSpecificationBodyContext, 0
            )

        def RIGHT_BRACE(self):
            return self.getToken(GQLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nestedGraphTypeSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestedGraphTypeSpecification"):
                listener.enterNestedGraphTypeSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestedGraphTypeSpecification"):
                listener.exitNestedGraphTypeSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNestedGraphTypeSpecification"):
                return visitor.visitNestedGraphTypeSpecification(self)
            else:
                return visitor.visitChildren(self)

    def nestedGraphTypeSpecification(self):
        localctx = GQLParser.NestedGraphTypeSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 574, self.RULE_nestedGraphTypeSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2786
            self.match(GQLParser.LEFT_BRACE)
            self.state = 2787
            self.graphTypeSpecificationBody()
            self.state = 2788
            self.match(GQLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphTypeSpecificationBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementTypeList(self):
            return self.getTypedRuleContext(GQLParser.ElementTypeListContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_graphTypeSpecificationBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphTypeSpecificationBody"):
                listener.enterGraphTypeSpecificationBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphTypeSpecificationBody"):
                listener.exitGraphTypeSpecificationBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphTypeSpecificationBody"):
                return visitor.visitGraphTypeSpecificationBody(self)
            else:
                return visitor.visitChildren(self)

    def graphTypeSpecificationBody(self):
        localctx = GQLParser.GraphTypeSpecificationBodyContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 576, self.RULE_graphTypeSpecificationBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2790
            self.elementTypeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementTypeListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementTypeSpecification(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    GQLParser.ElementTypeSpecificationContext
                )
            else:
                return self.getTypedRuleContext(
                    GQLParser.ElementTypeSpecificationContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_elementTypeList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementTypeList"):
                listener.enterElementTypeList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementTypeList"):
                listener.exitElementTypeList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementTypeList"):
                return visitor.visitElementTypeList(self)
            else:
                return visitor.visitChildren(self)

    def elementTypeList(self):
        localctx = GQLParser.ElementTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_elementTypeList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2792
            self.elementTypeSpecification()
            self.state = 2797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 2793
                self.match(GQLParser.COMMA)
                self.state = 2794
                self.elementTypeSpecification()
                self.state = 2799
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementTypeSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeTypeSpecification(self):
            return self.getTypedRuleContext(GQLParser.NodeTypeSpecificationContext, 0)

        def edgeTypeSpecification(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypeSpecificationContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_elementTypeSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementTypeSpecification"):
                listener.enterElementTypeSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementTypeSpecification"):
                listener.exitElementTypeSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementTypeSpecification"):
                return visitor.visitElementTypeSpecification(self)
            else:
                return visitor.visitChildren(self)

    def elementTypeSpecification(self):
        localctx = GQLParser.ElementTypeSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 580, self.RULE_elementTypeSpecification)
        try:
            self.state = 2802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 249, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2800
                self.nodeTypeSpecification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2801
                self.edgeTypeSpecification()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeTypeSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeTypePattern(self):
            return self.getTypedRuleContext(GQLParser.NodeTypePatternContext, 0)

        def nodeTypePhrase(self):
            return self.getTypedRuleContext(GQLParser.NodeTypePhraseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nodeTypeSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodeTypeSpecification"):
                listener.enterNodeTypeSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodeTypeSpecification"):
                listener.exitNodeTypeSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodeTypeSpecification"):
                return visitor.visitNodeTypeSpecification(self)
            else:
                return visitor.visitChildren(self)

    def nodeTypeSpecification(self):
        localctx = GQLParser.NodeTypeSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_nodeTypeSpecification)
        try:
            self.state = 2806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 250, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2804
                self.nodeTypePattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2805
                self.nodeTypePhrase()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeTypePatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def nodeSynonym(self):
            return self.getTypedRuleContext(GQLParser.NodeSynonymContext, 0)

        def nodeTypeName(self):
            return self.getTypedRuleContext(GQLParser.NodeTypeNameContext, 0)

        def localNodeTypeAlias(self):
            return self.getTypedRuleContext(GQLParser.LocalNodeTypeAliasContext, 0)

        def nodeTypeFiller(self):
            return self.getTypedRuleContext(GQLParser.NodeTypeFillerContext, 0)

        def TYPE(self):
            return self.getToken(GQLParser.TYPE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nodeTypePattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodeTypePattern"):
                listener.enterNodeTypePattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodeTypePattern"):
                listener.exitNodeTypePattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodeTypePattern"):
                return visitor.visitNodeTypePattern(self)
            else:
                return visitor.visitChildren(self)

    def nodeTypePattern(self):
        localctx = GQLParser.NodeTypePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_nodeTypePattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 301 or _la == 319:
                self.state = 2808
                self.nodeSynonym()
                self.state = 2810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 251, self._ctx)
                if la_ == 1:
                    self.state = 2809
                    self.match(GQLParser.TYPE)

                self.state = 2812
                self.nodeTypeName()

            self.state = 2816
            self.match(GQLParser.LEFT_PAREN)
            self.state = 2818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 253, self._ctx)
            if la_ == 1:
                self.state = 2817
                self.localNodeTypeAlias()

            self.state = 2821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == 1
                or _la == 127
                or _la == 292
                or _la == 294
                or _la == 359
                or _la == 368
            ):
                self.state = 2820
                self.nodeTypeFiller()

            self.state = 2823
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeTypePhraseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeSynonym(self):
            return self.getTypedRuleContext(GQLParser.NodeSynonymContext, 0)

        def nodeTypePhraseFiller(self):
            return self.getTypedRuleContext(GQLParser.NodeTypePhraseFillerContext, 0)

        def TYPE(self):
            return self.getToken(GQLParser.TYPE, 0)

        def AS(self):
            return self.getToken(GQLParser.AS, 0)

        def localNodeTypeAlias(self):
            return self.getTypedRuleContext(GQLParser.LocalNodeTypeAliasContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nodeTypePhrase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodeTypePhrase"):
                listener.enterNodeTypePhrase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodeTypePhrase"):
                listener.exitNodeTypePhrase(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodeTypePhrase"):
                return visitor.visitNodeTypePhrase(self)
            else:
                return visitor.visitChildren(self)

    def nodeTypePhrase(self):
        localctx = GQLParser.NodeTypePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_nodeTypePhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2825
            self.nodeSynonym()
            self.state = 2827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 255, self._ctx)
            if la_ == 1:
                self.state = 2826
                self.match(GQLParser.TYPE)

            self.state = 2829
            self.nodeTypePhraseFiller()
            self.state = 2832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 256, self._ctx)
            if la_ == 1:
                self.state = 2830
                self.match(GQLParser.AS)
                self.state = 2831
                self.localNodeTypeAlias()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeTypePhraseFillerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeTypeName(self):
            return self.getTypedRuleContext(GQLParser.NodeTypeNameContext, 0)

        def nodeTypeFiller(self):
            return self.getTypedRuleContext(GQLParser.NodeTypeFillerContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nodeTypePhraseFiller

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodeTypePhraseFiller"):
                listener.enterNodeTypePhraseFiller(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodeTypePhraseFiller"):
                listener.exitNodeTypePhraseFiller(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodeTypePhraseFiller"):
                return visitor.visitNodeTypePhraseFiller(self)
            else:
                return visitor.visitChildren(self)

    def nodeTypePhraseFiller(self):
        localctx = GQLParser.NodeTypePhraseFillerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_nodeTypePhraseFiller)
        try:
            self.state = 2839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 258, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2834
                self.nodeTypeName()
                self.state = 2836
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 257, self._ctx)
                if la_ == 1:
                    self.state = 2835
                    self.nodeTypeFiller()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2838
                self.nodeTypeFiller()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeTypeFillerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeTypeKeyLabelSet(self):
            return self.getTypedRuleContext(GQLParser.NodeTypeKeyLabelSetContext, 0)

        def nodeTypeImpliedContent(self):
            return self.getTypedRuleContext(GQLParser.NodeTypeImpliedContentContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nodeTypeFiller

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodeTypeFiller"):
                listener.enterNodeTypeFiller(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodeTypeFiller"):
                listener.exitNodeTypeFiller(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodeTypeFiller"):
                return visitor.visitNodeTypeFiller(self)
            else:
                return visitor.visitChildren(self)

    def nodeTypeFiller(self):
        localctx = GQLParser.NodeTypeFillerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_nodeTypeFiller)
        try:
            self.state = 2846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 260, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2841
                self.nodeTypeKeyLabelSet()
                self.state = 2843
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 259, self._ctx)
                if la_ == 1:
                    self.state = 2842
                    self.nodeTypeImpliedContent()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2845
                self.nodeTypeImpliedContent()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalNodeTypeAliasContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regularIdentifier(self):
            return self.getTypedRuleContext(GQLParser.RegularIdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_localNodeTypeAlias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLocalNodeTypeAlias"):
                listener.enterLocalNodeTypeAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLocalNodeTypeAlias"):
                listener.exitLocalNodeTypeAlias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLocalNodeTypeAlias"):
                return visitor.visitLocalNodeTypeAlias(self)
            else:
                return visitor.visitChildren(self)

    def localNodeTypeAlias(self):
        localctx = GQLParser.LocalNodeTypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_localNodeTypeAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2848
            self.regularIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeTypeImpliedContentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeTypeLabelSet(self):
            return self.getTypedRuleContext(GQLParser.NodeTypeLabelSetContext, 0)

        def nodeTypePropertyTypes(self):
            return self.getTypedRuleContext(GQLParser.NodeTypePropertyTypesContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nodeTypeImpliedContent

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodeTypeImpliedContent"):
                listener.enterNodeTypeImpliedContent(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodeTypeImpliedContent"):
                listener.exitNodeTypeImpliedContent(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodeTypeImpliedContent"):
                return visitor.visitNodeTypeImpliedContent(self)
            else:
                return visitor.visitChildren(self)

    def nodeTypeImpliedContent(self):
        localctx = GQLParser.NodeTypeImpliedContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_nodeTypeImpliedContent)
        try:
            self.state = 2855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 261, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2850
                self.nodeTypeLabelSet()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2851
                self.nodeTypePropertyTypes()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2852
                self.nodeTypeLabelSet()
                self.state = 2853
                self.nodeTypePropertyTypes()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeTypeKeyLabelSetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLIES(self):
            return self.getToken(GQLParser.IMPLIES, 0)

        def labelSetPhrase(self):
            return self.getTypedRuleContext(GQLParser.LabelSetPhraseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nodeTypeKeyLabelSet

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodeTypeKeyLabelSet"):
                listener.enterNodeTypeKeyLabelSet(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodeTypeKeyLabelSet"):
                listener.exitNodeTypeKeyLabelSet(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodeTypeKeyLabelSet"):
                return visitor.visitNodeTypeKeyLabelSet(self)
            else:
                return visitor.visitChildren(self)

    def nodeTypeKeyLabelSet(self):
        localctx = GQLParser.NodeTypeKeyLabelSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_nodeTypeKeyLabelSet)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 127 or _la == 292 or _la == 294 or _la == 359:
                self.state = 2857
                self.labelSetPhrase()

            self.state = 2860
            self.match(GQLParser.IMPLIES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeTypeLabelSetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelSetPhrase(self):
            return self.getTypedRuleContext(GQLParser.LabelSetPhraseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nodeTypeLabelSet

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodeTypeLabelSet"):
                listener.enterNodeTypeLabelSet(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodeTypeLabelSet"):
                listener.exitNodeTypeLabelSet(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodeTypeLabelSet"):
                return visitor.visitNodeTypeLabelSet(self)
            else:
                return visitor.visitChildren(self)

    def nodeTypeLabelSet(self):
        localctx = GQLParser.NodeTypeLabelSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_nodeTypeLabelSet)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2862
            self.labelSetPhrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeTypePropertyTypesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyTypesSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.PropertyTypesSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_nodeTypePropertyTypes

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodeTypePropertyTypes"):
                listener.enterNodeTypePropertyTypes(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodeTypePropertyTypes"):
                listener.exitNodeTypePropertyTypes(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodeTypePropertyTypes"):
                return visitor.visitNodeTypePropertyTypes(self)
            else:
                return visitor.visitChildren(self)

    def nodeTypePropertyTypes(self):
        localctx = GQLParser.NodeTypePropertyTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_nodeTypePropertyTypes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2864
            self.propertyTypesSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeTypeSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeTypePattern(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypePatternContext, 0)

        def edgeTypePhrase(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypePhraseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgeTypeSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeTypeSpecification"):
                listener.enterEdgeTypeSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeTypeSpecification"):
                listener.exitEdgeTypeSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeTypeSpecification"):
                return visitor.visitEdgeTypeSpecification(self)
            else:
                return visitor.visitChildren(self)

    def edgeTypeSpecification(self):
        localctx = GQLParser.EdgeTypeSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_edgeTypeSpecification)
        try:
            self.state = 2868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 263, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2866
                self.edgeTypePattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2867
                self.edgeTypePhrase()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeTypePatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeTypePatternDirected(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypePatternDirectedContext, 0)

        def edgeTypePatternUndirected(self):
            return self.getTypedRuleContext(
                GQLParser.EdgeTypePatternUndirectedContext, 0
            )

        def edgeSynonym(self):
            return self.getTypedRuleContext(GQLParser.EdgeSynonymContext, 0)

        def edgeTypeName(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypeNameContext, 0)

        def edgeKind(self):
            return self.getTypedRuleContext(GQLParser.EdgeKindContext, 0)

        def TYPE(self):
            return self.getToken(GQLParser.TYPE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgeTypePattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeTypePattern"):
                listener.enterEdgeTypePattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeTypePattern"):
                listener.exitEdgeTypePattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeTypePattern"):
                return visitor.visitEdgeTypePattern(self)
            else:
                return visitor.visitChildren(self)

    def edgeTypePattern(self):
        localctx = GQLParser.EdgeTypePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_edgeTypePattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la - 283) & ~0x3F) == 0 and ((1 << (_la - 283)) & 34376515587) != 0:
                self.state = 2871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 283 or _la == 318:
                    self.state = 2870
                    self.edgeKind()

                self.state = 2873
                self.edgeSynonym()
                self.state = 2875
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 265, self._ctx)
                if la_ == 1:
                    self.state = 2874
                    self.match(GQLParser.TYPE)

                self.state = 2877
                self.edgeTypeName()

            self.state = 2883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 267, self._ctx)
            if la_ == 1:
                self.state = 2881
                self.edgeTypePatternDirected()
                pass

            elif la_ == 2:
                self.state = 2882
                self.edgeTypePatternUndirected()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeTypePhraseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeKind(self):
            return self.getTypedRuleContext(GQLParser.EdgeKindContext, 0)

        def edgeSynonym(self):
            return self.getTypedRuleContext(GQLParser.EdgeSynonymContext, 0)

        def edgeTypePhraseFiller(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypePhraseFillerContext, 0)

        def endpointPairPhrase(self):
            return self.getTypedRuleContext(GQLParser.EndpointPairPhraseContext, 0)

        def TYPE(self):
            return self.getToken(GQLParser.TYPE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgeTypePhrase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeTypePhrase"):
                listener.enterEdgeTypePhrase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeTypePhrase"):
                listener.exitEdgeTypePhrase(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeTypePhrase"):
                return visitor.visitEdgeTypePhrase(self)
            else:
                return visitor.visitChildren(self)

    def edgeTypePhrase(self):
        localctx = GQLParser.EdgeTypePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_edgeTypePhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2885
            self.edgeKind()
            self.state = 2886
            self.edgeSynonym()
            self.state = 2888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 268, self._ctx)
            if la_ == 1:
                self.state = 2887
                self.match(GQLParser.TYPE)

            self.state = 2890
            self.edgeTypePhraseFiller()
            self.state = 2891
            self.endpointPairPhrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeTypePhraseFillerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeTypeName(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypeNameContext, 0)

        def edgeTypeFiller(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypeFillerContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgeTypePhraseFiller

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeTypePhraseFiller"):
                listener.enterEdgeTypePhraseFiller(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeTypePhraseFiller"):
                listener.exitEdgeTypePhraseFiller(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeTypePhraseFiller"):
                return visitor.visitEdgeTypePhraseFiller(self)
            else:
                return visitor.visitChildren(self)

    def edgeTypePhraseFiller(self):
        localctx = GQLParser.EdgeTypePhraseFillerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_edgeTypePhraseFiller)
        self._la = 0  # Token type
        try:
            self.state = 2898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 270, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2893
                self.edgeTypeName()
                self.state = 2895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    _la == 1
                    or _la == 127
                    or _la == 292
                    or _la == 294
                    or _la == 359
                    or _la == 368
                ):
                    self.state = 2894
                    self.edgeTypeFiller()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2897
                self.edgeTypeFiller()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeTypeFillerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeTypeKeyLabelSet(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypeKeyLabelSetContext, 0)

        def edgeTypeImpliedContent(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypeImpliedContentContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgeTypeFiller

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeTypeFiller"):
                listener.enterEdgeTypeFiller(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeTypeFiller"):
                listener.exitEdgeTypeFiller(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeTypeFiller"):
                return visitor.visitEdgeTypeFiller(self)
            else:
                return visitor.visitChildren(self)

    def edgeTypeFiller(self):
        localctx = GQLParser.EdgeTypeFillerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_edgeTypeFiller)
        self._la = 0  # Token type
        try:
            self.state = 2905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 272, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2900
                self.edgeTypeKeyLabelSet()
                self.state = 2902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 127 or _la == 292 or _la == 294 or _la == 359 or _la == 368:
                    self.state = 2901
                    self.edgeTypeImpliedContent()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2904
                self.edgeTypeImpliedContent()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeTypeImpliedContentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeTypeLabelSet(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypeLabelSetContext, 0)

        def edgeTypePropertyTypes(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypePropertyTypesContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgeTypeImpliedContent

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeTypeImpliedContent"):
                listener.enterEdgeTypeImpliedContent(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeTypeImpliedContent"):
                listener.exitEdgeTypeImpliedContent(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeTypeImpliedContent"):
                return visitor.visitEdgeTypeImpliedContent(self)
            else:
                return visitor.visitChildren(self)

    def edgeTypeImpliedContent(self):
        localctx = GQLParser.EdgeTypeImpliedContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_edgeTypeImpliedContent)
        try:
            self.state = 2912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 273, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2907
                self.edgeTypeLabelSet()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2908
                self.edgeTypePropertyTypes()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2909
                self.edgeTypeLabelSet()
                self.state = 2910
                self.edgeTypePropertyTypes()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeTypeKeyLabelSetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLIES(self):
            return self.getToken(GQLParser.IMPLIES, 0)

        def labelSetPhrase(self):
            return self.getTypedRuleContext(GQLParser.LabelSetPhraseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgeTypeKeyLabelSet

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeTypeKeyLabelSet"):
                listener.enterEdgeTypeKeyLabelSet(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeTypeKeyLabelSet"):
                listener.exitEdgeTypeKeyLabelSet(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeTypeKeyLabelSet"):
                return visitor.visitEdgeTypeKeyLabelSet(self)
            else:
                return visitor.visitChildren(self)

    def edgeTypeKeyLabelSet(self):
        localctx = GQLParser.EdgeTypeKeyLabelSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_edgeTypeKeyLabelSet)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 127 or _la == 292 or _la == 294 or _la == 359:
                self.state = 2914
                self.labelSetPhrase()

            self.state = 2917
            self.match(GQLParser.IMPLIES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeTypeLabelSetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelSetPhrase(self):
            return self.getTypedRuleContext(GQLParser.LabelSetPhraseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgeTypeLabelSet

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeTypeLabelSet"):
                listener.enterEdgeTypeLabelSet(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeTypeLabelSet"):
                listener.exitEdgeTypeLabelSet(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeTypeLabelSet"):
                return visitor.visitEdgeTypeLabelSet(self)
            else:
                return visitor.visitChildren(self)

    def edgeTypeLabelSet(self):
        localctx = GQLParser.EdgeTypeLabelSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_edgeTypeLabelSet)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2919
            self.labelSetPhrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeTypePropertyTypesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyTypesSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.PropertyTypesSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_edgeTypePropertyTypes

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeTypePropertyTypes"):
                listener.enterEdgeTypePropertyTypes(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeTypePropertyTypes"):
                listener.exitEdgeTypePropertyTypes(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeTypePropertyTypes"):
                return visitor.visitEdgeTypePropertyTypes(self)
            else:
                return visitor.visitChildren(self)

    def edgeTypePropertyTypes(self):
        localctx = GQLParser.EdgeTypePropertyTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_edgeTypePropertyTypes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2921
            self.propertyTypesSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeTypePatternDirectedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeTypePatternPointingRight(self):
            return self.getTypedRuleContext(
                GQLParser.EdgeTypePatternPointingRightContext, 0
            )

        def edgeTypePatternPointingLeft(self):
            return self.getTypedRuleContext(
                GQLParser.EdgeTypePatternPointingLeftContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_edgeTypePatternDirected

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeTypePatternDirected"):
                listener.enterEdgeTypePatternDirected(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeTypePatternDirected"):
                listener.exitEdgeTypePatternDirected(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeTypePatternDirected"):
                return visitor.visitEdgeTypePatternDirected(self)
            else:
                return visitor.visitChildren(self)

    def edgeTypePatternDirected(self):
        localctx = GQLParser.EdgeTypePatternDirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_edgeTypePatternDirected)
        try:
            self.state = 2925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 275, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2923
                self.edgeTypePatternPointingRight()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2924
                self.edgeTypePatternPointingLeft()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeTypePatternPointingRightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceNodeTypeReference(self):
            return self.getTypedRuleContext(GQLParser.SourceNodeTypeReferenceContext, 0)

        def arcTypePointingRight(self):
            return self.getTypedRuleContext(GQLParser.ArcTypePointingRightContext, 0)

        def destinationNodeTypeReference(self):
            return self.getTypedRuleContext(
                GQLParser.DestinationNodeTypeReferenceContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_edgeTypePatternPointingRight

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeTypePatternPointingRight"):
                listener.enterEdgeTypePatternPointingRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeTypePatternPointingRight"):
                listener.exitEdgeTypePatternPointingRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeTypePatternPointingRight"):
                return visitor.visitEdgeTypePatternPointingRight(self)
            else:
                return visitor.visitChildren(self)

    def edgeTypePatternPointingRight(self):
        localctx = GQLParser.EdgeTypePatternPointingRightContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 622, self.RULE_edgeTypePatternPointingRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2927
            self.sourceNodeTypeReference()
            self.state = 2928
            self.arcTypePointingRight()
            self.state = 2929
            self.destinationNodeTypeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeTypePatternPointingLeftContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def destinationNodeTypeReference(self):
            return self.getTypedRuleContext(
                GQLParser.DestinationNodeTypeReferenceContext, 0
            )

        def arcTypePointingLeft(self):
            return self.getTypedRuleContext(GQLParser.ArcTypePointingLeftContext, 0)

        def sourceNodeTypeReference(self):
            return self.getTypedRuleContext(GQLParser.SourceNodeTypeReferenceContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgeTypePatternPointingLeft

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeTypePatternPointingLeft"):
                listener.enterEdgeTypePatternPointingLeft(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeTypePatternPointingLeft"):
                listener.exitEdgeTypePatternPointingLeft(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeTypePatternPointingLeft"):
                return visitor.visitEdgeTypePatternPointingLeft(self)
            else:
                return visitor.visitChildren(self)

    def edgeTypePatternPointingLeft(self):
        localctx = GQLParser.EdgeTypePatternPointingLeftContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 624, self.RULE_edgeTypePatternPointingLeft)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2931
            self.destinationNodeTypeReference()
            self.state = 2932
            self.arcTypePointingLeft()
            self.state = 2933
            self.sourceNodeTypeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeTypePatternUndirectedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceNodeTypeReference(self):
            return self.getTypedRuleContext(GQLParser.SourceNodeTypeReferenceContext, 0)

        def arcTypeUndirected(self):
            return self.getTypedRuleContext(GQLParser.ArcTypeUndirectedContext, 0)

        def destinationNodeTypeReference(self):
            return self.getTypedRuleContext(
                GQLParser.DestinationNodeTypeReferenceContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_edgeTypePatternUndirected

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeTypePatternUndirected"):
                listener.enterEdgeTypePatternUndirected(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeTypePatternUndirected"):
                listener.exitEdgeTypePatternUndirected(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeTypePatternUndirected"):
                return visitor.visitEdgeTypePatternUndirected(self)
            else:
                return visitor.visitChildren(self)

    def edgeTypePatternUndirected(self):
        localctx = GQLParser.EdgeTypePatternUndirectedContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 626, self.RULE_edgeTypePatternUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2935
            self.sourceNodeTypeReference()
            self.state = 2936
            self.arcTypeUndirected()
            self.state = 2937
            self.destinationNodeTypeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArcTypePointingRightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_LEFT_BRACKET(self):
            return self.getToken(GQLParser.MINUS_LEFT_BRACKET, 0)

        def edgeTypeFiller(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypeFillerContext, 0)

        def BRACKET_RIGHT_ARROW(self):
            return self.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_arcTypePointingRight

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArcTypePointingRight"):
                listener.enterArcTypePointingRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArcTypePointingRight"):
                listener.exitArcTypePointingRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArcTypePointingRight"):
                return visitor.visitArcTypePointingRight(self)
            else:
                return visitor.visitChildren(self)

    def arcTypePointingRight(self):
        localctx = GQLParser.ArcTypePointingRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_arcTypePointingRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2939
            self.match(GQLParser.MINUS_LEFT_BRACKET)
            self.state = 2940
            self.edgeTypeFiller()
            self.state = 2941
            self.match(GQLParser.BRACKET_RIGHT_ARROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArcTypePointingLeftContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_ARROW_BRACKET(self):
            return self.getToken(GQLParser.LEFT_ARROW_BRACKET, 0)

        def edgeTypeFiller(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypeFillerContext, 0)

        def RIGHT_BRACKET_MINUS(self):
            return self.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_arcTypePointingLeft

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArcTypePointingLeft"):
                listener.enterArcTypePointingLeft(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArcTypePointingLeft"):
                listener.exitArcTypePointingLeft(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArcTypePointingLeft"):
                return visitor.visitArcTypePointingLeft(self)
            else:
                return visitor.visitChildren(self)

    def arcTypePointingLeft(self):
        localctx = GQLParser.ArcTypePointingLeftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_arcTypePointingLeft)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2943
            self.match(GQLParser.LEFT_ARROW_BRACKET)
            self.state = 2944
            self.edgeTypeFiller()
            self.state = 2945
            self.match(GQLParser.RIGHT_BRACKET_MINUS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArcTypeUndirectedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE_LEFT_BRACKET(self):
            return self.getToken(GQLParser.TILDE_LEFT_BRACKET, 0)

        def edgeTypeFiller(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypeFillerContext, 0)

        def RIGHT_BRACKET_TILDE(self):
            return self.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_arcTypeUndirected

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArcTypeUndirected"):
                listener.enterArcTypeUndirected(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArcTypeUndirected"):
                listener.exitArcTypeUndirected(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArcTypeUndirected"):
                return visitor.visitArcTypeUndirected(self)
            else:
                return visitor.visitChildren(self)

    def arcTypeUndirected(self):
        localctx = GQLParser.ArcTypeUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_arcTypeUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2947
            self.match(GQLParser.TILDE_LEFT_BRACKET)
            self.state = 2948
            self.edgeTypeFiller()
            self.state = 2949
            self.match(GQLParser.RIGHT_BRACKET_TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SourceNodeTypeReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def sourceNodeTypeAlias(self):
            return self.getTypedRuleContext(GQLParser.SourceNodeTypeAliasContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def nodeTypeFiller(self):
            return self.getTypedRuleContext(GQLParser.NodeTypeFillerContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_sourceNodeTypeReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSourceNodeTypeReference"):
                listener.enterSourceNodeTypeReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSourceNodeTypeReference"):
                listener.exitSourceNodeTypeReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSourceNodeTypeReference"):
                return visitor.visitSourceNodeTypeReference(self)
            else:
                return visitor.visitChildren(self)

    def sourceNodeTypeReference(self):
        localctx = GQLParser.SourceNodeTypeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_sourceNodeTypeReference)
        self._la = 0  # Token type
        try:
            self.state = 2960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 277, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2951
                self.match(GQLParser.LEFT_PAREN)
                self.state = 2952
                self.sourceNodeTypeAlias()
                self.state = 2953
                self.match(GQLParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2955
                self.match(GQLParser.LEFT_PAREN)
                self.state = 2957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    _la == 1
                    or _la == 127
                    or _la == 292
                    or _la == 294
                    or _la == 359
                    or _la == 368
                ):
                    self.state = 2956
                    self.nodeTypeFiller()

                self.state = 2959
                self.match(GQLParser.RIGHT_PAREN)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DestinationNodeTypeReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def destinationNodeTypeAlias(self):
            return self.getTypedRuleContext(
                GQLParser.DestinationNodeTypeAliasContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def nodeTypeFiller(self):
            return self.getTypedRuleContext(GQLParser.NodeTypeFillerContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_destinationNodeTypeReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDestinationNodeTypeReference"):
                listener.enterDestinationNodeTypeReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDestinationNodeTypeReference"):
                listener.exitDestinationNodeTypeReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDestinationNodeTypeReference"):
                return visitor.visitDestinationNodeTypeReference(self)
            else:
                return visitor.visitChildren(self)

    def destinationNodeTypeReference(self):
        localctx = GQLParser.DestinationNodeTypeReferenceContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 636, self.RULE_destinationNodeTypeReference)
        self._la = 0  # Token type
        try:
            self.state = 2971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 279, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2962
                self.match(GQLParser.LEFT_PAREN)
                self.state = 2963
                self.destinationNodeTypeAlias()
                self.state = 2964
                self.match(GQLParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2966
                self.match(GQLParser.LEFT_PAREN)
                self.state = 2968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    _la == 1
                    or _la == 127
                    or _la == 292
                    or _la == 294
                    or _la == 359
                    or _la == 368
                ):
                    self.state = 2967
                    self.nodeTypeFiller()

                self.state = 2970
                self.match(GQLParser.RIGHT_PAREN)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeKindContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIRECTED(self):
            return self.getToken(GQLParser.DIRECTED, 0)

        def UNDIRECTED(self):
            return self.getToken(GQLParser.UNDIRECTED, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgeKind

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeKind"):
                listener.enterEdgeKind(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeKind"):
                listener.exitEdgeKind(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeKind"):
                return visitor.visitEdgeKind(self)
            else:
                return visitor.visitChildren(self)

    def edgeKind(self):
        localctx = GQLParser.EdgeKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_edgeKind)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2973
            _la = self._input.LA(1)
            if not (_la == 283 or _la == 318):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndpointPairPhraseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECTING(self):
            return self.getToken(GQLParser.CONNECTING, 0)

        def endpointPair(self):
            return self.getTypedRuleContext(GQLParser.EndpointPairContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_endpointPairPhrase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEndpointPairPhrase"):
                listener.enterEndpointPairPhrase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEndpointPairPhrase"):
                listener.exitEndpointPairPhrase(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEndpointPairPhrase"):
                return visitor.visitEndpointPairPhrase(self)
            else:
                return visitor.visitChildren(self)

    def endpointPairPhrase(self):
        localctx = GQLParser.EndpointPairPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_endpointPairPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2975
            self.match(GQLParser.CONNECTING)
            self.state = 2976
            self.endpointPair()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndpointPairContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endpointPairDirected(self):
            return self.getTypedRuleContext(GQLParser.EndpointPairDirectedContext, 0)

        def endpointPairUndirected(self):
            return self.getTypedRuleContext(GQLParser.EndpointPairUndirectedContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_endpointPair

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEndpointPair"):
                listener.enterEndpointPair(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEndpointPair"):
                listener.exitEndpointPair(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEndpointPair"):
                return visitor.visitEndpointPair(self)
            else:
                return visitor.visitChildren(self)

    def endpointPair(self):
        localctx = GQLParser.EndpointPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_endpointPair)
        try:
            self.state = 2980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 280, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2978
                self.endpointPairDirected()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2979
                self.endpointPairUndirected()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndpointPairDirectedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endpointPairPointingRight(self):
            return self.getTypedRuleContext(
                GQLParser.EndpointPairPointingRightContext, 0
            )

        def endpointPairPointingLeft(self):
            return self.getTypedRuleContext(
                GQLParser.EndpointPairPointingLeftContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_endpointPairDirected

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEndpointPairDirected"):
                listener.enterEndpointPairDirected(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEndpointPairDirected"):
                listener.exitEndpointPairDirected(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEndpointPairDirected"):
                return visitor.visitEndpointPairDirected(self)
            else:
                return visitor.visitChildren(self)

    def endpointPairDirected(self):
        localctx = GQLParser.EndpointPairDirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_endpointPairDirected)
        try:
            self.state = 2984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 281, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2982
                self.endpointPairPointingRight()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2983
                self.endpointPairPointingLeft()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndpointPairPointingRightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def sourceNodeTypeAlias(self):
            return self.getTypedRuleContext(GQLParser.SourceNodeTypeAliasContext, 0)

        def connectorPointingRight(self):
            return self.getTypedRuleContext(GQLParser.ConnectorPointingRightContext, 0)

        def destinationNodeTypeAlias(self):
            return self.getTypedRuleContext(
                GQLParser.DestinationNodeTypeAliasContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_endpointPairPointingRight

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEndpointPairPointingRight"):
                listener.enterEndpointPairPointingRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEndpointPairPointingRight"):
                listener.exitEndpointPairPointingRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEndpointPairPointingRight"):
                return visitor.visitEndpointPairPointingRight(self)
            else:
                return visitor.visitChildren(self)

    def endpointPairPointingRight(self):
        localctx = GQLParser.EndpointPairPointingRightContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 646, self.RULE_endpointPairPointingRight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2986
            self.match(GQLParser.LEFT_PAREN)
            self.state = 2987
            self.sourceNodeTypeAlias()
            self.state = 2988
            self.connectorPointingRight()
            self.state = 2989
            self.destinationNodeTypeAlias()
            self.state = 2990
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndpointPairPointingLeftContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def destinationNodeTypeAlias(self):
            return self.getTypedRuleContext(
                GQLParser.DestinationNodeTypeAliasContext, 0
            )

        def LEFT_ARROW(self):
            return self.getToken(GQLParser.LEFT_ARROW, 0)

        def sourceNodeTypeAlias(self):
            return self.getTypedRuleContext(GQLParser.SourceNodeTypeAliasContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_endpointPairPointingLeft

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEndpointPairPointingLeft"):
                listener.enterEndpointPairPointingLeft(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEndpointPairPointingLeft"):
                listener.exitEndpointPairPointingLeft(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEndpointPairPointingLeft"):
                return visitor.visitEndpointPairPointingLeft(self)
            else:
                return visitor.visitChildren(self)

    def endpointPairPointingLeft(self):
        localctx = GQLParser.EndpointPairPointingLeftContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 648, self.RULE_endpointPairPointingLeft)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2992
            self.match(GQLParser.LEFT_PAREN)
            self.state = 2993
            self.destinationNodeTypeAlias()
            self.state = 2994
            self.match(GQLParser.LEFT_ARROW)
            self.state = 2995
            self.sourceNodeTypeAlias()
            self.state = 2996
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndpointPairUndirectedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def sourceNodeTypeAlias(self):
            return self.getTypedRuleContext(GQLParser.SourceNodeTypeAliasContext, 0)

        def connectorUndirected(self):
            return self.getTypedRuleContext(GQLParser.ConnectorUndirectedContext, 0)

        def destinationNodeTypeAlias(self):
            return self.getTypedRuleContext(
                GQLParser.DestinationNodeTypeAliasContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_endpointPairUndirected

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEndpointPairUndirected"):
                listener.enterEndpointPairUndirected(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEndpointPairUndirected"):
                listener.exitEndpointPairUndirected(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEndpointPairUndirected"):
                return visitor.visitEndpointPairUndirected(self)
            else:
                return visitor.visitChildren(self)

    def endpointPairUndirected(self):
        localctx = GQLParser.EndpointPairUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_endpointPairUndirected)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2998
            self.match(GQLParser.LEFT_PAREN)
            self.state = 2999
            self.sourceNodeTypeAlias()
            self.state = 3000
            self.connectorUndirected()
            self.state = 3001
            self.destinationNodeTypeAlias()
            self.state = 3002
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConnectorPointingRightContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(GQLParser.TO, 0)

        def RIGHT_ARROW(self):
            return self.getToken(GQLParser.RIGHT_ARROW, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_connectorPointingRight

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnectorPointingRight"):
                listener.enterConnectorPointingRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnectorPointingRight"):
                listener.exitConnectorPointingRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConnectorPointingRight"):
                return visitor.visitConnectorPointingRight(self)
            else:
                return visitor.visitChildren(self)

    def connectorPointingRight(self):
        localctx = GQLParser.ConnectorPointingRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_connectorPointingRight)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3004
            _la = self._input.LA(1)
            if not (_la == 314 or _la == 346):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConnectorUndirectedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(GQLParser.TO, 0)

        def TILDE(self):
            return self.getToken(GQLParser.TILDE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_connectorUndirected

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConnectorUndirected"):
                listener.enterConnectorUndirected(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConnectorUndirected"):
                listener.exitConnectorUndirected(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConnectorUndirected"):
                return visitor.visitConnectorUndirected(self)
            else:
                return visitor.visitChildren(self)

    def connectorUndirected(self):
        localctx = GQLParser.ConnectorUndirectedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_connectorUndirected)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3006
            _la = self._input.LA(1)
            if not (_la == 314 or _la == 383):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SourceNodeTypeAliasContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regularIdentifier(self):
            return self.getTypedRuleContext(GQLParser.RegularIdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_sourceNodeTypeAlias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSourceNodeTypeAlias"):
                listener.enterSourceNodeTypeAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSourceNodeTypeAlias"):
                listener.exitSourceNodeTypeAlias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSourceNodeTypeAlias"):
                return visitor.visitSourceNodeTypeAlias(self)
            else:
                return visitor.visitChildren(self)

    def sourceNodeTypeAlias(self):
        localctx = GQLParser.SourceNodeTypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_sourceNodeTypeAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3008
            self.regularIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DestinationNodeTypeAliasContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regularIdentifier(self):
            return self.getTypedRuleContext(GQLParser.RegularIdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_destinationNodeTypeAlias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDestinationNodeTypeAlias"):
                listener.enterDestinationNodeTypeAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDestinationNodeTypeAlias"):
                listener.exitDestinationNodeTypeAlias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDestinationNodeTypeAlias"):
                return visitor.visitDestinationNodeTypeAlias(self)
            else:
                return visitor.visitChildren(self)

    def destinationNodeTypeAlias(self):
        localctx = GQLParser.DestinationNodeTypeAliasContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 658, self.RULE_destinationNodeTypeAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3010
            self.regularIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelSetPhraseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(GQLParser.LABEL, 0)

        def labelName(self):
            return self.getTypedRuleContext(GQLParser.LabelNameContext, 0)

        def LABELS(self):
            return self.getToken(GQLParser.LABELS, 0)

        def labelSetSpecification(self):
            return self.getTypedRuleContext(GQLParser.LabelSetSpecificationContext, 0)

        def isOrColon(self):
            return self.getTypedRuleContext(GQLParser.IsOrColonContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_labelSetPhrase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabelSetPhrase"):
                listener.enterLabelSetPhrase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabelSetPhrase"):
                listener.exitLabelSetPhrase(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabelSetPhrase"):
                return visitor.visitLabelSetPhrase(self)
            else:
                return visitor.visitChildren(self)

    def labelSetPhrase(self):
        localctx = GQLParser.LabelSetPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_labelSetPhrase)
        try:
            self.state = 3019
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [292]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3012
                self.match(GQLParser.LABEL)
                self.state = 3013
                self.labelName()
                pass
            elif token in [294]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3014
                self.match(GQLParser.LABELS)
                self.state = 3015
                self.labelSetSpecification()
                pass
            elif token in [127, 359]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3016
                self.isOrColon()
                self.state = 3017
                self.labelSetSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelSetSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.LabelNameContext)
            else:
                return self.getTypedRuleContext(GQLParser.LabelNameContext, i)

        def AMPERSAND(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.AMPERSAND)
            else:
                return self.getToken(GQLParser.AMPERSAND, i)

        def getRuleIndex(self):
            return GQLParser.RULE_labelSetSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabelSetSpecification"):
                listener.enterLabelSetSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabelSetSpecification"):
                listener.exitLabelSetSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabelSetSpecification"):
                return visitor.visitLabelSetSpecification(self)
            else:
                return visitor.visitChildren(self)

    def labelSetSpecification(self):
        localctx = GQLParser.LabelSetSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_labelSetSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3021
            self.labelName()
            self.state = 3026
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 283, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3022
                    self.match(GQLParser.AMPERSAND)
                    self.state = 3023
                    self.labelName()
                self.state = 3028
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 283, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyTypesSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GQLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GQLParser.RIGHT_BRACE, 0)

        def propertyTypeList(self):
            return self.getTypedRuleContext(GQLParser.PropertyTypeListContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_propertyTypesSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertyTypesSpecification"):
                listener.enterPropertyTypesSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertyTypesSpecification"):
                listener.exitPropertyTypesSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertyTypesSpecification"):
                return visitor.visitPropertyTypesSpecification(self)
            else:
                return visitor.visitChildren(self)

    def propertyTypesSpecification(self):
        localctx = GQLParser.PropertyTypesSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 664, self.RULE_propertyTypesSpecification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3029
            self.match(GQLParser.LEFT_BRACE)
            self.state = 3031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == 4
                or _la == 5
                or (
                    ((_la - 277) & ~0x3F) == 0
                    and ((1 << (_la - 277)) & 281474976710655) != 0
                )
            ):
                self.state = 3030
                self.propertyTypeList()

            self.state = 3033
            self.match(GQLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyTypeListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyType(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.PropertyTypeContext)
            else:
                return self.getTypedRuleContext(GQLParser.PropertyTypeContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_propertyTypeList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertyTypeList"):
                listener.enterPropertyTypeList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertyTypeList"):
                listener.exitPropertyTypeList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertyTypeList"):
                return visitor.visitPropertyTypeList(self)
            else:
                return visitor.visitChildren(self)

    def propertyTypeList(self):
        localctx = GQLParser.PropertyTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_propertyTypeList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3035
            self.propertyType()
            self.state = 3040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 3036
                self.match(GQLParser.COMMA)
                self.state = 3037
                self.propertyType()
                self.state = 3042
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyName(self):
            return self.getTypedRuleContext(GQLParser.PropertyNameContext, 0)

        def propertyValueType(self):
            return self.getTypedRuleContext(GQLParser.PropertyValueTypeContext, 0)

        def typed(self):
            return self.getTypedRuleContext(GQLParser.TypedContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_propertyType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertyType"):
                listener.enterPropertyType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertyType"):
                listener.exitPropertyType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertyType"):
                return visitor.visitPropertyType(self)
            else:
                return visitor.visitChildren(self)

    def propertyType(self):
        localctx = GQLParser.PropertyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_propertyType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3043
            self.propertyName()
            self.state = 3045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 211 or _la == 331:
                self.state = 3044
                self.typed()

            self.state = 3047
            self.propertyValueType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueType(self):
            return self.getTypedRuleContext(GQLParser.ValueTypeContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_propertyValueType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertyValueType"):
                listener.enterPropertyValueType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertyValueType"):
                listener.exitPropertyValueType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertyValueType"):
                return visitor.visitPropertyValueType(self)
            else:
                return visitor.visitChildren(self)

    def propertyValueType(self):
        localctx = GQLParser.PropertyValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_propertyValueType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3049
            self.valueType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindingTableTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(GQLParser.TABLE, 0)

        def fieldTypesSpecification(self):
            return self.getTypedRuleContext(GQLParser.FieldTypesSpecificationContext, 0)

        def BINDING(self):
            return self.getToken(GQLParser.BINDING, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_bindingTableType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBindingTableType"):
                listener.enterBindingTableType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBindingTableType"):
                listener.exitBindingTableType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBindingTableType"):
                return visitor.visitBindingTableType(self)
            else:
                return visitor.visitChildren(self)

    def bindingTableType(self):
        localctx = GQLParser.BindingTableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_bindingTableType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 278:
                self.state = 3051
                self.match(GQLParser.BINDING)

            self.state = 3054
            self.match(GQLParser.TABLE)
            self.state = 3055
            self.fieldTypesSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return GQLParser.RULE_valueType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class DynamicPropertyValueTypeLabelContext(ValueTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def VALUE(self):
            return self.getToken(GQLParser.VALUE, 0)

        def ANY(self):
            return self.getToken(GQLParser.ANY, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDynamicPropertyValueTypeLabel"):
                listener.enterDynamicPropertyValueTypeLabel(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDynamicPropertyValueTypeLabel"):
                listener.exitDynamicPropertyValueTypeLabel(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDynamicPropertyValueTypeLabel"):
                return visitor.visitDynamicPropertyValueTypeLabel(self)
            else:
                return visitor.visitChildren(self)

    class ClosedDynamicUnionTypeAtl1Context(ValueTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(GQLParser.ANY, 0)

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0)

        def valueType(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.ValueTypeContext)
            else:
                return self.getTypedRuleContext(GQLParser.ValueTypeContext, i)

        def RIGHT_ANGLE_BRACKET(self):
            return self.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0)

        def VALUE(self):
            return self.getToken(GQLParser.VALUE, 0)

        def VERTICAL_BAR(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.VERTICAL_BAR)
            else:
                return self.getToken(GQLParser.VERTICAL_BAR, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClosedDynamicUnionTypeAtl1"):
                listener.enterClosedDynamicUnionTypeAtl1(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClosedDynamicUnionTypeAtl1"):
                listener.exitClosedDynamicUnionTypeAtl1(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClosedDynamicUnionTypeAtl1"):
                return visitor.visitClosedDynamicUnionTypeAtl1(self)
            else:
                return visitor.visitChildren(self)

    class ClosedDynamicUnionTypeAtl2Context(ValueTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueType(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.ValueTypeContext)
            else:
                return self.getTypedRuleContext(GQLParser.ValueTypeContext, i)

        def VERTICAL_BAR(self):
            return self.getToken(GQLParser.VERTICAL_BAR, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClosedDynamicUnionTypeAtl2"):
                listener.enterClosedDynamicUnionTypeAtl2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClosedDynamicUnionTypeAtl2"):
                listener.exitClosedDynamicUnionTypeAtl2(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClosedDynamicUnionTypeAtl2"):
                return visitor.visitClosedDynamicUnionTypeAtl2(self)
            else:
                return visitor.visitChildren(self)

    class PathValueTypeLabelContext(ValueTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pathValueType(self):
            return self.getTypedRuleContext(GQLParser.PathValueTypeContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathValueTypeLabel"):
                listener.enterPathValueTypeLabel(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathValueTypeLabel"):
                listener.exitPathValueTypeLabel(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathValueTypeLabel"):
                return visitor.visitPathValueTypeLabel(self)
            else:
                return visitor.visitChildren(self)

    class ListValueTypeAlt3Context(ValueTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def listValueTypeName(self):
            return self.getTypedRuleContext(GQLParser.ListValueTypeNameContext, 0)

        def LEFT_BRACKET(self):
            return self.getToken(GQLParser.LEFT_BRACKET, 0)

        def maxLength(self):
            return self.getTypedRuleContext(GQLParser.MaxLengthContext, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(GQLParser.RIGHT_BRACKET, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListValueTypeAlt3"):
                listener.enterListValueTypeAlt3(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListValueTypeAlt3"):
                listener.exitListValueTypeAlt3(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListValueTypeAlt3"):
                return visitor.visitListValueTypeAlt3(self)
            else:
                return visitor.visitChildren(self)

    class ListValueTypeAlt2Context(ValueTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueType(self):
            return self.getTypedRuleContext(GQLParser.ValueTypeContext, 0)

        def listValueTypeName(self):
            return self.getTypedRuleContext(GQLParser.ListValueTypeNameContext, 0)

        def LEFT_BRACKET(self):
            return self.getToken(GQLParser.LEFT_BRACKET, 0)

        def maxLength(self):
            return self.getTypedRuleContext(GQLParser.MaxLengthContext, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(GQLParser.RIGHT_BRACKET, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListValueTypeAlt2"):
                listener.enterListValueTypeAlt2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListValueTypeAlt2"):
                listener.exitListValueTypeAlt2(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListValueTypeAlt2"):
                return visitor.visitListValueTypeAlt2(self)
            else:
                return visitor.visitChildren(self)

    class ListValueTypeAlt1Context(ValueTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def listValueTypeName(self):
            return self.getTypedRuleContext(GQLParser.ListValueTypeNameContext, 0)

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0)

        def valueType(self):
            return self.getTypedRuleContext(GQLParser.ValueTypeContext, 0)

        def RIGHT_ANGLE_BRACKET(self):
            return self.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0)

        def LEFT_BRACKET(self):
            return self.getToken(GQLParser.LEFT_BRACKET, 0)

        def maxLength(self):
            return self.getTypedRuleContext(GQLParser.MaxLengthContext, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(GQLParser.RIGHT_BRACKET, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListValueTypeAlt1"):
                listener.enterListValueTypeAlt1(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListValueTypeAlt1"):
                listener.exitListValueTypeAlt1(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListValueTypeAlt1"):
                return visitor.visitListValueTypeAlt1(self)
            else:
                return visitor.visitChildren(self)

    class PredefinedTypeLabelContext(ValueTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predefinedType(self):
            return self.getTypedRuleContext(GQLParser.PredefinedTypeContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPredefinedTypeLabel"):
                listener.enterPredefinedTypeLabel(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPredefinedTypeLabel"):
                listener.exitPredefinedTypeLabel(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPredefinedTypeLabel"):
                return visitor.visitPredefinedTypeLabel(self)
            else:
                return visitor.visitChildren(self)

    class RecordTypeLabelContext(ValueTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def recordType(self):
            return self.getTypedRuleContext(GQLParser.RecordTypeContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRecordTypeLabel"):
                listener.enterRecordTypeLabel(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRecordTypeLabel"):
                listener.exitRecordTypeLabel(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRecordTypeLabel"):
                return visitor.visitRecordTypeLabel(self)
            else:
                return visitor.visitChildren(self)

    class OpenDynamicUnionTypeLabelContext(ValueTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(GQLParser.ANY, 0)

        def VALUE(self):
            return self.getToken(GQLParser.VALUE, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOpenDynamicUnionTypeLabel"):
                listener.enterOpenDynamicUnionTypeLabel(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOpenDynamicUnionTypeLabel"):
                listener.exitOpenDynamicUnionTypeLabel(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOpenDynamicUnionTypeLabel"):
                return visitor.visitOpenDynamicUnionTypeLabel(self)
            else:
                return visitor.visitChildren(self)

    def valueType(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GQLParser.ValueTypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 674
        self.enterRecursionRule(localctx, 674, self.RULE_valueType, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 298, self._ctx)
            if la_ == 1:
                localctx = GQLParser.PredefinedTypeLabelContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3058
                self.predefinedType()
                pass

            elif la_ == 2:
                localctx = GQLParser.PathValueTypeLabelContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3059
                self.pathValueType()
                pass

            elif la_ == 3:
                localctx = GQLParser.ListValueTypeAlt1Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3060
                self.listValueTypeName()
                self.state = 3061
                self.match(GQLParser.LEFT_ANGLE_BRACKET)
                self.state = 3062
                self.valueType(0)
                self.state = 3063
                self.match(GQLParser.RIGHT_ANGLE_BRACKET)
                self.state = 3068
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 288, self._ctx)
                if la_ == 1:
                    self.state = 3064
                    self.match(GQLParser.LEFT_BRACKET)
                    self.state = 3065
                    self.maxLength()
                    self.state = 3066
                    self.match(GQLParser.RIGHT_BRACKET)

                self.state = 3071
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 289, self._ctx)
                if la_ == 1:
                    self.state = 3070
                    self.notNull()

                pass

            elif la_ == 4:
                localctx = GQLParser.ListValueTypeAlt3Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3073
                self.listValueTypeName()
                self.state = 3078
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 290, self._ctx)
                if la_ == 1:
                    self.state = 3074
                    self.match(GQLParser.LEFT_BRACKET)
                    self.state = 3075
                    self.maxLength()
                    self.state = 3076
                    self.match(GQLParser.RIGHT_BRACKET)

                self.state = 3081
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 291, self._ctx)
                if la_ == 1:
                    self.state = 3080
                    self.notNull()

                pass

            elif la_ == 5:
                localctx = GQLParser.RecordTypeLabelContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3083
                self.recordType()
                pass

            elif la_ == 6:
                localctx = GQLParser.OpenDynamicUnionTypeLabelContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3084
                self.match(GQLParser.ANY)
                self.state = 3086
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 292, self._ctx)
                if la_ == 1:
                    self.state = 3085
                    self.match(GQLParser.VALUE)

                self.state = 3089
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 293, self._ctx)
                if la_ == 1:
                    self.state = 3088
                    self.notNull()

                pass

            elif la_ == 7:
                localctx = GQLParser.DynamicPropertyValueTypeLabelContext(
                    self, localctx
                )
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 25:
                    self.state = 3091
                    self.match(GQLParser.ANY)

                self.state = 3094
                self.match(GQLParser.PROPERTY)
                self.state = 3095
                self.match(GQLParser.VALUE)
                self.state = 3097
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 295, self._ctx)
                if la_ == 1:
                    self.state = 3096
                    self.notNull()

                pass

            elif la_ == 8:
                localctx = GQLParser.ClosedDynamicUnionTypeAtl1Context(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3099
                self.match(GQLParser.ANY)
                self.state = 3101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 225:
                    self.state = 3100
                    self.match(GQLParser.VALUE)

                self.state = 3103
                self.match(GQLParser.LEFT_ANGLE_BRACKET)
                self.state = 3104
                self.valueType(0)
                self.state = 3109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 385:
                    self.state = 3105
                    self.match(GQLParser.VERTICAL_BAR)
                    self.state = 3106
                    self.valueType(0)
                    self.state = 3111
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3112
                self.match(GQLParser.RIGHT_ANGLE_BRACKET)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 3132
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 302, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3130
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 301, self._ctx)
                    if la_ == 1:
                        localctx = GQLParser.ClosedDynamicUnionTypeAtl2Context(
                            self,
                            GQLParser.ValueTypeContext(self, _parentctx, _parentState),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueType
                        )
                        self.state = 3116
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 1)"
                            )
                        self.state = 3117
                        self.match(GQLParser.VERTICAL_BAR)
                        self.state = 3118
                        self.valueType(2)
                        pass

                    elif la_ == 2:
                        localctx = GQLParser.ListValueTypeAlt2Context(
                            self,
                            GQLParser.ValueTypeContext(self, _parentctx, _parentState),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueType
                        )
                        self.state = 3119
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 7)"
                            )
                        self.state = 3120
                        self.listValueTypeName()
                        self.state = 3125
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 299, self._ctx)
                        if la_ == 1:
                            self.state = 3121
                            self.match(GQLParser.LEFT_BRACKET)
                            self.state = 3122
                            self.maxLength()
                            self.state = 3123
                            self.match(GQLParser.RIGHT_BRACKET)

                        self.state = 3128
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 300, self._ctx)
                        if la_ == 1:
                            self.state = 3127
                            self.notNull()

                        pass

                self.state = 3134
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 302, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TypedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self):
            return self.getToken(GQLParser.DOUBLE_COLON, 0)

        def TYPED(self):
            return self.getToken(GQLParser.TYPED, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_typed

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTyped"):
                listener.enterTyped(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTyped"):
                listener.exitTyped(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTyped"):
                return visitor.visitTyped(self)
            else:
                return visitor.visitChildren(self)

    def typed(self):
        localctx = GQLParser.TypedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_typed)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3135
            _la = self._input.LA(1)
            if not (_la == 211 or _la == 331):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredefinedTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanType(self):
            return self.getTypedRuleContext(GQLParser.BooleanTypeContext, 0)

        def characterStringType(self):
            return self.getTypedRuleContext(GQLParser.CharacterStringTypeContext, 0)

        def byteStringType(self):
            return self.getTypedRuleContext(GQLParser.ByteStringTypeContext, 0)

        def numericType(self):
            return self.getTypedRuleContext(GQLParser.NumericTypeContext, 0)

        def temporalType(self):
            return self.getTypedRuleContext(GQLParser.TemporalTypeContext, 0)

        def referenceValueType(self):
            return self.getTypedRuleContext(GQLParser.ReferenceValueTypeContext, 0)

        def immaterialValueType(self):
            return self.getTypedRuleContext(GQLParser.ImmaterialValueTypeContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_predefinedType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPredefinedType"):
                listener.enterPredefinedType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPredefinedType"):
                listener.exitPredefinedType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPredefinedType"):
                return visitor.visitPredefinedType(self)
            else:
                return visitor.visitChildren(self)

    def predefinedType(self):
        localctx = GQLParser.PredefinedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_predefinedType)
        try:
            self.state = 3144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37, 38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3137
                self.booleanType()
                pass
            elif token in [50, 202, 227]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3138
                self.characterStringType()
                pass
            elif token in [36, 43, 226]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3139
                self.byteStringType()
                pass
            elif token in [
                34,
                35,
                73,
                74,
                81,
                93,
                94,
                95,
                96,
                97,
                98,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                175,
                191,
                196,
                197,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                221,
                224,
            ]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3140
                self.numericType()
                pass
            elif token in [70, 83, 135, 207, 208, 235]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3141
                self.temporalType()
                pass
            elif token in [25, 278, 283, 284, 289, 301, 305, 307, 313, 318, 319, 370]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3142
                self.referenceValueType()
                pass
            elif token in [153, 154]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3143
                self.immaterialValueType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(GQLParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(GQLParser.BOOLEAN, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_booleanType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBooleanType"):
                listener.enterBooleanType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBooleanType"):
                listener.exitBooleanType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBooleanType"):
                return visitor.visitBooleanType(self)
            else:
                return visitor.visitChildren(self)

    def booleanType(self):
        localctx = GQLParser.BooleanTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_booleanType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3146
            _la = self._input.LA(1)
            if not (_la == 37 or _la == 38):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 304, self._ctx)
            if la_ == 1:
                self.state = 3147
                self.notNull()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharacterStringTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(GQLParser.STRING, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def maxLength(self):
            return self.getTypedRuleContext(GQLParser.MaxLengthContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def minLength(self):
            return self.getTypedRuleContext(GQLParser.MinLengthContext, 0)

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def CHAR(self):
            return self.getToken(GQLParser.CHAR, 0)

        def fixedLength(self):
            return self.getTypedRuleContext(GQLParser.FixedLengthContext, 0)

        def VARCHAR(self):
            return self.getToken(GQLParser.VARCHAR, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_characterStringType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCharacterStringType"):
                listener.enterCharacterStringType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCharacterStringType"):
                listener.exitCharacterStringType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCharacterStringType"):
                return visitor.visitCharacterStringType(self)
            else:
                return visitor.visitChildren(self)

    def characterStringType(self):
        localctx = GQLParser.CharacterStringTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_characterStringType)
        try:
            self.state = 3185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [202]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3150
                self.match(GQLParser.STRING)
                self.state = 3160
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 306, self._ctx)
                if la_ == 1:
                    self.state = 3151
                    self.match(GQLParser.LEFT_PAREN)
                    self.state = 3155
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 305, self._ctx)
                    if la_ == 1:
                        self.state = 3152
                        self.minLength()
                        self.state = 3153
                        self.match(GQLParser.COMMA)

                    self.state = 3157
                    self.maxLength()
                    self.state = 3158
                    self.match(GQLParser.RIGHT_PAREN)

                self.state = 3163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 307, self._ctx)
                if la_ == 1:
                    self.state = 3162
                    self.notNull()

                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3165
                self.match(GQLParser.CHAR)
                self.state = 3170
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 308, self._ctx)
                if la_ == 1:
                    self.state = 3166
                    self.match(GQLParser.LEFT_PAREN)
                    self.state = 3167
                    self.fixedLength()
                    self.state = 3168
                    self.match(GQLParser.RIGHT_PAREN)

                self.state = 3173
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 309, self._ctx)
                if la_ == 1:
                    self.state = 3172
                    self.notNull()

                pass
            elif token in [227]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3175
                self.match(GQLParser.VARCHAR)
                self.state = 3180
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 310, self._ctx)
                if la_ == 1:
                    self.state = 3176
                    self.match(GQLParser.LEFT_PAREN)
                    self.state = 3177
                    self.maxLength()
                    self.state = 3178
                    self.match(GQLParser.RIGHT_PAREN)

                self.state = 3183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 311, self._ctx)
                if la_ == 1:
                    self.state = 3182
                    self.notNull()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ByteStringTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTES(self):
            return self.getToken(GQLParser.BYTES, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def maxLength(self):
            return self.getTypedRuleContext(GQLParser.MaxLengthContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def minLength(self):
            return self.getTypedRuleContext(GQLParser.MinLengthContext, 0)

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def BINARY(self):
            return self.getToken(GQLParser.BINARY, 0)

        def fixedLength(self):
            return self.getTypedRuleContext(GQLParser.FixedLengthContext, 0)

        def VARBINARY(self):
            return self.getToken(GQLParser.VARBINARY, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_byteStringType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterByteStringType"):
                listener.enterByteStringType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitByteStringType"):
                listener.exitByteStringType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitByteStringType"):
                return visitor.visitByteStringType(self)
            else:
                return visitor.visitChildren(self)

    def byteStringType(self):
        localctx = GQLParser.ByteStringTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_byteStringType)
        try:
            self.state = 3222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3187
                self.match(GQLParser.BYTES)
                self.state = 3197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 314, self._ctx)
                if la_ == 1:
                    self.state = 3188
                    self.match(GQLParser.LEFT_PAREN)
                    self.state = 3192
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 313, self._ctx)
                    if la_ == 1:
                        self.state = 3189
                        self.minLength()
                        self.state = 3190
                        self.match(GQLParser.COMMA)

                    self.state = 3194
                    self.maxLength()
                    self.state = 3195
                    self.match(GQLParser.RIGHT_PAREN)

                self.state = 3200
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 315, self._ctx)
                if la_ == 1:
                    self.state = 3199
                    self.notNull()

                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3202
                self.match(GQLParser.BINARY)
                self.state = 3207
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 316, self._ctx)
                if la_ == 1:
                    self.state = 3203
                    self.match(GQLParser.LEFT_PAREN)
                    self.state = 3204
                    self.fixedLength()
                    self.state = 3205
                    self.match(GQLParser.RIGHT_PAREN)

                self.state = 3210
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 317, self._ctx)
                if la_ == 1:
                    self.state = 3209
                    self.notNull()

                pass
            elif token in [226]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3212
                self.match(GQLParser.VARBINARY)
                self.state = 3217
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 318, self._ctx)
                if la_ == 1:
                    self.state = 3213
                    self.match(GQLParser.LEFT_PAREN)
                    self.state = 3214
                    self.maxLength()
                    self.state = 3215
                    self.match(GQLParser.RIGHT_PAREN)

                self.state = 3220
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 319, self._ctx)
                if la_ == 1:
                    self.state = 3219
                    self.notNull()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MinLengthContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedInteger(self):
            return self.getTypedRuleContext(GQLParser.UnsignedIntegerContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_minLength

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMinLength"):
                listener.enterMinLength(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMinLength"):
                listener.exitMinLength(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMinLength"):
                return visitor.visitMinLength(self)
            else:
                return visitor.visitChildren(self)

    def minLength(self):
        localctx = GQLParser.MinLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_minLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3224
            self.unsignedInteger()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MaxLengthContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedInteger(self):
            return self.getTypedRuleContext(GQLParser.UnsignedIntegerContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_maxLength

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMaxLength"):
                listener.enterMaxLength(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMaxLength"):
                listener.exitMaxLength(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMaxLength"):
                return visitor.visitMaxLength(self)
            else:
                return visitor.visitChildren(self)

    def maxLength(self):
        localctx = GQLParser.MaxLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_maxLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3226
            self.unsignedInteger()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FixedLengthContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedInteger(self):
            return self.getTypedRuleContext(GQLParser.UnsignedIntegerContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_fixedLength

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFixedLength"):
                listener.enterFixedLength(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFixedLength"):
                listener.exitFixedLength(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFixedLength"):
                return visitor.visitFixedLength(self)
            else:
                return visitor.visitChildren(self)

    def fixedLength(self):
        localctx = GQLParser.FixedLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_fixedLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3228
            self.unsignedInteger()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exactNumericType(self):
            return self.getTypedRuleContext(GQLParser.ExactNumericTypeContext, 0)

        def approximateNumericType(self):
            return self.getTypedRuleContext(GQLParser.ApproximateNumericTypeContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_numericType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericType"):
                listener.enterNumericType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericType"):
                listener.exitNumericType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericType"):
                return visitor.visitNumericType(self)
            else:
                return visitor.visitChildren(self)

    def numericType(self):
        localctx = GQLParser.NumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_numericType)
        try:
            self.state = 3232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                34,
                35,
                73,
                74,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                191,
                196,
                197,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                221,
                224,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3230
                self.exactNumericType()
                pass
            elif token in [81, 93, 94, 95, 96, 97, 98, 175]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3231
                self.approximateNumericType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExactNumericTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryExactNumericType(self):
            return self.getTypedRuleContext(GQLParser.BinaryExactNumericTypeContext, 0)

        def decimalExactNumericType(self):
            return self.getTypedRuleContext(GQLParser.DecimalExactNumericTypeContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_exactNumericType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExactNumericType"):
                listener.enterExactNumericType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExactNumericType"):
                listener.exitExactNumericType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExactNumericType"):
                return visitor.visitExactNumericType(self)
            else:
                return visitor.visitChildren(self)

    def exactNumericType(self):
        localctx = GQLParser.ExactNumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_exactNumericType)
        try:
            self.state = 3236
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                34,
                35,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                191,
                196,
                197,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                221,
                224,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3234
                self.binaryExactNumericType()
                pass
            elif token in [73, 74]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3235
                self.decimalExactNumericType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinaryExactNumericTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signedBinaryExactNumericType(self):
            return self.getTypedRuleContext(
                GQLParser.SignedBinaryExactNumericTypeContext, 0
            )

        def unsignedBinaryExactNumericType(self):
            return self.getTypedRuleContext(
                GQLParser.UnsignedBinaryExactNumericTypeContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_binaryExactNumericType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBinaryExactNumericType"):
                listener.enterBinaryExactNumericType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBinaryExactNumericType"):
                listener.exitBinaryExactNumericType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBinaryExactNumericType"):
                return visitor.visitBinaryExactNumericType(self)
            else:
                return visitor.visitChildren(self)

    def binaryExactNumericType(self):
        localctx = GQLParser.BinaryExactNumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_binaryExactNumericType)
        try:
            self.state = 3240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                34,
                35,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                191,
                196,
                197,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3238
                self.signedBinaryExactNumericType()
                pass
            elif token in [212, 213, 214, 215, 216, 217, 218, 219, 221, 224]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3239
                self.unsignedBinaryExactNumericType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignedBinaryExactNumericTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT8(self):
            return self.getToken(GQLParser.INT8, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def INT16(self):
            return self.getToken(GQLParser.INT16, 0)

        def INT32(self):
            return self.getToken(GQLParser.INT32, 0)

        def INT64(self):
            return self.getToken(GQLParser.INT64, 0)

        def INT128(self):
            return self.getToken(GQLParser.INT128, 0)

        def INT256(self):
            return self.getToken(GQLParser.INT256, 0)

        def SMALLINT(self):
            return self.getToken(GQLParser.SMALLINT, 0)

        def INT(self):
            return self.getToken(GQLParser.INT, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def precision(self):
            return self.getTypedRuleContext(GQLParser.PrecisionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def BIGINT(self):
            return self.getToken(GQLParser.BIGINT, 0)

        def verboseBinaryExactNumericType(self):
            return self.getTypedRuleContext(
                GQLParser.VerboseBinaryExactNumericTypeContext, 0
            )

        def SIGNED(self):
            return self.getToken(GQLParser.SIGNED, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_signedBinaryExactNumericType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSignedBinaryExactNumericType"):
                listener.enterSignedBinaryExactNumericType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSignedBinaryExactNumericType"):
                listener.exitSignedBinaryExactNumericType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSignedBinaryExactNumericType"):
                return visitor.visitSignedBinaryExactNumericType(self)
            else:
                return visitor.visitChildren(self)

    def signedBinaryExactNumericType(self):
        localctx = GQLParser.SignedBinaryExactNumericTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 698, self.RULE_signedBinaryExactNumericType)
        self._la = 0  # Token type
        try:
            self.state = 3288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3242
                self.match(GQLParser.INT8)
                self.state = 3244
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 324, self._ctx)
                if la_ == 1:
                    self.state = 3243
                    self.notNull()

                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3246
                self.match(GQLParser.INT16)
                self.state = 3248
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 325, self._ctx)
                if la_ == 1:
                    self.state = 3247
                    self.notNull()

                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3250
                self.match(GQLParser.INT32)
                self.state = 3252
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 326, self._ctx)
                if la_ == 1:
                    self.state = 3251
                    self.notNull()

                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3254
                self.match(GQLParser.INT64)
                self.state = 3256
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 327, self._ctx)
                if la_ == 1:
                    self.state = 3255
                    self.notNull()

                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3258
                self.match(GQLParser.INT128)
                self.state = 3260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 328, self._ctx)
                if la_ == 1:
                    self.state = 3259
                    self.notNull()

                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3262
                self.match(GQLParser.INT256)
                self.state = 3264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 329, self._ctx)
                if la_ == 1:
                    self.state = 3263
                    self.notNull()

                pass
            elif token in [197]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3266
                self.match(GQLParser.SMALLINT)
                self.state = 3268
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 330, self._ctx)
                if la_ == 1:
                    self.state = 3267
                    self.notNull()

                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3270
                self.match(GQLParser.INT)
                self.state = 3275
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 331, self._ctx)
                if la_ == 1:
                    self.state = 3271
                    self.match(GQLParser.LEFT_PAREN)
                    self.state = 3272
                    self.precision()
                    self.state = 3273
                    self.match(GQLParser.RIGHT_PAREN)

                self.state = 3278
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 332, self._ctx)
                if la_ == 1:
                    self.state = 3277
                    self.notNull()

                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3280
                self.match(GQLParser.BIGINT)
                self.state = 3282
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 333, self._ctx)
                if la_ == 1:
                    self.state = 3281
                    self.notNull()

                pass
            elif token in [34, 112, 114, 116, 118, 120, 122, 124, 191, 196]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 191:
                    self.state = 3284
                    self.match(GQLParser.SIGNED)

                self.state = 3287
                self.verboseBinaryExactNumericType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnsignedBinaryExactNumericTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UINT8(self):
            return self.getToken(GQLParser.UINT8, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def UINT16(self):
            return self.getToken(GQLParser.UINT16, 0)

        def UINT32(self):
            return self.getToken(GQLParser.UINT32, 0)

        def UINT64(self):
            return self.getToken(GQLParser.UINT64, 0)

        def UINT128(self):
            return self.getToken(GQLParser.UINT128, 0)

        def UINT256(self):
            return self.getToken(GQLParser.UINT256, 0)

        def USMALLINT(self):
            return self.getToken(GQLParser.USMALLINT, 0)

        def UINT(self):
            return self.getToken(GQLParser.UINT, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def precision(self):
            return self.getTypedRuleContext(GQLParser.PrecisionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def UBIGINT(self):
            return self.getToken(GQLParser.UBIGINT, 0)

        def UNSIGNED(self):
            return self.getToken(GQLParser.UNSIGNED, 0)

        def verboseBinaryExactNumericType(self):
            return self.getTypedRuleContext(
                GQLParser.VerboseBinaryExactNumericTypeContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_unsignedBinaryExactNumericType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnsignedBinaryExactNumericType"):
                listener.enterUnsignedBinaryExactNumericType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnsignedBinaryExactNumericType"):
                listener.exitUnsignedBinaryExactNumericType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnsignedBinaryExactNumericType"):
                return visitor.visitUnsignedBinaryExactNumericType(self)
            else:
                return visitor.visitChildren(self)

    def unsignedBinaryExactNumericType(self):
        localctx = GQLParser.UnsignedBinaryExactNumericTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 700, self.RULE_unsignedBinaryExactNumericType)
        try:
            self.state = 3334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [214]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3290
                self.match(GQLParser.UINT8)
                self.state = 3292
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 336, self._ctx)
                if la_ == 1:
                    self.state = 3291
                    self.notNull()

                pass
            elif token in [215]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3294
                self.match(GQLParser.UINT16)
                self.state = 3296
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 337, self._ctx)
                if la_ == 1:
                    self.state = 3295
                    self.notNull()

                pass
            elif token in [216]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3298
                self.match(GQLParser.UINT32)
                self.state = 3300
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 338, self._ctx)
                if la_ == 1:
                    self.state = 3299
                    self.notNull()

                pass
            elif token in [217]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3302
                self.match(GQLParser.UINT64)
                self.state = 3304
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 339, self._ctx)
                if la_ == 1:
                    self.state = 3303
                    self.notNull()

                pass
            elif token in [218]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3306
                self.match(GQLParser.UINT128)
                self.state = 3308
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 340, self._ctx)
                if la_ == 1:
                    self.state = 3307
                    self.notNull()

                pass
            elif token in [219]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3310
                self.match(GQLParser.UINT256)
                self.state = 3312
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 341, self._ctx)
                if la_ == 1:
                    self.state = 3311
                    self.notNull()

                pass
            elif token in [224]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3314
                self.match(GQLParser.USMALLINT)
                self.state = 3316
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 342, self._ctx)
                if la_ == 1:
                    self.state = 3315
                    self.notNull()

                pass
            elif token in [213]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3318
                self.match(GQLParser.UINT)
                self.state = 3323
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 343, self._ctx)
                if la_ == 1:
                    self.state = 3319
                    self.match(GQLParser.LEFT_PAREN)
                    self.state = 3320
                    self.precision()
                    self.state = 3321
                    self.match(GQLParser.RIGHT_PAREN)

                self.state = 3326
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 344, self._ctx)
                if la_ == 1:
                    self.state = 3325
                    self.notNull()

                pass
            elif token in [212]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3328
                self.match(GQLParser.UBIGINT)
                self.state = 3330
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 345, self._ctx)
                if la_ == 1:
                    self.state = 3329
                    self.notNull()

                pass
            elif token in [221]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3332
                self.match(GQLParser.UNSIGNED)
                self.state = 3333
                self.verboseBinaryExactNumericType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VerboseBinaryExactNumericTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER8(self):
            return self.getToken(GQLParser.INTEGER8, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def INTEGER16(self):
            return self.getToken(GQLParser.INTEGER16, 0)

        def INTEGER32(self):
            return self.getToken(GQLParser.INTEGER32, 0)

        def INTEGER64(self):
            return self.getToken(GQLParser.INTEGER64, 0)

        def INTEGER128(self):
            return self.getToken(GQLParser.INTEGER128, 0)

        def INTEGER256(self):
            return self.getToken(GQLParser.INTEGER256, 0)

        def SMALL(self):
            return self.getToken(GQLParser.SMALL, 0)

        def INTEGER(self):
            return self.getToken(GQLParser.INTEGER, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def precision(self):
            return self.getTypedRuleContext(GQLParser.PrecisionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def BIG(self):
            return self.getToken(GQLParser.BIG, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_verboseBinaryExactNumericType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVerboseBinaryExactNumericType"):
                listener.enterVerboseBinaryExactNumericType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVerboseBinaryExactNumericType"):
                listener.exitVerboseBinaryExactNumericType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVerboseBinaryExactNumericType"):
                return visitor.visitVerboseBinaryExactNumericType(self)
            else:
                return visitor.visitChildren(self)

    def verboseBinaryExactNumericType(self):
        localctx = GQLParser.VerboseBinaryExactNumericTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 702, self.RULE_verboseBinaryExactNumericType)
        try:
            self.state = 3380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3336
                self.match(GQLParser.INTEGER8)
                self.state = 3338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 347, self._ctx)
                if la_ == 1:
                    self.state = 3337
                    self.notNull()

                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3340
                self.match(GQLParser.INTEGER16)
                self.state = 3342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 348, self._ctx)
                if la_ == 1:
                    self.state = 3341
                    self.notNull()

                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3344
                self.match(GQLParser.INTEGER32)
                self.state = 3346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 349, self._ctx)
                if la_ == 1:
                    self.state = 3345
                    self.notNull()

                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3348
                self.match(GQLParser.INTEGER64)
                self.state = 3350
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 350, self._ctx)
                if la_ == 1:
                    self.state = 3349
                    self.notNull()

                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3352
                self.match(GQLParser.INTEGER128)
                self.state = 3354
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 351, self._ctx)
                if la_ == 1:
                    self.state = 3353
                    self.notNull()

                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3356
                self.match(GQLParser.INTEGER256)
                self.state = 3358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 352, self._ctx)
                if la_ == 1:
                    self.state = 3357
                    self.notNull()

                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3360
                self.match(GQLParser.SMALL)
                self.state = 3361
                self.match(GQLParser.INTEGER)
                self.state = 3363
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 353, self._ctx)
                if la_ == 1:
                    self.state = 3362
                    self.notNull()

                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3365
                self.match(GQLParser.INTEGER)
                self.state = 3370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 354, self._ctx)
                if la_ == 1:
                    self.state = 3366
                    self.match(GQLParser.LEFT_PAREN)
                    self.state = 3367
                    self.precision()
                    self.state = 3368
                    self.match(GQLParser.RIGHT_PAREN)

                self.state = 3373
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 355, self._ctx)
                if la_ == 1:
                    self.state = 3372
                    self.notNull()

                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3375
                self.match(GQLParser.BIG)
                self.state = 3376
                self.match(GQLParser.INTEGER)
                self.state = 3378
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 356, self._ctx)
                if la_ == 1:
                    self.state = 3377
                    self.notNull()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecimalExactNumericTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(GQLParser.DECIMAL, 0)

        def DEC(self):
            return self.getToken(GQLParser.DEC, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def precision(self):
            return self.getTypedRuleContext(GQLParser.PrecisionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def scale(self):
            return self.getTypedRuleContext(GQLParser.ScaleContext, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_decimalExactNumericType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecimalExactNumericType"):
                listener.enterDecimalExactNumericType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecimalExactNumericType"):
                listener.exitDecimalExactNumericType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDecimalExactNumericType"):
                return visitor.visitDecimalExactNumericType(self)
            else:
                return visitor.visitChildren(self)

    def decimalExactNumericType(self):
        localctx = GQLParser.DecimalExactNumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_decimalExactNumericType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3382
            _la = self._input.LA(1)
            if not (_la == 73 or _la == 74):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 360, self._ctx)
            if la_ == 1:
                self.state = 3383
                self.match(GQLParser.LEFT_PAREN)
                self.state = 3384
                self.precision()
                self.state = 3387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 360:
                    self.state = 3385
                    self.match(GQLParser.COMMA)
                    self.state = 3386
                    self.scale()

                self.state = 3389
                self.match(GQLParser.RIGHT_PAREN)
                self.state = 3391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 359, self._ctx)
                if la_ == 1:
                    self.state = 3390
                    self.notNull()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrecisionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedDecimalInteger(self):
            return self.getTypedRuleContext(GQLParser.UnsignedDecimalIntegerContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_precision

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrecision"):
                listener.enterPrecision(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrecision"):
                listener.exitPrecision(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrecision"):
                return visitor.visitPrecision(self)
            else:
                return visitor.visitChildren(self)

    def precision(self):
        localctx = GQLParser.PrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_precision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3395
            self.unsignedDecimalInteger()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScaleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedDecimalInteger(self):
            return self.getTypedRuleContext(GQLParser.UnsignedDecimalIntegerContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_scale

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterScale"):
                listener.enterScale(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitScale"):
                listener.exitScale(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitScale"):
                return visitor.visitScale(self)
            else:
                return visitor.visitChildren(self)

    def scale(self):
        localctx = GQLParser.ScaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_scale)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3397
            self.unsignedDecimalInteger()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ApproximateNumericTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT16(self):
            return self.getToken(GQLParser.FLOAT16, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def FLOAT32(self):
            return self.getToken(GQLParser.FLOAT32, 0)

        def FLOAT64(self):
            return self.getToken(GQLParser.FLOAT64, 0)

        def FLOAT128(self):
            return self.getToken(GQLParser.FLOAT128, 0)

        def FLOAT256(self):
            return self.getToken(GQLParser.FLOAT256, 0)

        def FLOAT(self):
            return self.getToken(GQLParser.FLOAT, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def precision(self):
            return self.getTypedRuleContext(GQLParser.PrecisionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def scale(self):
            return self.getTypedRuleContext(GQLParser.ScaleContext, 0)

        def REAL(self):
            return self.getToken(GQLParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(GQLParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(GQLParser.PRECISION, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_approximateNumericType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterApproximateNumericType"):
                listener.enterApproximateNumericType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitApproximateNumericType"):
                listener.exitApproximateNumericType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitApproximateNumericType"):
                return visitor.visitApproximateNumericType(self)
            else:
                return visitor.visitChildren(self)

    def approximateNumericType(self):
        localctx = GQLParser.ApproximateNumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_approximateNumericType)
        self._la = 0  # Token type
        try:
            self.state = 3444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3399
                self.match(GQLParser.FLOAT16)
                self.state = 3401
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 361, self._ctx)
                if la_ == 1:
                    self.state = 3400
                    self.notNull()

                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3403
                self.match(GQLParser.FLOAT32)
                self.state = 3405
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 362, self._ctx)
                if la_ == 1:
                    self.state = 3404
                    self.notNull()

                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3407
                self.match(GQLParser.FLOAT64)
                self.state = 3409
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 363, self._ctx)
                if la_ == 1:
                    self.state = 3408
                    self.notNull()

                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3411
                self.match(GQLParser.FLOAT128)
                self.state = 3413
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 364, self._ctx)
                if la_ == 1:
                    self.state = 3412
                    self.notNull()

                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3415
                self.match(GQLParser.FLOAT256)
                self.state = 3417
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 365, self._ctx)
                if la_ == 1:
                    self.state = 3416
                    self.notNull()

                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3419
                self.match(GQLParser.FLOAT)
                self.state = 3428
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 367, self._ctx)
                if la_ == 1:
                    self.state = 3420
                    self.match(GQLParser.LEFT_PAREN)
                    self.state = 3421
                    self.precision()
                    self.state = 3424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 360:
                        self.state = 3422
                        self.match(GQLParser.COMMA)
                        self.state = 3423
                        self.scale()

                    self.state = 3426
                    self.match(GQLParser.RIGHT_PAREN)

                self.state = 3431
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 368, self._ctx)
                if la_ == 1:
                    self.state = 3430
                    self.notNull()

                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3433
                self.match(GQLParser.REAL)
                self.state = 3435
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 369, self._ctx)
                if la_ == 1:
                    self.state = 3434
                    self.notNull()

                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3437
                self.match(GQLParser.DOUBLE)
                self.state = 3439
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 370, self._ctx)
                if la_ == 1:
                    self.state = 3438
                    self.match(GQLParser.PRECISION)

                self.state = 3442
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 371, self._ctx)
                if la_ == 1:
                    self.state = 3441
                    self.notNull()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemporalTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def temporalInstantType(self):
            return self.getTypedRuleContext(GQLParser.TemporalInstantTypeContext, 0)

        def temporalDurationType(self):
            return self.getTypedRuleContext(GQLParser.TemporalDurationTypeContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_temporalType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemporalType"):
                listener.enterTemporalType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemporalType"):
                listener.exitTemporalType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTemporalType"):
                return visitor.visitTemporalType(self)
            else:
                return visitor.visitChildren(self)

    def temporalType(self):
        localctx = GQLParser.TemporalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_temporalType)
        try:
            self.state = 3448
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70, 135, 207, 208, 235]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3446
                self.temporalInstantType()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3447
                self.temporalDurationType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemporalInstantTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datetimeType(self):
            return self.getTypedRuleContext(GQLParser.DatetimeTypeContext, 0)

        def localdatetimeType(self):
            return self.getTypedRuleContext(GQLParser.LocaldatetimeTypeContext, 0)

        def dateType(self):
            return self.getTypedRuleContext(GQLParser.DateTypeContext, 0)

        def timeType(self):
            return self.getTypedRuleContext(GQLParser.TimeTypeContext, 0)

        def localtimeType(self):
            return self.getTypedRuleContext(GQLParser.LocaltimeTypeContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_temporalInstantType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemporalInstantType"):
                listener.enterTemporalInstantType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemporalInstantType"):
                listener.exitTemporalInstantType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTemporalInstantType"):
                return visitor.visitTemporalInstantType(self)
            else:
                return visitor.visitChildren(self)

    def temporalInstantType(self):
        localctx = GQLParser.TemporalInstantTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_temporalInstantType)
        try:
            self.state = 3455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 374, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3450
                self.datetimeType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3451
                self.localdatetimeType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3452
                self.dateType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3453
                self.timeType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3454
                self.localtimeType()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatetimeTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ZONED(self):
            return self.getToken(GQLParser.ZONED, 0)

        def DATETIME(self):
            return self.getToken(GQLParser.DATETIME, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def TIMESTAMP(self):
            return self.getToken(GQLParser.TIMESTAMP, 0)

        def WITH(self):
            return self.getToken(GQLParser.WITH, 0)

        def TIME(self):
            return self.getToken(GQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(GQLParser.ZONE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_datetimeType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatetimeType"):
                listener.enterDatetimeType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatetimeType"):
                listener.exitDatetimeType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatetimeType"):
                return visitor.visitDatetimeType(self)
            else:
                return visitor.visitChildren(self)

    def datetimeType(self):
        localctx = GQLParser.DatetimeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_datetimeType)
        try:
            self.state = 3469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [235]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3457
                self.match(GQLParser.ZONED)
                self.state = 3458
                self.match(GQLParser.DATETIME)
                self.state = 3460
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 375, self._ctx)
                if la_ == 1:
                    self.state = 3459
                    self.notNull()

                pass
            elif token in [208]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3462
                self.match(GQLParser.TIMESTAMP)
                self.state = 3463
                self.match(GQLParser.WITH)
                self.state = 3464
                self.match(GQLParser.TIME)
                self.state = 3465
                self.match(GQLParser.ZONE)
                self.state = 3467
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 376, self._ctx)
                if la_ == 1:
                    self.state = 3466
                    self.notNull()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocaldatetimeTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(GQLParser.LOCAL, 0)

        def DATETIME(self):
            return self.getToken(GQLParser.DATETIME, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def TIMESTAMP(self):
            return self.getToken(GQLParser.TIMESTAMP, 0)

        def WITHOUT(self):
            return self.getToken(GQLParser.WITHOUT, 0)

        def TIME(self):
            return self.getToken(GQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(GQLParser.ZONE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_localdatetimeType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLocaldatetimeType"):
                listener.enterLocaldatetimeType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLocaldatetimeType"):
                listener.exitLocaldatetimeType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLocaldatetimeType"):
                return visitor.visitLocaldatetimeType(self)
            else:
                return visitor.visitChildren(self)

    def localdatetimeType(self):
        localctx = GQLParser.LocaldatetimeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_localdatetimeType)
        try:
            self.state = 3485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3471
                self.match(GQLParser.LOCAL)
                self.state = 3472
                self.match(GQLParser.DATETIME)
                self.state = 3474
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 378, self._ctx)
                if la_ == 1:
                    self.state = 3473
                    self.notNull()

                pass
            elif token in [208]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3476
                self.match(GQLParser.TIMESTAMP)
                self.state = 3480
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 379, self._ctx)
                if la_ == 1:
                    self.state = 3477
                    self.match(GQLParser.WITHOUT)
                    self.state = 3478
                    self.match(GQLParser.TIME)
                    self.state = 3479
                    self.match(GQLParser.ZONE)

                self.state = 3483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 380, self._ctx)
                if la_ == 1:
                    self.state = 3482
                    self.notNull()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(GQLParser.DATE, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_dateType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDateType"):
                listener.enterDateType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDateType"):
                listener.exitDateType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDateType"):
                return visitor.visitDateType(self)
            else:
                return visitor.visitChildren(self)

    def dateType(self):
        localctx = GQLParser.DateTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_dateType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3487
            self.match(GQLParser.DATE)
            self.state = 3489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 382, self._ctx)
            if la_ == 1:
                self.state = 3488
                self.notNull()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ZONED(self):
            return self.getToken(GQLParser.ZONED, 0)

        def TIME(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.TIME)
            else:
                return self.getToken(GQLParser.TIME, i)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def WITH(self):
            return self.getToken(GQLParser.WITH, 0)

        def ZONE(self):
            return self.getToken(GQLParser.ZONE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_timeType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimeType"):
                listener.enterTimeType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimeType"):
                listener.exitTimeType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeType"):
                return visitor.visitTimeType(self)
            else:
                return visitor.visitChildren(self)

    def timeType(self):
        localctx = GQLParser.TimeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_timeType)
        try:
            self.state = 3503
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [235]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3491
                self.match(GQLParser.ZONED)
                self.state = 3492
                self.match(GQLParser.TIME)
                self.state = 3494
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 383, self._ctx)
                if la_ == 1:
                    self.state = 3493
                    self.notNull()

                pass
            elif token in [207]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3496
                self.match(GQLParser.TIME)
                self.state = 3497
                self.match(GQLParser.WITH)
                self.state = 3498
                self.match(GQLParser.TIME)
                self.state = 3499
                self.match(GQLParser.ZONE)
                self.state = 3501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 384, self._ctx)
                if la_ == 1:
                    self.state = 3500
                    self.notNull()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocaltimeTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(GQLParser.LOCAL, 0)

        def TIME(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.TIME)
            else:
                return self.getToken(GQLParser.TIME, i)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def WITHOUT(self):
            return self.getToken(GQLParser.WITHOUT, 0)

        def ZONE(self):
            return self.getToken(GQLParser.ZONE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_localtimeType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLocaltimeType"):
                listener.enterLocaltimeType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLocaltimeType"):
                listener.exitLocaltimeType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLocaltimeType"):
                return visitor.visitLocaltimeType(self)
            else:
                return visitor.visitChildren(self)

    def localtimeType(self):
        localctx = GQLParser.LocaltimeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_localtimeType)
        try:
            self.state = 3517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3505
                self.match(GQLParser.LOCAL)
                self.state = 3506
                self.match(GQLParser.TIME)
                self.state = 3508
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 386, self._ctx)
                if la_ == 1:
                    self.state = 3507
                    self.notNull()

                pass
            elif token in [207]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3510
                self.match(GQLParser.TIME)
                self.state = 3511
                self.match(GQLParser.WITHOUT)
                self.state = 3512
                self.match(GQLParser.TIME)
                self.state = 3513
                self.match(GQLParser.ZONE)
                self.state = 3515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 387, self._ctx)
                if la_ == 1:
                    self.state = 3514
                    self.notNull()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemporalDurationTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DURATION(self):
            return self.getToken(GQLParser.DURATION, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def temporalDurationQualifier(self):
            return self.getTypedRuleContext(
                GQLParser.TemporalDurationQualifierContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_temporalDurationType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemporalDurationType"):
                listener.enterTemporalDurationType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemporalDurationType"):
                listener.exitTemporalDurationType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTemporalDurationType"):
                return visitor.visitTemporalDurationType(self)
            else:
                return visitor.visitChildren(self)

    def temporalDurationType(self):
        localctx = GQLParser.TemporalDurationTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_temporalDurationType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3519
            self.match(GQLParser.DURATION)
            self.state = 3520
            self.match(GQLParser.LEFT_PAREN)
            self.state = 3521
            self.temporalDurationQualifier()
            self.state = 3522
            self.match(GQLParser.RIGHT_PAREN)
            self.state = 3524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 389, self._ctx)
            if la_ == 1:
                self.state = 3523
                self.notNull()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemporalDurationQualifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(GQLParser.YEAR, 0)

        def TO(self):
            return self.getToken(GQLParser.TO, 0)

        def MONTH(self):
            return self.getToken(GQLParser.MONTH, 0)

        def DAY(self):
            return self.getToken(GQLParser.DAY, 0)

        def SECOND(self):
            return self.getToken(GQLParser.SECOND, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_temporalDurationQualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemporalDurationQualifier"):
                listener.enterTemporalDurationQualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemporalDurationQualifier"):
                listener.exitTemporalDurationQualifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTemporalDurationQualifier"):
                return visitor.visitTemporalDurationQualifier(self)
            else:
                return visitor.visitChildren(self)

    def temporalDurationQualifier(self):
        localctx = GQLParser.TemporalDurationQualifierContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 728, self.RULE_temporalDurationQualifier)
        try:
            self.state = 3532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [233]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3526
                self.match(GQLParser.YEAR)
                self.state = 3527
                self.match(GQLParser.TO)
                self.state = 3528
                self.match(GQLParser.MONTH)
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3529
                self.match(GQLParser.DAY)
                self.state = 3530
                self.match(GQLParser.TO)
                self.state = 3531
                self.match(GQLParser.SECOND)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferenceValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphReferenceValueType(self):
            return self.getTypedRuleContext(GQLParser.GraphReferenceValueTypeContext, 0)

        def bindingTableReferenceValueType(self):
            return self.getTypedRuleContext(
                GQLParser.BindingTableReferenceValueTypeContext, 0
            )

        def nodeReferenceValueType(self):
            return self.getTypedRuleContext(GQLParser.NodeReferenceValueTypeContext, 0)

        def edgeReferenceValueType(self):
            return self.getTypedRuleContext(GQLParser.EdgeReferenceValueTypeContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_referenceValueType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReferenceValueType"):
                listener.enterReferenceValueType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReferenceValueType"):
                listener.exitReferenceValueType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReferenceValueType"):
                return visitor.visitReferenceValueType(self)
            else:
                return visitor.visitChildren(self)

    def referenceValueType(self):
        localctx = GQLParser.ReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_referenceValueType)
        try:
            self.state = 3538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 391, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3534
                self.graphReferenceValueType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3535
                self.bindingTableReferenceValueType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3536
                self.nodeReferenceValueType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3537
                self.edgeReferenceValueType()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImmaterialValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nullType(self):
            return self.getTypedRuleContext(GQLParser.NullTypeContext, 0)

        def emptyType(self):
            return self.getTypedRuleContext(GQLParser.EmptyTypeContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_immaterialValueType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImmaterialValueType"):
                listener.enterImmaterialValueType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImmaterialValueType"):
                listener.exitImmaterialValueType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImmaterialValueType"):
                return visitor.visitImmaterialValueType(self)
            else:
                return visitor.visitChildren(self)

    def immaterialValueType(self):
        localctx = GQLParser.ImmaterialValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_immaterialValueType)
        try:
            self.state = 3542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 392, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3540
                self.nullType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3541
                self.emptyType()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NullTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_KW(self):
            return self.getToken(GQLParser.NULL_KW, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nullType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNullType"):
                listener.enterNullType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNullType"):
                listener.exitNullType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNullType"):
                return visitor.visitNullType(self)
            else:
                return visitor.visitChildren(self)

    def nullType(self):
        localctx = GQLParser.NullTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_nullType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3544
            self.match(GQLParser.NULL_KW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmptyTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_KW(self):
            return self.getToken(GQLParser.NULL_KW, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def NOTHING(self):
            return self.getToken(GQLParser.NOTHING, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_emptyType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEmptyType"):
                listener.enterEmptyType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEmptyType"):
                listener.exitEmptyType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEmptyType"):
                return visitor.visitEmptyType(self)
            else:
                return visitor.visitChildren(self)

    def emptyType(self):
        localctx = GQLParser.EmptyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_emptyType)
        try:
            self.state = 3549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [154]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3546
                self.match(GQLParser.NULL_KW)
                self.state = 3547
                self.notNull()
                pass
            elif token in [153]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3548
                self.match(GQLParser.NOTHING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphReferenceValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openGraphReferenceValueType(self):
            return self.getTypedRuleContext(
                GQLParser.OpenGraphReferenceValueTypeContext, 0
            )

        def closedGraphReferenceValueType(self):
            return self.getTypedRuleContext(
                GQLParser.ClosedGraphReferenceValueTypeContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_graphReferenceValueType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphReferenceValueType"):
                listener.enterGraphReferenceValueType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphReferenceValueType"):
                listener.exitGraphReferenceValueType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphReferenceValueType"):
                return visitor.visitGraphReferenceValueType(self)
            else:
                return visitor.visitChildren(self)

    def graphReferenceValueType(self):
        localctx = GQLParser.GraphReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_graphReferenceValueType)
        try:
            self.state = 3553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3551
                self.openGraphReferenceValueType()
                pass
            elif token in [289, 305]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3552
                self.closedGraphReferenceValueType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClosedGraphReferenceValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAPH(self):
            return self.getToken(GQLParser.GRAPH, 0)

        def nestedGraphTypeSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NestedGraphTypeSpecificationContext, 0
            )

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_closedGraphReferenceValueType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClosedGraphReferenceValueType"):
                listener.enterClosedGraphReferenceValueType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClosedGraphReferenceValueType"):
                listener.exitClosedGraphReferenceValueType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClosedGraphReferenceValueType"):
                return visitor.visitClosedGraphReferenceValueType(self)
            else:
                return visitor.visitChildren(self)

    def closedGraphReferenceValueType(self):
        localctx = GQLParser.ClosedGraphReferenceValueTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 740, self.RULE_closedGraphReferenceValueType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 305:
                self.state = 3555
                self.match(GQLParser.PROPERTY)

            self.state = 3558
            self.match(GQLParser.GRAPH)
            self.state = 3559
            self.nestedGraphTypeSpecification()
            self.state = 3561
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 396, self._ctx)
            if la_ == 1:
                self.state = 3560
                self.notNull()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenGraphReferenceValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(GQLParser.ANY, 0)

        def GRAPH(self):
            return self.getToken(GQLParser.GRAPH, 0)

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_openGraphReferenceValueType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOpenGraphReferenceValueType"):
                listener.enterOpenGraphReferenceValueType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOpenGraphReferenceValueType"):
                listener.exitOpenGraphReferenceValueType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOpenGraphReferenceValueType"):
                return visitor.visitOpenGraphReferenceValueType(self)
            else:
                return visitor.visitChildren(self)

    def openGraphReferenceValueType(self):
        localctx = GQLParser.OpenGraphReferenceValueTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 742, self.RULE_openGraphReferenceValueType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3563
            self.match(GQLParser.ANY)
            self.state = 3565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 305:
                self.state = 3564
                self.match(GQLParser.PROPERTY)

            self.state = 3567
            self.match(GQLParser.GRAPH)
            self.state = 3569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 398, self._ctx)
            if la_ == 1:
                self.state = 3568
                self.notNull()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindingTableReferenceValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingTableType(self):
            return self.getTypedRuleContext(GQLParser.BindingTableTypeContext, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_bindingTableReferenceValueType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBindingTableReferenceValueType"):
                listener.enterBindingTableReferenceValueType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBindingTableReferenceValueType"):
                listener.exitBindingTableReferenceValueType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBindingTableReferenceValueType"):
                return visitor.visitBindingTableReferenceValueType(self)
            else:
                return visitor.visitChildren(self)

    def bindingTableReferenceValueType(self):
        localctx = GQLParser.BindingTableReferenceValueTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 744, self.RULE_bindingTableReferenceValueType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3571
            self.bindingTableType()
            self.state = 3573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 399, self._ctx)
            if la_ == 1:
                self.state = 3572
                self.notNull()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeReferenceValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openNodeReferenceValueType(self):
            return self.getTypedRuleContext(
                GQLParser.OpenNodeReferenceValueTypeContext, 0
            )

        def closedNodeReferenceValueType(self):
            return self.getTypedRuleContext(
                GQLParser.ClosedNodeReferenceValueTypeContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_nodeReferenceValueType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodeReferenceValueType"):
                listener.enterNodeReferenceValueType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodeReferenceValueType"):
                listener.exitNodeReferenceValueType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodeReferenceValueType"):
                return visitor.visitNodeReferenceValueType(self)
            else:
                return visitor.visitChildren(self)

    def nodeReferenceValueType(self):
        localctx = GQLParser.NodeReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_nodeReferenceValueType)
        try:
            self.state = 3577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 400, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3575
                self.openNodeReferenceValueType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3576
                self.closedNodeReferenceValueType()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClosedNodeReferenceValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeTypeSpecification(self):
            return self.getTypedRuleContext(GQLParser.NodeTypeSpecificationContext, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_closedNodeReferenceValueType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClosedNodeReferenceValueType"):
                listener.enterClosedNodeReferenceValueType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClosedNodeReferenceValueType"):
                listener.exitClosedNodeReferenceValueType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClosedNodeReferenceValueType"):
                return visitor.visitClosedNodeReferenceValueType(self)
            else:
                return visitor.visitChildren(self)

    def closedNodeReferenceValueType(self):
        localctx = GQLParser.ClosedNodeReferenceValueTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 748, self.RULE_closedNodeReferenceValueType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3579
            self.nodeTypeSpecification()
            self.state = 3581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 401, self._ctx)
            if la_ == 1:
                self.state = 3580
                self.notNull()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenNodeReferenceValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeSynonym(self):
            return self.getTypedRuleContext(GQLParser.NodeSynonymContext, 0)

        def ANY(self):
            return self.getToken(GQLParser.ANY, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_openNodeReferenceValueType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOpenNodeReferenceValueType"):
                listener.enterOpenNodeReferenceValueType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOpenNodeReferenceValueType"):
                listener.exitOpenNodeReferenceValueType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOpenNodeReferenceValueType"):
                return visitor.visitOpenNodeReferenceValueType(self)
            else:
                return visitor.visitChildren(self)

    def openNodeReferenceValueType(self):
        localctx = GQLParser.OpenNodeReferenceValueTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 750, self.RULE_openNodeReferenceValueType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 25:
                self.state = 3583
                self.match(GQLParser.ANY)

            self.state = 3586
            self.nodeSynonym()
            self.state = 3588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 403, self._ctx)
            if la_ == 1:
                self.state = 3587
                self.notNull()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeReferenceValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openEdgeReferenceValueType(self):
            return self.getTypedRuleContext(
                GQLParser.OpenEdgeReferenceValueTypeContext, 0
            )

        def closedEdgeReferenceValueType(self):
            return self.getTypedRuleContext(
                GQLParser.ClosedEdgeReferenceValueTypeContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_edgeReferenceValueType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeReferenceValueType"):
                listener.enterEdgeReferenceValueType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeReferenceValueType"):
                listener.exitEdgeReferenceValueType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeReferenceValueType"):
                return visitor.visitEdgeReferenceValueType(self)
            else:
                return visitor.visitChildren(self)

    def edgeReferenceValueType(self):
        localctx = GQLParser.EdgeReferenceValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_edgeReferenceValueType)
        try:
            self.state = 3592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 404, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3590
                self.openEdgeReferenceValueType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3591
                self.closedEdgeReferenceValueType()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClosedEdgeReferenceValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeTypeSpecification(self):
            return self.getTypedRuleContext(GQLParser.EdgeTypeSpecificationContext, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_closedEdgeReferenceValueType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClosedEdgeReferenceValueType"):
                listener.enterClosedEdgeReferenceValueType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClosedEdgeReferenceValueType"):
                listener.exitClosedEdgeReferenceValueType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClosedEdgeReferenceValueType"):
                return visitor.visitClosedEdgeReferenceValueType(self)
            else:
                return visitor.visitChildren(self)

    def closedEdgeReferenceValueType(self):
        localctx = GQLParser.ClosedEdgeReferenceValueTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 754, self.RULE_closedEdgeReferenceValueType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3594
            self.edgeTypeSpecification()
            self.state = 3596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 405, self._ctx)
            if la_ == 1:
                self.state = 3595
                self.notNull()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenEdgeReferenceValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def edgeSynonym(self):
            return self.getTypedRuleContext(GQLParser.EdgeSynonymContext, 0)

        def ANY(self):
            return self.getToken(GQLParser.ANY, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_openEdgeReferenceValueType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOpenEdgeReferenceValueType"):
                listener.enterOpenEdgeReferenceValueType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOpenEdgeReferenceValueType"):
                listener.exitOpenEdgeReferenceValueType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOpenEdgeReferenceValueType"):
                return visitor.visitOpenEdgeReferenceValueType(self)
            else:
                return visitor.visitChildren(self)

    def openEdgeReferenceValueType(self):
        localctx = GQLParser.OpenEdgeReferenceValueTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 756, self.RULE_openEdgeReferenceValueType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 25:
                self.state = 3598
                self.match(GQLParser.ANY)

            self.state = 3601
            self.edgeSynonym()
            self.state = 3603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 407, self._ctx)
            if la_ == 1:
                self.state = 3602
                self.notNull()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathValueTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH(self):
            return self.getToken(GQLParser.PATH, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_pathValueType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathValueType"):
                listener.enterPathValueType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathValueType"):
                listener.exitPathValueType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathValueType"):
                return visitor.visitPathValueType(self)
            else:
                return visitor.visitChildren(self)

    def pathValueType(self):
        localctx = GQLParser.PathValueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_pathValueType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3605
            self.match(GQLParser.PATH)
            self.state = 3607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 408, self._ctx)
            if la_ == 1:
                self.state = 3606
                self.notNull()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListValueTypeNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def listValueTypeNameSynonym(self):
            return self.getTypedRuleContext(
                GQLParser.ListValueTypeNameSynonymContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_listValueTypeName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListValueTypeName"):
                listener.enterListValueTypeName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListValueTypeName"):
                listener.exitListValueTypeName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListValueTypeName"):
                return visitor.visitListValueTypeName(self)
            else:
                return visitor.visitChildren(self)

    def listValueTypeName(self):
        localctx = GQLParser.ListValueTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_listValueTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3609
            self.listValueTypeNameSynonym()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListValueTypeNameSynonymContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIST(self):
            return self.getToken(GQLParser.LIST, 0)

        def ARRAY(self):
            return self.getToken(GQLParser.ARRAY, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_listValueTypeNameSynonym

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListValueTypeNameSynonym"):
                listener.enterListValueTypeNameSynonym(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListValueTypeNameSynonym"):
                listener.exitListValueTypeNameSynonym(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListValueTypeNameSynonym"):
                return visitor.visitListValueTypeNameSynonym(self)
            else:
                return visitor.visitChildren(self)

    def listValueTypeNameSynonym(self):
        localctx = GQLParser.ListValueTypeNameSynonymContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 762, self.RULE_listValueTypeNameSynonym)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3611
            _la = self._input.LA(1)
            if not (_la == 26 or _la == 133):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(GQLParser.RECORD, 0)

        def ANY(self):
            return self.getToken(GQLParser.ANY, 0)

        def notNull(self):
            return self.getTypedRuleContext(GQLParser.NotNullContext, 0)

        def fieldTypesSpecification(self):
            return self.getTypedRuleContext(GQLParser.FieldTypesSpecificationContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_recordType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRecordType"):
                listener.enterRecordType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRecordType"):
                listener.exitRecordType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRecordType"):
                return visitor.visitRecordType(self)
            else:
                return visitor.visitChildren(self)

    def recordType(self):
        localctx = GQLParser.RecordTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_recordType)
        self._la = 0  # Token type
        try:
            self.state = 3627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 413, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 25:
                    self.state = 3613
                    self.match(GQLParser.ANY)

                self.state = 3616
                self.match(GQLParser.RECORD)
                self.state = 3618
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 410, self._ctx)
                if la_ == 1:
                    self.state = 3617
                    self.notNull()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 176:
                    self.state = 3620
                    self.match(GQLParser.RECORD)

                self.state = 3623
                self.fieldTypesSpecification()
                self.state = 3625
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 412, self._ctx)
                if la_ == 1:
                    self.state = 3624
                    self.notNull()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldTypesSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GQLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GQLParser.RIGHT_BRACE, 0)

        def fieldTypeList(self):
            return self.getTypedRuleContext(GQLParser.FieldTypeListContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_fieldTypesSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFieldTypesSpecification"):
                listener.enterFieldTypesSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFieldTypesSpecification"):
                listener.exitFieldTypesSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFieldTypesSpecification"):
                return visitor.visitFieldTypesSpecification(self)
            else:
                return visitor.visitChildren(self)

    def fieldTypesSpecification(self):
        localctx = GQLParser.FieldTypesSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_fieldTypesSpecification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3629
            self.match(GQLParser.LEFT_BRACE)
            self.state = 3631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == 4
                or _la == 5
                or (
                    ((_la - 277) & ~0x3F) == 0
                    and ((1 << (_la - 277)) & 281474976710655) != 0
                )
            ):
                self.state = 3630
                self.fieldTypeList()

            self.state = 3633
            self.match(GQLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldTypeListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldType(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.FieldTypeContext)
            else:
                return self.getTypedRuleContext(GQLParser.FieldTypeContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_fieldTypeList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFieldTypeList"):
                listener.enterFieldTypeList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFieldTypeList"):
                listener.exitFieldTypeList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFieldTypeList"):
                return visitor.visitFieldTypeList(self)
            else:
                return visitor.visitChildren(self)

    def fieldTypeList(self):
        localctx = GQLParser.FieldTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_fieldTypeList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3635
            self.fieldType()
            self.state = 3640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 3636
                self.match(GQLParser.COMMA)
                self.state = 3637
                self.fieldType()
                self.state = 3642
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NotNullContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(GQLParser.NOT, 0)

        def NULL_KW(self):
            return self.getToken(GQLParser.NULL_KW, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_notNull

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNotNull"):
                listener.enterNotNull(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNotNull"):
                listener.exitNotNull(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNotNull"):
                return visitor.visitNotNull(self)
            else:
                return visitor.visitChildren(self)

    def notNull(self):
        localctx = GQLParser.NotNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_notNull)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3643
            self.match(GQLParser.NOT)
            self.state = 3644
            self.match(GQLParser.NULL_KW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(GQLParser.FieldNameContext, 0)

        def valueType(self):
            return self.getTypedRuleContext(GQLParser.ValueTypeContext, 0)

        def typed(self):
            return self.getTypedRuleContext(GQLParser.TypedContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_fieldType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFieldType"):
                listener.enterFieldType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFieldType"):
                listener.exitFieldType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFieldType"):
                return visitor.visitFieldType(self)
            else:
                return visitor.visitChildren(self)

    def fieldType(self):
        localctx = GQLParser.FieldTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_fieldType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3646
            self.fieldName()
            self.state = 3648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 211 or _la == 331:
                self.state = 3647
                self.typed()

            self.state = 3650
            self.valueType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SearchConditionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanValueExpression(self):
            return self.getTypedRuleContext(GQLParser.BooleanValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_searchCondition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSearchCondition"):
                listener.enterSearchCondition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSearchCondition"):
                listener.exitSearchCondition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSearchCondition"):
                return visitor.visitSearchCondition(self)
            else:
                return visitor.visitChildren(self)

    def searchCondition(self):
        localctx = GQLParser.SearchConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_searchCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3652
            self.booleanValueExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def existsPredicate(self):
            return self.getTypedRuleContext(GQLParser.ExistsPredicateContext, 0)

        def nullPredicate(self):
            return self.getTypedRuleContext(GQLParser.NullPredicateContext, 0)

        def valueTypePredicate(self):
            return self.getTypedRuleContext(GQLParser.ValueTypePredicateContext, 0)

        def directedPredicate(self):
            return self.getTypedRuleContext(GQLParser.DirectedPredicateContext, 0)

        def labeledPredicate(self):
            return self.getTypedRuleContext(GQLParser.LabeledPredicateContext, 0)

        def sourceDestinationPredicate(self):
            return self.getTypedRuleContext(
                GQLParser.SourceDestinationPredicateContext, 0
            )

        def all_differentPredicate(self):
            return self.getTypedRuleContext(GQLParser.All_differentPredicateContext, 0)

        def samePredicate(self):
            return self.getTypedRuleContext(GQLParser.SamePredicateContext, 0)

        def property_existsPredicate(self):
            return self.getTypedRuleContext(
                GQLParser.Property_existsPredicateContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_predicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPredicate"):
                listener.enterPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPredicate"):
                listener.exitPredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPredicate"):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)

    def predicate(self):
        localctx = GQLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_predicate)
        try:
            self.state = 3663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 417, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3654
                self.existsPredicate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3655
                self.nullPredicate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3656
                self.valueTypePredicate()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3657
                self.directedPredicate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3658
                self.labeledPredicate()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3659
                self.sourceDestinationPredicate()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3660
                self.all_differentPredicate()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3661
                self.samePredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3662
                self.property_existsPredicate()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompOpContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OPERATOR(self):
            return self.getToken(GQLParser.EQUALS_OPERATOR, 0)

        def NOT_EQUALS_OPERATOR(self):
            return self.getToken(GQLParser.NOT_EQUALS_OPERATOR, 0)

        def LEFT_ANGLE_BRACKET(self):
            return self.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0)

        def RIGHT_ANGLE_BRACKET(self):
            return self.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0)

        def LESS_THAN_OR_EQUALS_OPERATOR(self):
            return self.getToken(GQLParser.LESS_THAN_OR_EQUALS_OPERATOR, 0)

        def GREATER_THAN_OR_EQUALS_OPERATOR(self):
            return self.getToken(GQLParser.GREATER_THAN_OR_EQUALS_OPERATOR, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_compOp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompOp"):
                listener.enterCompOp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompOp"):
                listener.exitCompOp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompOp"):
                return visitor.visitCompOp(self)
            else:
                return visitor.visitChildren(self)

    def compOp(self):
        localctx = GQLParser.CompOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_compOp)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3665
            _la = self._input.LA(1)
            if not (
                ((_la - 334) & ~0x3F) == 0 and ((1 << (_la - 334)) & 142807664897) != 0
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExistsPredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(GQLParser.EXISTS, 0)

        def LEFT_BRACE(self):
            return self.getToken(GQLParser.LEFT_BRACE, 0)

        def graphPattern(self):
            return self.getTypedRuleContext(GQLParser.GraphPatternContext, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GQLParser.RIGHT_BRACE, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def matchStatementBlock(self):
            return self.getTypedRuleContext(GQLParser.MatchStatementBlockContext, 0)

        def nestedQuerySpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NestedQuerySpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_existsPredicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExistsPredicate"):
                listener.enterExistsPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExistsPredicate"):
                listener.exitExistsPredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExistsPredicate"):
                return visitor.visitExistsPredicate(self)
            else:
                return visitor.visitChildren(self)

    def existsPredicate(self):
        localctx = GQLParser.ExistsPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_existsPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3667
            self.match(GQLParser.EXISTS)
            self.state = 3685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 418, self._ctx)
            if la_ == 1:
                self.state = 3668
                self.match(GQLParser.LEFT_BRACE)
                self.state = 3669
                self.graphPattern()
                self.state = 3670
                self.match(GQLParser.RIGHT_BRACE)
                pass

            elif la_ == 2:
                self.state = 3672
                self.match(GQLParser.LEFT_PAREN)
                self.state = 3673
                self.graphPattern()
                self.state = 3674
                self.match(GQLParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.state = 3676
                self.match(GQLParser.LEFT_BRACE)
                self.state = 3677
                self.matchStatementBlock()
                self.state = 3678
                self.match(GQLParser.RIGHT_BRACE)
                pass

            elif la_ == 4:
                self.state = 3680
                self.match(GQLParser.LEFT_PAREN)
                self.state = 3681
                self.matchStatementBlock()
                self.state = 3682
                self.match(GQLParser.RIGHT_PAREN)
                pass

            elif la_ == 5:
                self.state = 3684
                self.nestedQuerySpecification()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NullPredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpressionPrimary(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionPrimaryContext, 0)

        def nullPredicatePart2(self):
            return self.getTypedRuleContext(GQLParser.NullPredicatePart2Context, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nullPredicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNullPredicate"):
                listener.enterNullPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNullPredicate"):
                listener.exitNullPredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNullPredicate"):
                return visitor.visitNullPredicate(self)
            else:
                return visitor.visitChildren(self)

    def nullPredicate(self):
        localctx = GQLParser.NullPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_nullPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3687
            self.valueExpressionPrimary(0)
            self.state = 3688
            self.nullPredicatePart2()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NullPredicatePart2Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(GQLParser.IS, 0)

        def NULL_KW(self):
            return self.getToken(GQLParser.NULL_KW, 0)

        def NOT(self):
            return self.getToken(GQLParser.NOT, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nullPredicatePart2

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNullPredicatePart2"):
                listener.enterNullPredicatePart2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNullPredicatePart2"):
                listener.exitNullPredicatePart2(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNullPredicatePart2"):
                return visitor.visitNullPredicatePart2(self)
            else:
                return visitor.visitChildren(self)

    def nullPredicatePart2(self):
        localctx = GQLParser.NullPredicatePart2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_nullPredicatePart2)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3690
            self.match(GQLParser.IS)
            self.state = 3692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 152:
                self.state = 3691
                self.match(GQLParser.NOT)

            self.state = 3694
            self.match(GQLParser.NULL_KW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueTypePredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpressionPrimary(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionPrimaryContext, 0)

        def valueTypePredicatePart2(self):
            return self.getTypedRuleContext(GQLParser.ValueTypePredicatePart2Context, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_valueTypePredicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValueTypePredicate"):
                listener.enterValueTypePredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValueTypePredicate"):
                listener.exitValueTypePredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueTypePredicate"):
                return visitor.visitValueTypePredicate(self)
            else:
                return visitor.visitChildren(self)

    def valueTypePredicate(self):
        localctx = GQLParser.ValueTypePredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_valueTypePredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3696
            self.valueExpressionPrimary(0)
            self.state = 3697
            self.valueTypePredicatePart2()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueTypePredicatePart2Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(GQLParser.IS, 0)

        def typed(self):
            return self.getTypedRuleContext(GQLParser.TypedContext, 0)

        def valueType(self):
            return self.getTypedRuleContext(GQLParser.ValueTypeContext, 0)

        def NOT(self):
            return self.getToken(GQLParser.NOT, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_valueTypePredicatePart2

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValueTypePredicatePart2"):
                listener.enterValueTypePredicatePart2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValueTypePredicatePart2"):
                listener.exitValueTypePredicatePart2(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueTypePredicatePart2"):
                return visitor.visitValueTypePredicatePart2(self)
            else:
                return visitor.visitChildren(self)

    def valueTypePredicatePart2(self):
        localctx = GQLParser.ValueTypePredicatePart2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_valueTypePredicatePart2)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3699
            self.match(GQLParser.IS)
            self.state = 3701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 152:
                self.state = 3700
                self.match(GQLParser.NOT)

            self.state = 3703
            self.typed()
            self.state = 3704
            self.valueType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NormalizedPredicatePart2Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(GQLParser.IS, 0)

        def NORMALIZED(self):
            return self.getToken(GQLParser.NORMALIZED, 0)

        def NOT(self):
            return self.getToken(GQLParser.NOT, 0)

        def normalForm(self):
            return self.getTypedRuleContext(GQLParser.NormalFormContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_normalizedPredicatePart2

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNormalizedPredicatePart2"):
                listener.enterNormalizedPredicatePart2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNormalizedPredicatePart2"):
                listener.exitNormalizedPredicatePart2(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNormalizedPredicatePart2"):
                return visitor.visitNormalizedPredicatePart2(self)
            else:
                return visitor.visitChildren(self)

    def normalizedPredicatePart2(self):
        localctx = GQLParser.NormalizedPredicatePart2Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 790, self.RULE_normalizedPredicatePart2)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3706
            self.match(GQLParser.IS)
            self.state = 3708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 152:
                self.state = 3707
                self.match(GQLParser.NOT)

            self.state = 3711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la - 296) & ~0x3F) == 0 and ((1 << (_la - 296)) & 15) != 0:
                self.state = 3710
                self.normalForm()

            self.state = 3713
            self.match(GQLParser.NORMALIZED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectedPredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.ElementVariableReferenceContext, 0
            )

        def directedPredicatePart2(self):
            return self.getTypedRuleContext(GQLParser.DirectedPredicatePart2Context, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_directedPredicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDirectedPredicate"):
                listener.enterDirectedPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDirectedPredicate"):
                listener.exitDirectedPredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDirectedPredicate"):
                return visitor.visitDirectedPredicate(self)
            else:
                return visitor.visitChildren(self)

    def directedPredicate(self):
        localctx = GQLParser.DirectedPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_directedPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3715
            self.elementVariableReference()
            self.state = 3716
            self.directedPredicatePart2()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectedPredicatePart2Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(GQLParser.IS, 0)

        def DIRECTED(self):
            return self.getToken(GQLParser.DIRECTED, 0)

        def NOT(self):
            return self.getToken(GQLParser.NOT, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_directedPredicatePart2

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDirectedPredicatePart2"):
                listener.enterDirectedPredicatePart2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDirectedPredicatePart2"):
                listener.exitDirectedPredicatePart2(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDirectedPredicatePart2"):
                return visitor.visitDirectedPredicatePart2(self)
            else:
                return visitor.visitChildren(self)

    def directedPredicatePart2(self):
        localctx = GQLParser.DirectedPredicatePart2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_directedPredicatePart2)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3718
            self.match(GQLParser.IS)
            self.state = 3720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 152:
                self.state = 3719
                self.match(GQLParser.NOT)

            self.state = 3722
            self.match(GQLParser.DIRECTED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabeledPredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.ElementVariableReferenceContext, 0
            )

        def labeledPredicatePart2(self):
            return self.getTypedRuleContext(GQLParser.LabeledPredicatePart2Context, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_labeledPredicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabeledPredicate"):
                listener.enterLabeledPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabeledPredicate"):
                listener.exitLabeledPredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabeledPredicate"):
                return visitor.visitLabeledPredicate(self)
            else:
                return visitor.visitChildren(self)

    def labeledPredicate(self):
        localctx = GQLParser.LabeledPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_labeledPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3724
            self.elementVariableReference()
            self.state = 3725
            self.labeledPredicatePart2()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabeledPredicatePart2Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isLabeledOrColon(self):
            return self.getTypedRuleContext(GQLParser.IsLabeledOrColonContext, 0)

        def labelExpression(self):
            return self.getTypedRuleContext(GQLParser.LabelExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_labeledPredicatePart2

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabeledPredicatePart2"):
                listener.enterLabeledPredicatePart2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabeledPredicatePart2"):
                listener.exitLabeledPredicatePart2(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabeledPredicatePart2"):
                return visitor.visitLabeledPredicatePart2(self)
            else:
                return visitor.visitChildren(self)

    def labeledPredicatePart2(self):
        localctx = GQLParser.LabeledPredicatePart2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_labeledPredicatePart2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3727
            self.isLabeledOrColon()
            self.state = 3728
            self.labelExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IsLabeledOrColonContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(GQLParser.IS, 0)

        def LABELED(self):
            return self.getToken(GQLParser.LABELED, 0)

        def NOT(self):
            return self.getToken(GQLParser.NOT, 0)

        def COLON(self):
            return self.getToken(GQLParser.COLON, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_isLabeledOrColon

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIsLabeledOrColon"):
                listener.enterIsLabeledOrColon(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIsLabeledOrColon"):
                listener.exitIsLabeledOrColon(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIsLabeledOrColon"):
                return visitor.visitIsLabeledOrColon(self)
            else:
                return visitor.visitChildren(self)

    def isLabeledOrColon(self):
        localctx = GQLParser.IsLabeledOrColonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_isLabeledOrColon)
        self._la = 0  # Token type
        try:
            self.state = 3736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3730
                self.match(GQLParser.IS)
                self.state = 3732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 152:
                    self.state = 3731
                    self.match(GQLParser.NOT)

                self.state = 3734
                self.match(GQLParser.LABELED)
                pass
            elif token in [359]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3735
                self.match(GQLParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SourceDestinationPredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeReference(self):
            return self.getTypedRuleContext(GQLParser.NodeReferenceContext, 0)

        def sourcePredicatePart2(self):
            return self.getTypedRuleContext(GQLParser.SourcePredicatePart2Context, 0)

        def destinationPredicatePart2(self):
            return self.getTypedRuleContext(
                GQLParser.DestinationPredicatePart2Context, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_sourceDestinationPredicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSourceDestinationPredicate"):
                listener.enterSourceDestinationPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSourceDestinationPredicate"):
                listener.exitSourceDestinationPredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSourceDestinationPredicate"):
                return visitor.visitSourceDestinationPredicate(self)
            else:
                return visitor.visitChildren(self)

    def sourceDestinationPredicate(self):
        localctx = GQLParser.SourceDestinationPredicateContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 802, self.RULE_sourceDestinationPredicate)
        try:
            self.state = 3744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 426, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3738
                self.nodeReference()
                self.state = 3739
                self.sourcePredicatePart2()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3741
                self.nodeReference()
                self.state = 3742
                self.destinationPredicatePart2()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.ElementVariableReferenceContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_nodeReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodeReference"):
                listener.enterNodeReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodeReference"):
                listener.exitNodeReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodeReference"):
                return visitor.visitNodeReference(self)
            else:
                return visitor.visitChildren(self)

    def nodeReference(self):
        localctx = GQLParser.NodeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_nodeReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3746
            self.elementVariableReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SourcePredicatePart2Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(GQLParser.IS, 0)

        def SOURCE(self):
            return self.getToken(GQLParser.SOURCE, 0)

        def OF(self):
            return self.getToken(GQLParser.OF, 0)

        def edgeReference(self):
            return self.getTypedRuleContext(GQLParser.EdgeReferenceContext, 0)

        def NOT(self):
            return self.getToken(GQLParser.NOT, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_sourcePredicatePart2

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSourcePredicatePart2"):
                listener.enterSourcePredicatePart2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSourcePredicatePart2"):
                listener.exitSourcePredicatePart2(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSourcePredicatePart2"):
                return visitor.visitSourcePredicatePart2(self)
            else:
                return visitor.visitChildren(self)

    def sourcePredicatePart2(self):
        localctx = GQLParser.SourcePredicatePart2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_sourcePredicatePart2)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3748
            self.match(GQLParser.IS)
            self.state = 3750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 152:
                self.state = 3749
                self.match(GQLParser.NOT)

            self.state = 3752
            self.match(GQLParser.SOURCE)
            self.state = 3753
            self.match(GQLParser.OF)
            self.state = 3754
            self.edgeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DestinationPredicatePart2Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(GQLParser.IS, 0)

        def DESTINATION(self):
            return self.getToken(GQLParser.DESTINATION, 0)

        def OF(self):
            return self.getToken(GQLParser.OF, 0)

        def edgeReference(self):
            return self.getTypedRuleContext(GQLParser.EdgeReferenceContext, 0)

        def NOT(self):
            return self.getToken(GQLParser.NOT, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_destinationPredicatePart2

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDestinationPredicatePart2"):
                listener.enterDestinationPredicatePart2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDestinationPredicatePart2"):
                listener.exitDestinationPredicatePart2(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDestinationPredicatePart2"):
                return visitor.visitDestinationPredicatePart2(self)
            else:
                return visitor.visitChildren(self)

    def destinationPredicatePart2(self):
        localctx = GQLParser.DestinationPredicatePart2Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 808, self.RULE_destinationPredicatePart2)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3756
            self.match(GQLParser.IS)
            self.state = 3758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 152:
                self.state = 3757
                self.match(GQLParser.NOT)

            self.state = 3760
            self.match(GQLParser.DESTINATION)
            self.state = 3761
            self.match(GQLParser.OF)
            self.state = 3762
            self.edgeReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.ElementVariableReferenceContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_edgeReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeReference"):
                listener.enterEdgeReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeReference"):
                listener.exitEdgeReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeReference"):
                return visitor.visitEdgeReference(self)
            else:
                return visitor.visitChildren(self)

    def edgeReference(self):
        localctx = GQLParser.EdgeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_edgeReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3764
            self.elementVariableReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class All_differentPredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL_DIFFERENT(self):
            return self.getToken(GQLParser.ALL_DIFFERENT, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def elementVariableReference(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    GQLParser.ElementVariableReferenceContext
                )
            else:
                return self.getTypedRuleContext(
                    GQLParser.ElementVariableReferenceContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_all_differentPredicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAll_differentPredicate"):
                listener.enterAll_differentPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAll_differentPredicate"):
                listener.exitAll_differentPredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAll_differentPredicate"):
                return visitor.visitAll_differentPredicate(self)
            else:
                return visitor.visitChildren(self)

    def all_differentPredicate(self):
        localctx = GQLParser.All_differentPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_all_differentPredicate)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3766
            self.match(GQLParser.ALL_DIFFERENT)
            self.state = 3767
            self.match(GQLParser.LEFT_PAREN)
            self.state = 3768
            self.elementVariableReference()
            self.state = 3769
            self.match(GQLParser.COMMA)
            self.state = 3770
            self.elementVariableReference()
            self.state = 3775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 3771
                self.match(GQLParser.COMMA)
                self.state = 3772
                self.elementVariableReference()
                self.state = 3777
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3778
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SamePredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAME(self):
            return self.getToken(GQLParser.SAME, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def elementVariableReference(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    GQLParser.ElementVariableReferenceContext
                )
            else:
                return self.getTypedRuleContext(
                    GQLParser.ElementVariableReferenceContext, i
                )

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_samePredicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSamePredicate"):
                listener.enterSamePredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSamePredicate"):
                listener.exitSamePredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSamePredicate"):
                return visitor.visitSamePredicate(self)
            else:
                return visitor.visitChildren(self)

    def samePredicate(self):
        localctx = GQLParser.SamePredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_samePredicate)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3780
            self.match(GQLParser.SAME)
            self.state = 3781
            self.match(GQLParser.LEFT_PAREN)
            self.state = 3782
            self.elementVariableReference()
            self.state = 3783
            self.match(GQLParser.COMMA)
            self.state = 3784
            self.elementVariableReference()
            self.state = 3789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 3785
                self.match(GQLParser.COMMA)
                self.state = 3786
                self.elementVariableReference()
                self.state = 3791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3792
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Property_existsPredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_EXISTS(self):
            return self.getToken(GQLParser.PROPERTY_EXISTS, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def elementVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.ElementVariableReferenceContext, 0
            )

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def propertyName(self):
            return self.getTypedRuleContext(GQLParser.PropertyNameContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_property_existsPredicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProperty_existsPredicate"):
                listener.enterProperty_existsPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProperty_existsPredicate"):
                listener.exitProperty_existsPredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProperty_existsPredicate"):
                return visitor.visitProperty_existsPredicate(self)
            else:
                return visitor.visitChildren(self)

    def property_existsPredicate(self):
        localctx = GQLParser.Property_existsPredicateContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 816, self.RULE_property_existsPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3794
            self.match(GQLParser.PROPERTY_EXISTS)
            self.state = 3795
            self.match(GQLParser.LEFT_PAREN)
            self.state = 3796
            self.elementVariableReference()
            self.state = 3797
            self.match(GQLParser.COMMA)
            self.state = 3798
            self.propertyName()
            self.state = 3799
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return GQLParser.RULE_valueExpression

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ConjunctiveExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(GQLParser.ValueExpressionContext, i)

        def AND(self):
            return self.getToken(GQLParser.AND, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConjunctiveExprAlt"):
                listener.enterConjunctiveExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConjunctiveExprAlt"):
                listener.exitConjunctiveExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConjunctiveExprAlt"):
                return visitor.visitConjunctiveExprAlt(self)
            else:
                return visitor.visitChildren(self)

    class PropertyGraphExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GRAPH(self):
            return self.getToken(GQLParser.GRAPH, 0)

        def graphExpression(self):
            return self.getTypedRuleContext(GQLParser.GraphExpressionContext, 0)

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertyGraphExprAlt"):
                listener.enterPropertyGraphExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertyGraphExprAlt"):
                listener.exitPropertyGraphExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertyGraphExprAlt"):
                return visitor.visitPropertyGraphExprAlt(self)
            else:
                return visitor.visitChildren(self)

    class MultDivExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None  # Token
            self.copyFrom(ctx)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(GQLParser.ValueExpressionContext, i)

        def ASTERISK(self):
            return self.getToken(GQLParser.ASTERISK, 0)

        def SOLIDUS(self):
            return self.getToken(GQLParser.SOLIDUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultDivExprAlt"):
                listener.enterMultDivExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultDivExprAlt"):
                listener.exitMultDivExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMultDivExprAlt"):
                return visitor.visitMultDivExprAlt(self)
            else:
                return visitor.visitChildren(self)

    class BindingTableExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(GQLParser.TABLE, 0)

        def bindingTableExpression(self):
            return self.getTypedRuleContext(GQLParser.BindingTableExpressionContext, 0)

        def BINDING(self):
            return self.getToken(GQLParser.BINDING, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBindingTableExprAlt"):
                listener.enterBindingTableExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBindingTableExprAlt"):
                listener.exitBindingTableExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBindingTableExprAlt"):
                return visitor.visitBindingTableExprAlt(self)
            else:
                return visitor.visitChildren(self)

    class SignedExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.sign = None  # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def PLUS_SIGN(self):
            return self.getToken(GQLParser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(GQLParser.MINUS_SIGN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSignedExprAlt"):
                listener.enterSignedExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSignedExprAlt"):
                listener.exitSignedExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSignedExprAlt"):
                return visitor.visitSignedExprAlt(self)
            else:
                return visitor.visitChildren(self)

    class IsNotExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def IS(self):
            return self.getToken(GQLParser.IS, 0)

        def truthValue(self):
            return self.getTypedRuleContext(GQLParser.TruthValueContext, 0)

        def NOT(self):
            return self.getToken(GQLParser.NOT, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIsNotExprAlt"):
                listener.enterIsNotExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIsNotExprAlt"):
                listener.exitIsNotExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIsNotExprAlt"):
                return visitor.visitIsNotExprAlt(self)
            else:
                return visitor.visitChildren(self)

    class NormalizedPredicateExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def normalizedPredicatePart2(self):
            return self.getTypedRuleContext(
                GQLParser.NormalizedPredicatePart2Context, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNormalizedPredicateExprAlt"):
                listener.enterNormalizedPredicateExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNormalizedPredicateExprAlt"):
                listener.exitNormalizedPredicateExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNormalizedPredicateExprAlt"):
                return visitor.visitNormalizedPredicateExprAlt(self)
            else:
                return visitor.visitChildren(self)

    class NotExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(GQLParser.NOT, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNotExprAlt"):
                listener.enterNotExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNotExprAlt"):
                listener.exitNotExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNotExprAlt"):
                return visitor.visitNotExprAlt(self)
            else:
                return visitor.visitChildren(self)

    class ValueFunctionExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueFunction(self):
            return self.getTypedRuleContext(GQLParser.ValueFunctionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValueFunctionExprAlt"):
                listener.enterValueFunctionExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValueFunctionExprAlt"):
                listener.exitValueFunctionExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueFunctionExprAlt"):
                return visitor.visitValueFunctionExprAlt(self)
            else:
                return visitor.visitChildren(self)

    class ConcatenationExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(GQLParser.ValueExpressionContext, i)

        def CONCATENATION_OPERATOR(self):
            return self.getToken(GQLParser.CONCATENATION_OPERATOR, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConcatenationExprAlt"):
                listener.enterConcatenationExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConcatenationExprAlt"):
                listener.exitConcatenationExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConcatenationExprAlt"):
                return visitor.visitConcatenationExprAlt(self)
            else:
                return visitor.visitChildren(self)

    class DisjunctiveExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None  # Token
            self.copyFrom(ctx)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(GQLParser.ValueExpressionContext, i)

        def OR(self):
            return self.getToken(GQLParser.OR, 0)

        def XOR(self):
            return self.getToken(GQLParser.XOR, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDisjunctiveExprAlt"):
                listener.enterDisjunctiveExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDisjunctiveExprAlt"):
                listener.exitDisjunctiveExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDisjunctiveExprAlt"):
                return visitor.visitDisjunctiveExprAlt(self)
            else:
                return visitor.visitChildren(self)

    class ComparisonExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(GQLParser.ValueExpressionContext, i)

        def compOp(self):
            return self.getTypedRuleContext(GQLParser.CompOpContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComparisonExprAlt"):
                listener.enterComparisonExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComparisonExprAlt"):
                listener.exitComparisonExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComparisonExprAlt"):
                return visitor.visitComparisonExprAlt(self)
            else:
                return visitor.visitChildren(self)

    class PrimaryExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpressionPrimary(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionPrimaryContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimaryExprAlt"):
                listener.enterPrimaryExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimaryExprAlt"):
                listener.exitPrimaryExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimaryExprAlt"):
                return visitor.visitPrimaryExprAlt(self)
            else:
                return visitor.visitChildren(self)

    class AddSubtractExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None  # Token
            self.copyFrom(ctx)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(GQLParser.ValueExpressionContext, i)

        def PLUS_SIGN(self):
            return self.getToken(GQLParser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(GQLParser.MINUS_SIGN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAddSubtractExprAlt"):
                listener.enterAddSubtractExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAddSubtractExprAlt"):
                listener.exitAddSubtractExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAddSubtractExprAlt"):
                return visitor.visitAddSubtractExprAlt(self)
            else:
                return visitor.visitChildren(self)

    class PredicateExprAltContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a GQLParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(GQLParser.PredicateContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPredicateExprAlt"):
                listener.enterPredicateExprAlt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPredicateExprAlt"):
                listener.exitPredicateExprAlt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPredicateExprAlt"):
                return visitor.visitPredicateExprAlt(self)
            else:
                return visitor.visitChildren(self)

    def valueExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GQLParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 818
        self.enterRecursionRule(localctx, 818, self.RULE_valueExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 433, self._ctx)
            if la_ == 1:
                localctx = GQLParser.SignedExprAltContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3802
                localctx.sign = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == 372 or _la == 375):
                    localctx.sign = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3803
                self.valueExpression(15)
                pass

            elif la_ == 2:
                localctx = GQLParser.PredicateExprAltContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3804
                self.predicate()
                pass

            elif la_ == 3:
                localctx = GQLParser.NotExprAltContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3805
                self.match(GQLParser.NOT)
                self.state = 3806
                self.valueExpression(8)
                pass

            elif la_ == 4:
                localctx = GQLParser.PropertyGraphExprAltContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 305:
                    self.state = 3807
                    self.match(GQLParser.PROPERTY)

                self.state = 3810
                self.match(GQLParser.GRAPH)
                self.state = 3811
                self.graphExpression()
                pass

            elif la_ == 5:
                localctx = GQLParser.BindingTableExprAltContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 278:
                    self.state = 3812
                    self.match(GQLParser.BINDING)

                self.state = 3815
                self.match(GQLParser.TABLE)
                self.state = 3816
                self.bindingTableExpression()
                pass

            elif la_ == 6:
                localctx = GQLParser.ValueFunctionExprAltContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3817
                self.valueFunction()
                pass

            elif la_ == 7:
                localctx = GQLParser.PrimaryExprAltContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3818
                self.valueExpressionPrimary(0)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 3850
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 436, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3848
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 435, self._ctx)
                    if la_ == 1:
                        localctx = GQLParser.MultDivExprAltContext(
                            self,
                            GQLParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 3821
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 14)"
                            )
                        self.state = 3822
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (_la == 358 or _la == 382):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3823
                        self.valueExpression(15)
                        pass

                    elif la_ == 2:
                        localctx = GQLParser.AddSubtractExprAltContext(
                            self,
                            GQLParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 3824
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 13)"
                            )
                        self.state = 3825
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (_la == 372 or _la == 375):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3826
                        self.valueExpression(14)
                        pass

                    elif la_ == 3:
                        localctx = GQLParser.ConcatenationExprAltContext(
                            self,
                            GQLParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 3827
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 12)"
                            )
                        self.state = 3828
                        self.match(GQLParser.CONCATENATION_OPERATOR)
                        self.state = 3829
                        self.valueExpression(13)
                        pass

                    elif la_ == 4:
                        localctx = GQLParser.ComparisonExprAltContext(
                            self,
                            GQLParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 3830
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 11)"
                            )
                        self.state = 3831
                        self.compOp()
                        self.state = 3832
                        self.valueExpression(12)
                        pass

                    elif la_ == 5:
                        localctx = GQLParser.ConjunctiveExprAltContext(
                            self,
                            GQLParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 3834
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 6)"
                            )
                        self.state = 3835
                        self.match(GQLParser.AND)
                        self.state = 3836
                        self.valueExpression(7)
                        pass

                    elif la_ == 6:
                        localctx = GQLParser.DisjunctiveExprAltContext(
                            self,
                            GQLParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 3837
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 3838
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (_la == 161 or _la == 232):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3839
                        self.valueExpression(6)
                        pass

                    elif la_ == 7:
                        localctx = GQLParser.NormalizedPredicateExprAltContext(
                            self,
                            GQLParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 3840
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 9)"
                            )
                        self.state = 3841
                        self.normalizedPredicatePart2()
                        pass

                    elif la_ == 8:
                        localctx = GQLParser.IsNotExprAltContext(
                            self,
                            GQLParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 3842
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 7)"
                            )
                        self.state = 3843
                        self.match(GQLParser.IS)
                        self.state = 3845
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 152:
                            self.state = 3844
                            self.match(GQLParser.NOT)

                        self.state = 3847
                        self.truthValue()
                        pass

                self.state = 3852
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 436, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ValueFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericValueFunction(self):
            return self.getTypedRuleContext(GQLParser.NumericValueFunctionContext, 0)

        def datetimeSubtraction(self):
            return self.getTypedRuleContext(GQLParser.DatetimeSubtractionContext, 0)

        def datetimeValueFunction(self):
            return self.getTypedRuleContext(GQLParser.DatetimeValueFunctionContext, 0)

        def durationValueFunction(self):
            return self.getTypedRuleContext(GQLParser.DurationValueFunctionContext, 0)

        def characterOrByteStringFunction(self):
            return self.getTypedRuleContext(
                GQLParser.CharacterOrByteStringFunctionContext, 0
            )

        def listValueFunction(self):
            return self.getTypedRuleContext(GQLParser.ListValueFunctionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_valueFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValueFunction"):
                listener.enterValueFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValueFunction"):
                listener.exitValueFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueFunction"):
                return visitor.visitValueFunction(self)
            else:
                return visitor.visitChildren(self)

    def valueFunction(self):
        localctx = GQLParser.ValueFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_valueFunction)
        try:
            self.state = 3859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 437, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3853
                self.numericValueFunction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3854
                self.datetimeSubtraction()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3855
                self.datetimeValueFunction()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3856
                self.durationValueFunction()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3857
                self.characterOrByteStringFunction()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3858
                self.listValueFunction()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_booleanValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBooleanValueExpression"):
                listener.enterBooleanValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBooleanValueExpression"):
                listener.exitBooleanValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBooleanValueExpression"):
                return visitor.visitBooleanValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def booleanValueExpression(self):
        localctx = GQLParser.BooleanValueExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_booleanValueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3861
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharacterOrByteStringFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subCharacterOrByteString(self):
            return self.getTypedRuleContext(
                GQLParser.SubCharacterOrByteStringContext, 0
            )

        def trimSingleCharacterOrByteString(self):
            return self.getTypedRuleContext(
                GQLParser.TrimSingleCharacterOrByteStringContext, 0
            )

        def foldCharacterString(self):
            return self.getTypedRuleContext(GQLParser.FoldCharacterStringContext, 0)

        def trimMultiCharacterCharacterString(self):
            return self.getTypedRuleContext(
                GQLParser.TrimMultiCharacterCharacterStringContext, 0
            )

        def normalizeCharacterString(self):
            return self.getTypedRuleContext(
                GQLParser.NormalizeCharacterStringContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_characterOrByteStringFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCharacterOrByteStringFunction"):
                listener.enterCharacterOrByteStringFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCharacterOrByteStringFunction"):
                listener.exitCharacterOrByteStringFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCharacterOrByteStringFunction"):
                return visitor.visitCharacterOrByteStringFunction(self)
            else:
                return visitor.visitChildren(self)

    def characterOrByteStringFunction(self):
        localctx = GQLParser.CharacterOrByteStringFunctionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 824, self.RULE_characterOrByteStringFunction)
        try:
            self.state = 3868
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [129, 181]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3863
                self.subCharacterOrByteString()
                pass
            elif token in [210]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3864
                self.trimSingleCharacterOrByteString()
                pass
            elif token in [141, 222]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3865
                self.foldCharacterString()
                pass
            elif token in [40, 142, 183]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3866
                self.trimMultiCharacterCharacterString()
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3867
                self.normalizeCharacterString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubCharacterOrByteStringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def stringLength(self):
            return self.getTypedRuleContext(GQLParser.StringLengthContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def LEFT(self):
            return self.getToken(GQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(GQLParser.RIGHT, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_subCharacterOrByteString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubCharacterOrByteString"):
                listener.enterSubCharacterOrByteString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubCharacterOrByteString"):
                listener.exitSubCharacterOrByteString(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubCharacterOrByteString"):
                return visitor.visitSubCharacterOrByteString(self)
            else:
                return visitor.visitChildren(self)

    def subCharacterOrByteString(self):
        localctx = GQLParser.SubCharacterOrByteStringContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 826, self.RULE_subCharacterOrByteString)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3870
            _la = self._input.LA(1)
            if not (_la == 129 or _la == 181):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3871
            self.match(GQLParser.LEFT_PAREN)
            self.state = 3872
            self.valueExpression(0)
            self.state = 3873
            self.match(GQLParser.COMMA)
            self.state = 3874
            self.stringLength()
            self.state = 3875
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrimSingleCharacterOrByteStringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIM(self):
            return self.getToken(GQLParser.TRIM, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def trimOperands(self):
            return self.getTypedRuleContext(GQLParser.TrimOperandsContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_trimSingleCharacterOrByteString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrimSingleCharacterOrByteString"):
                listener.enterTrimSingleCharacterOrByteString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrimSingleCharacterOrByteString"):
                listener.exitTrimSingleCharacterOrByteString(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTrimSingleCharacterOrByteString"):
                return visitor.visitTrimSingleCharacterOrByteString(self)
            else:
                return visitor.visitChildren(self)

    def trimSingleCharacterOrByteString(self):
        localctx = GQLParser.TrimSingleCharacterOrByteStringContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 828, self.RULE_trimSingleCharacterOrByteString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3877
            self.match(GQLParser.TRIM)
            self.state = 3878
            self.match(GQLParser.LEFT_PAREN)
            self.state = 3879
            self.trimOperands()
            self.state = 3880
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FoldCharacterStringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def UPPER(self):
            return self.getToken(GQLParser.UPPER, 0)

        def LOWER(self):
            return self.getToken(GQLParser.LOWER, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_foldCharacterString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFoldCharacterString"):
                listener.enterFoldCharacterString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFoldCharacterString"):
                listener.exitFoldCharacterString(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFoldCharacterString"):
                return visitor.visitFoldCharacterString(self)
            else:
                return visitor.visitChildren(self)

    def foldCharacterString(self):
        localctx = GQLParser.FoldCharacterStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_foldCharacterString)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3882
            _la = self._input.LA(1)
            if not (_la == 141 or _la == 222):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3883
            self.match(GQLParser.LEFT_PAREN)
            self.state = 3884
            self.valueExpression(0)
            self.state = 3885
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrimMultiCharacterCharacterStringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(GQLParser.ValueExpressionContext, i)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def BTRIM(self):
            return self.getToken(GQLParser.BTRIM, 0)

        def LTRIM(self):
            return self.getToken(GQLParser.LTRIM, 0)

        def RTRIM(self):
            return self.getToken(GQLParser.RTRIM, 0)

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_trimMultiCharacterCharacterString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrimMultiCharacterCharacterString"):
                listener.enterTrimMultiCharacterCharacterString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrimMultiCharacterCharacterString"):
                listener.exitTrimMultiCharacterCharacterString(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTrimMultiCharacterCharacterString"):
                return visitor.visitTrimMultiCharacterCharacterString(self)
            else:
                return visitor.visitChildren(self)

    def trimMultiCharacterCharacterString(self):
        localctx = GQLParser.TrimMultiCharacterCharacterStringContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 832, self.RULE_trimMultiCharacterCharacterString)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3887
            _la = self._input.LA(1)
            if not (_la == 40 or _la == 142 or _la == 183):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3888
            self.match(GQLParser.LEFT_PAREN)
            self.state = 3889
            self.valueExpression(0)
            self.state = 3892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 360:
                self.state = 3890
                self.match(GQLParser.COMMA)
                self.state = 3891
                self.valueExpression(0)

            self.state = 3894
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NormalizeCharacterStringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NORMALIZE(self):
            return self.getToken(GQLParser.NORMALIZE, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def normalForm(self):
            return self.getTypedRuleContext(GQLParser.NormalFormContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_normalizeCharacterString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNormalizeCharacterString"):
                listener.enterNormalizeCharacterString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNormalizeCharacterString"):
                listener.exitNormalizeCharacterString(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNormalizeCharacterString"):
                return visitor.visitNormalizeCharacterString(self)
            else:
                return visitor.visitChildren(self)

    def normalizeCharacterString(self):
        localctx = GQLParser.NormalizeCharacterStringContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 834, self.RULE_normalizeCharacterString)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3896
            self.match(GQLParser.NORMALIZE)
            self.state = 3897
            self.match(GQLParser.LEFT_PAREN)
            self.state = 3898
            self.valueExpression(0)
            self.state = 3901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 360:
                self.state = 3899
                self.match(GQLParser.COMMA)
                self.state = 3900
                self.normalForm()

            self.state = 3903
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeReferenceValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpressionPrimary(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionPrimaryContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nodeReferenceValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodeReferenceValueExpression"):
                listener.enterNodeReferenceValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodeReferenceValueExpression"):
                listener.exitNodeReferenceValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodeReferenceValueExpression"):
                return visitor.visitNodeReferenceValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def nodeReferenceValueExpression(self):
        localctx = GQLParser.NodeReferenceValueExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 836, self.RULE_nodeReferenceValueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3905
            self.valueExpressionPrimary(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeReferenceValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpressionPrimary(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionPrimaryContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgeReferenceValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeReferenceValueExpression"):
                listener.enterEdgeReferenceValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeReferenceValueExpression"):
                listener.exitEdgeReferenceValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeReferenceValueExpression"):
                return visitor.visitEdgeReferenceValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def edgeReferenceValueExpression(self):
        localctx = GQLParser.EdgeReferenceValueExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 838, self.RULE_edgeReferenceValueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3907
            self.valueExpressionPrimary(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggregatingValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_aggregatingValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAggregatingValueExpression"):
                listener.enterAggregatingValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAggregatingValueExpression"):
                listener.exitAggregatingValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAggregatingValueExpression"):
                return visitor.visitAggregatingValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def aggregatingValueExpression(self):
        localctx = GQLParser.AggregatingValueExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 840, self.RULE_aggregatingValueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3909
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueExpressionPrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedValueExpression(self):
            return self.getTypedRuleContext(
                GQLParser.ParenthesizedValueExpressionContext, 0
            )

        def aggregateFunction(self):
            return self.getTypedRuleContext(GQLParser.AggregateFunctionContext, 0)

        def unsignedValueSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.UnsignedValueSpecificationContext, 0
            )

        def pathValueConstructor(self):
            return self.getTypedRuleContext(GQLParser.PathValueConstructorContext, 0)

        def valueQueryExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueQueryExpressionContext, 0)

        def caseExpression(self):
            return self.getTypedRuleContext(GQLParser.CaseExpressionContext, 0)

        def castSpecification(self):
            return self.getTypedRuleContext(GQLParser.CastSpecificationContext, 0)

        def element_idFunction(self):
            return self.getTypedRuleContext(GQLParser.Element_idFunctionContext, 0)

        def letValueExpression(self):
            return self.getTypedRuleContext(GQLParser.LetValueExpressionContext, 0)

        def bindingVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.BindingVariableReferenceContext, 0
            )

        def valueExpressionPrimary(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionPrimaryContext, 0)

        def PERIOD(self):
            return self.getToken(GQLParser.PERIOD, 0)

        def propertyName(self):
            return self.getTypedRuleContext(GQLParser.PropertyNameContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_valueExpressionPrimary

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValueExpressionPrimary"):
                listener.enterValueExpressionPrimary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValueExpressionPrimary"):
                listener.exitValueExpressionPrimary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueExpressionPrimary"):
                return visitor.visitValueExpressionPrimary(self)
            else:
                return visitor.visitChildren(self)

    def valueExpressionPrimary(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GQLParser.ValueExpressionPrimaryContext(
            self, self._ctx, _parentState
        )
        _prevctx = localctx
        _startState = 842
        self.enterRecursionRule(localctx, 842, self.RULE_valueExpressionPrimary, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [370]:
                self.state = 3912
                self.parenthesizedValueExpression()
                pass
            elif token in [33, 56, 62, 144, 145, 169, 170, 200, 201, 203]:
                self.state = 3913
                self.aggregateFunction()
                pass
            elif token in [
                2,
                3,
                4,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                26,
                70,
                71,
                83,
                133,
                154,
                176,
                189,
                207,
                208,
                326,
                368,
                369,
            ]:
                self.state = 3914
                self.unsignedValueSpecification()
                pass
            elif token in [166]:
                self.state = 3915
                self.pathValueConstructor()
                pass
            elif token in [225]:
                self.state = 3916
                self.valueQueryExpression()
                pass
            elif token in [46, 55, 156]:
                self.state = 3917
                self.caseExpression()
                pass
            elif token in [47]:
                self.state = 3918
                self.castSpecification()
                pass
            elif token in [85]:
                self.state = 3919
                self.element_idFunction()
                pass
            elif token in [130]:
                self.state = 3920
                self.letValueExpression()
                pass
            elif token in [
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
            ]:
                self.state = 3921
                self.bindingVariableReference()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 3929
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 442, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = GQLParser.ValueExpressionPrimaryContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_valueExpressionPrimary
                    )
                    self.state = 3924
                    if not self.precpred(self._ctx, 7):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 7)"
                        )
                    self.state = 3925
                    self.match(GQLParser.PERIOD)
                    self.state = 3926
                    self.propertyName()
                self.state = 3931
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 442, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParenthesizedValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_parenthesizedValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParenthesizedValueExpression"):
                listener.enterParenthesizedValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParenthesizedValueExpression"):
                listener.exitParenthesizedValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParenthesizedValueExpression"):
                return visitor.visitParenthesizedValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def parenthesizedValueExpression(self):
        localctx = GQLParser.ParenthesizedValueExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 844, self.RULE_parenthesizedValueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3932
            self.match(GQLParser.LEFT_PAREN)
            self.state = 3933
            self.valueExpression(0)
            self.state = 3934
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonParenthesizedValueExpressionPrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonParenthesizedValueExpressionPrimarySpecialCase(self):
            return self.getTypedRuleContext(
                GQLParser.NonParenthesizedValueExpressionPrimarySpecialCaseContext, 0
            )

        def bindingVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.BindingVariableReferenceContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_nonParenthesizedValueExpressionPrimary

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNonParenthesizedValueExpressionPrimary"):
                listener.enterNonParenthesizedValueExpressionPrimary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNonParenthesizedValueExpressionPrimary"):
                listener.exitNonParenthesizedValueExpressionPrimary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonParenthesizedValueExpressionPrimary"):
                return visitor.visitNonParenthesizedValueExpressionPrimary(self)
            else:
                return visitor.visitChildren(self)

    def nonParenthesizedValueExpressionPrimary(self):
        localctx = GQLParser.NonParenthesizedValueExpressionPrimaryContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 846, self.RULE_nonParenthesizedValueExpressionPrimary)
        try:
            self.state = 3938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 443, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3936
                self.nonParenthesizedValueExpressionPrimarySpecialCase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3937
                self.bindingVariableReference()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonParenthesizedValueExpressionPrimarySpecialCaseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregateFunction(self):
            return self.getTypedRuleContext(GQLParser.AggregateFunctionContext, 0)

        def unsignedValueSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.UnsignedValueSpecificationContext, 0
            )

        def pathValueConstructor(self):
            return self.getTypedRuleContext(GQLParser.PathValueConstructorContext, 0)

        def valueExpressionPrimary(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionPrimaryContext, 0)

        def PERIOD(self):
            return self.getToken(GQLParser.PERIOD, 0)

        def propertyName(self):
            return self.getTypedRuleContext(GQLParser.PropertyNameContext, 0)

        def valueQueryExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueQueryExpressionContext, 0)

        def caseExpression(self):
            return self.getTypedRuleContext(GQLParser.CaseExpressionContext, 0)

        def castSpecification(self):
            return self.getTypedRuleContext(GQLParser.CastSpecificationContext, 0)

        def element_idFunction(self):
            return self.getTypedRuleContext(GQLParser.Element_idFunctionContext, 0)

        def letValueExpression(self):
            return self.getTypedRuleContext(GQLParser.LetValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nonParenthesizedValueExpressionPrimarySpecialCase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(
                listener, "enterNonParenthesizedValueExpressionPrimarySpecialCase"
            ):
                listener.enterNonParenthesizedValueExpressionPrimarySpecialCase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(
                listener, "exitNonParenthesizedValueExpressionPrimarySpecialCase"
            ):
                listener.exitNonParenthesizedValueExpressionPrimarySpecialCase(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(
                visitor, "visitNonParenthesizedValueExpressionPrimarySpecialCase"
            ):
                return visitor.visitNonParenthesizedValueExpressionPrimarySpecialCase(
                    self
                )
            else:
                return visitor.visitChildren(self)

    def nonParenthesizedValueExpressionPrimarySpecialCase(self):
        localctx = GQLParser.NonParenthesizedValueExpressionPrimarySpecialCaseContext(
            self, self._ctx, self.state
        )
        self.enterRule(
            localctx, 848, self.RULE_nonParenthesizedValueExpressionPrimarySpecialCase
        )
        try:
            self.state = 3952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 444, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3940
                self.aggregateFunction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3941
                self.unsignedValueSpecification()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3942
                self.pathValueConstructor()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3943
                self.valueExpressionPrimary(0)
                self.state = 3944
                self.match(GQLParser.PERIOD)
                self.state = 3945
                self.propertyName()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3947
                self.valueQueryExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3948
                self.caseExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3949
                self.castSpecification()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3950
                self.element_idFunction()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3951
                self.letValueExpression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnsignedValueSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedLiteral(self):
            return self.getTypedRuleContext(GQLParser.UnsignedLiteralContext, 0)

        def generalValueSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.GeneralValueSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_unsignedValueSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnsignedValueSpecification"):
                listener.enterUnsignedValueSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnsignedValueSpecification"):
                listener.exitUnsignedValueSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnsignedValueSpecification"):
                return visitor.visitUnsignedValueSpecification(self)
            else:
                return visitor.visitChildren(self)

    def unsignedValueSpecification(self):
        localctx = GQLParser.UnsignedValueSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 850, self.RULE_unsignedValueSpecification)
        try:
            self.state = 3956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                2,
                3,
                4,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                26,
                70,
                71,
                83,
                133,
                154,
                176,
                207,
                208,
                368,
                369,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3954
                self.unsignedLiteral()
                pass
            elif token in [189, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3955
                self.generalValueSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonNegativeIntegerSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedInteger(self):
            return self.getTypedRuleContext(GQLParser.UnsignedIntegerContext, 0)

        def dynamicParameterSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.DynamicParameterSpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_nonNegativeIntegerSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNonNegativeIntegerSpecification"):
                listener.enterNonNegativeIntegerSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNonNegativeIntegerSpecification"):
                listener.exitNonNegativeIntegerSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonNegativeIntegerSpecification"):
                return visitor.visitNonNegativeIntegerSpecification(self)
            else:
                return visitor.visitChildren(self)

    def nonNegativeIntegerSpecification(self):
        localctx = GQLParser.NonNegativeIntegerSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 852, self.RULE_nonNegativeIntegerSpecification)
        try:
            self.state = 3960
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16, 17, 18, 19]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3958
                self.unsignedInteger()
                pass
            elif token in [326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3959
                self.dynamicParameterSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralValueSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicParameterSpecification(self):
            return self.getTypedRuleContext(
                GQLParser.DynamicParameterSpecificationContext, 0
            )

        def SESSION_USER(self):
            return self.getToken(GQLParser.SESSION_USER, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_generalValueSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGeneralValueSpecification"):
                listener.enterGeneralValueSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGeneralValueSpecification"):
                listener.exitGeneralValueSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGeneralValueSpecification"):
                return visitor.visitGeneralValueSpecification(self)
            else:
                return visitor.visitChildren(self)

    def generalValueSpecification(self):
        localctx = GQLParser.GeneralValueSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 854, self.RULE_generalValueSpecification)
        try:
            self.state = 3964
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [326]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3962
                self.dynamicParameterSpecification()
                pass
            elif token in [189]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3963
                self.match(GQLParser.SESSION_USER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DynamicParameterSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERAL_PARAMETER_REFERENCE(self):
            return self.getToken(GQLParser.GENERAL_PARAMETER_REFERENCE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_dynamicParameterSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDynamicParameterSpecification"):
                listener.enterDynamicParameterSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDynamicParameterSpecification"):
                listener.exitDynamicParameterSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDynamicParameterSpecification"):
                return visitor.visitDynamicParameterSpecification(self)
            else:
                return visitor.visitChildren(self)

    def dynamicParameterSpecification(self):
        localctx = GQLParser.DynamicParameterSpecificationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 856, self.RULE_dynamicParameterSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3966
            self.match(GQLParser.GENERAL_PARAMETER_REFERENCE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LetValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(GQLParser.LET, 0)

        def letVariableDefinitionList(self):
            return self.getTypedRuleContext(
                GQLParser.LetVariableDefinitionListContext, 0
            )

        def IN(self):
            return self.getToken(GQLParser.IN, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def END(self):
            return self.getToken(GQLParser.END, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_letValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLetValueExpression"):
                listener.enterLetValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLetValueExpression"):
                listener.exitLetValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLetValueExpression"):
                return visitor.visitLetValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def letValueExpression(self):
        localctx = GQLParser.LetValueExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_letValueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3968
            self.match(GQLParser.LET)
            self.state = 3969
            self.letVariableDefinitionList()
            self.state = 3970
            self.match(GQLParser.IN)
            self.state = 3971
            self.valueExpression(0)
            self.state = 3972
            self.match(GQLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueQueryExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUE(self):
            return self.getToken(GQLParser.VALUE, 0)

        def nestedQuerySpecification(self):
            return self.getTypedRuleContext(
                GQLParser.NestedQuerySpecificationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_valueQueryExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValueQueryExpression"):
                listener.enterValueQueryExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValueQueryExpression"):
                listener.exitValueQueryExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueQueryExpression"):
                return visitor.visitValueQueryExpression(self)
            else:
                return visitor.visitChildren(self)

    def valueQueryExpression(self):
        localctx = GQLParser.ValueQueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_valueQueryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3974
            self.match(GQLParser.VALUE)
            self.state = 3975
            self.nestedQuerySpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseAbbreviation(self):
            return self.getTypedRuleContext(GQLParser.CaseAbbreviationContext, 0)

        def caseSpecification(self):
            return self.getTypedRuleContext(GQLParser.CaseSpecificationContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_caseExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCaseExpression"):
                listener.enterCaseExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCaseExpression"):
                listener.exitCaseExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCaseExpression"):
                return visitor.visitCaseExpression(self)
            else:
                return visitor.visitChildren(self)

    def caseExpression(self):
        localctx = GQLParser.CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_caseExpression)
        try:
            self.state = 3979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55, 156]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3977
                self.caseAbbreviation()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3978
                self.caseSpecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseAbbreviationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLIF(self):
            return self.getToken(GQLParser.NULLIF, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(GQLParser.ValueExpressionContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def COALESCE(self):
            return self.getToken(GQLParser.COALESCE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_caseAbbreviation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCaseAbbreviation"):
                listener.enterCaseAbbreviation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCaseAbbreviation"):
                listener.exitCaseAbbreviation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCaseAbbreviation"):
                return visitor.visitCaseAbbreviation(self)
            else:
                return visitor.visitChildren(self)

    def caseAbbreviation(self):
        localctx = GQLParser.CaseAbbreviationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_caseAbbreviation)
        self._la = 0  # Token type
        try:
            self.state = 3999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [156]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3981
                self.match(GQLParser.NULLIF)
                self.state = 3982
                self.match(GQLParser.LEFT_PAREN)
                self.state = 3983
                self.valueExpression(0)
                self.state = 3984
                self.match(GQLParser.COMMA)
                self.state = 3985
                self.valueExpression(0)
                self.state = 3986
                self.match(GQLParser.RIGHT_PAREN)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3988
                self.match(GQLParser.COALESCE)
                self.state = 3989
                self.match(GQLParser.LEFT_PAREN)
                self.state = 3990
                self.valueExpression(0)
                self.state = 3993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3991
                    self.match(GQLParser.COMMA)
                    self.state = 3992
                    self.valueExpression(0)
                    self.state = 3995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == 360):
                        break

                self.state = 3997
                self.match(GQLParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCase(self):
            return self.getTypedRuleContext(GQLParser.SimpleCaseContext, 0)

        def searchedCase(self):
            return self.getTypedRuleContext(GQLParser.SearchedCaseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_caseSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCaseSpecification"):
                listener.enterCaseSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCaseSpecification"):
                listener.exitCaseSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCaseSpecification"):
                return visitor.visitCaseSpecification(self)
            else:
                return visitor.visitChildren(self)

    def caseSpecification(self):
        localctx = GQLParser.CaseSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_caseSpecification)
        try:
            self.state = 4003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 451, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4001
                self.simpleCase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4002
                self.searchedCase()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleCaseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(GQLParser.CASE, 0)

        def caseOperand(self):
            return self.getTypedRuleContext(GQLParser.CaseOperandContext, 0)

        def END(self):
            return self.getToken(GQLParser.END, 0)

        def simpleWhenClause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.SimpleWhenClauseContext)
            else:
                return self.getTypedRuleContext(GQLParser.SimpleWhenClauseContext, i)

        def elseClause(self):
            return self.getTypedRuleContext(GQLParser.ElseClauseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simpleCase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpleCase"):
                listener.enterSimpleCase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpleCase"):
                listener.exitSimpleCase(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimpleCase"):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)

    def simpleCase(self):
        localctx = GQLParser.SimpleCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_simpleCase)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4005
            self.match(GQLParser.CASE)
            self.state = 4006
            self.caseOperand()
            self.state = 4008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4007
                self.simpleWhenClause()
                self.state = 4010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 229):
                    break

            self.state = 4013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 86:
                self.state = 4012
                self.elseClause()

            self.state = 4015
            self.match(GQLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SearchedCaseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(GQLParser.CASE, 0)

        def END(self):
            return self.getToken(GQLParser.END, 0)

        def searchedWhenClause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.SearchedWhenClauseContext)
            else:
                return self.getTypedRuleContext(GQLParser.SearchedWhenClauseContext, i)

        def elseClause(self):
            return self.getTypedRuleContext(GQLParser.ElseClauseContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_searchedCase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSearchedCase"):
                listener.enterSearchedCase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSearchedCase"):
                listener.exitSearchedCase(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSearchedCase"):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)

    def searchedCase(self):
        localctx = GQLParser.SearchedCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_searchedCase)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4017
            self.match(GQLParser.CASE)
            self.state = 4019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4018
                self.searchedWhenClause()
                self.state = 4021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 229):
                    break

            self.state = 4024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 86:
                self.state = 4023
                self.elseClause()

            self.state = 4026
            self.match(GQLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleWhenClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(GQLParser.WHEN, 0)

        def whenOperandList(self):
            return self.getTypedRuleContext(GQLParser.WhenOperandListContext, 0)

        def THEN(self):
            return self.getToken(GQLParser.THEN, 0)

        def result(self):
            return self.getTypedRuleContext(GQLParser.ResultContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_simpleWhenClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpleWhenClause"):
                listener.enterSimpleWhenClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpleWhenClause"):
                listener.exitSimpleWhenClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimpleWhenClause"):
                return visitor.visitSimpleWhenClause(self)
            else:
                return visitor.visitChildren(self)

    def simpleWhenClause(self):
        localctx = GQLParser.SimpleWhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_simpleWhenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4028
            self.match(GQLParser.WHEN)
            self.state = 4029
            self.whenOperandList()
            self.state = 4030
            self.match(GQLParser.THEN)
            self.state = 4031
            self.result()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SearchedWhenClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(GQLParser.WHEN, 0)

        def searchCondition(self):
            return self.getTypedRuleContext(GQLParser.SearchConditionContext, 0)

        def THEN(self):
            return self.getToken(GQLParser.THEN, 0)

        def result(self):
            return self.getTypedRuleContext(GQLParser.ResultContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_searchedWhenClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSearchedWhenClause"):
                listener.enterSearchedWhenClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSearchedWhenClause"):
                listener.exitSearchedWhenClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSearchedWhenClause"):
                return visitor.visitSearchedWhenClause(self)
            else:
                return visitor.visitChildren(self)

    def searchedWhenClause(self):
        localctx = GQLParser.SearchedWhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_searchedWhenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4033
            self.match(GQLParser.WHEN)
            self.state = 4034
            self.searchCondition()
            self.state = 4035
            self.match(GQLParser.THEN)
            self.state = 4036
            self.result()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(GQLParser.ELSE, 0)

        def result(self):
            return self.getTypedRuleContext(GQLParser.ResultContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_elseClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElseClause"):
                listener.enterElseClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElseClause"):
                listener.exitElseClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElseClause"):
                return visitor.visitElseClause(self)
            else:
                return visitor.visitChildren(self)

    def elseClause(self):
        localctx = GQLParser.ElseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_elseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4038
            self.match(GQLParser.ELSE)
            self.state = 4039
            self.result()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseOperandContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonParenthesizedValueExpressionPrimary(self):
            return self.getTypedRuleContext(
                GQLParser.NonParenthesizedValueExpressionPrimaryContext, 0
            )

        def elementVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.ElementVariableReferenceContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_caseOperand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCaseOperand"):
                listener.enterCaseOperand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCaseOperand"):
                listener.exitCaseOperand(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCaseOperand"):
                return visitor.visitCaseOperand(self)
            else:
                return visitor.visitChildren(self)

    def caseOperand(self):
        localctx = GQLParser.CaseOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_caseOperand)
        try:
            self.state = 4043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 456, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4041
                self.nonParenthesizedValueExpressionPrimary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4042
                self.elementVariableReference()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenOperandListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenOperand(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.WhenOperandContext)
            else:
                return self.getTypedRuleContext(GQLParser.WhenOperandContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_whenOperandList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhenOperandList"):
                listener.enterWhenOperandList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhenOperandList"):
                listener.exitWhenOperandList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhenOperandList"):
                return visitor.visitWhenOperandList(self)
            else:
                return visitor.visitChildren(self)

    def whenOperandList(self):
        localctx = GQLParser.WhenOperandListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_whenOperandList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4045
            self.whenOperand()
            self.state = 4050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 4046
                self.match(GQLParser.COMMA)
                self.state = 4047
                self.whenOperand()
                self.state = 4052
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenOperandContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonParenthesizedValueExpressionPrimary(self):
            return self.getTypedRuleContext(
                GQLParser.NonParenthesizedValueExpressionPrimaryContext, 0
            )

        def compOp(self):
            return self.getTypedRuleContext(GQLParser.CompOpContext, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def nullPredicatePart2(self):
            return self.getTypedRuleContext(GQLParser.NullPredicatePart2Context, 0)

        def valueTypePredicatePart2(self):
            return self.getTypedRuleContext(GQLParser.ValueTypePredicatePart2Context, 0)

        def normalizedPredicatePart2(self):
            return self.getTypedRuleContext(
                GQLParser.NormalizedPredicatePart2Context, 0
            )

        def directedPredicatePart2(self):
            return self.getTypedRuleContext(GQLParser.DirectedPredicatePart2Context, 0)

        def labeledPredicatePart2(self):
            return self.getTypedRuleContext(GQLParser.LabeledPredicatePart2Context, 0)

        def sourcePredicatePart2(self):
            return self.getTypedRuleContext(GQLParser.SourcePredicatePart2Context, 0)

        def destinationPredicatePart2(self):
            return self.getTypedRuleContext(
                GQLParser.DestinationPredicatePart2Context, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_whenOperand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhenOperand"):
                listener.enterWhenOperand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhenOperand"):
                listener.exitWhenOperand(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhenOperand"):
                return visitor.visitWhenOperand(self)
            else:
                return visitor.visitChildren(self)

    def whenOperand(self):
        localctx = GQLParser.WhenOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_whenOperand)
        try:
            self.state = 4064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 458, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4053
                self.nonParenthesizedValueExpressionPrimary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4054
                self.compOp()
                self.state = 4055
                self.valueExpression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4057
                self.nullPredicatePart2()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4058
                self.valueTypePredicatePart2()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4059
                self.normalizedPredicatePart2()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4060
                self.directedPredicatePart2()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4061
                self.labeledPredicatePart2()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4062
                self.sourcePredicatePart2()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4063
                self.destinationPredicatePart2()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resultExpression(self):
            return self.getTypedRuleContext(GQLParser.ResultExpressionContext, 0)

        def nullLiteral(self):
            return self.getTypedRuleContext(GQLParser.NullLiteralContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_result

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterResult"):
                listener.enterResult(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitResult"):
                listener.exitResult(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitResult"):
                return visitor.visitResult(self)
            else:
                return visitor.visitChildren(self)

    def result(self):
        localctx = GQLParser.ResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_result)
        try:
            self.state = 4068
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 459, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4066
                self.resultExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4067
                self.nullLiteral()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResultExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_resultExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterResultExpression"):
                listener.enterResultExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitResultExpression"):
                listener.exitResultExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitResultExpression"):
                return visitor.visitResultExpression(self)
            else:
                return visitor.visitChildren(self)

    def resultExpression(self):
        localctx = GQLParser.ResultExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_resultExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4070
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAST(self):
            return self.getToken(GQLParser.CAST, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def castOperand(self):
            return self.getTypedRuleContext(GQLParser.CastOperandContext, 0)

        def AS(self):
            return self.getToken(GQLParser.AS, 0)

        def castTarget(self):
            return self.getTypedRuleContext(GQLParser.CastTargetContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_castSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCastSpecification"):
                listener.enterCastSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCastSpecification"):
                listener.exitCastSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCastSpecification"):
                return visitor.visitCastSpecification(self)
            else:
                return visitor.visitChildren(self)

    def castSpecification(self):
        localctx = GQLParser.CastSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_castSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4072
            self.match(GQLParser.CAST)
            self.state = 4073
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4074
            self.castOperand()
            self.state = 4075
            self.match(GQLParser.AS)
            self.state = 4076
            self.castTarget()
            self.state = 4077
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastOperandContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def nullLiteral(self):
            return self.getTypedRuleContext(GQLParser.NullLiteralContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_castOperand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCastOperand"):
                listener.enterCastOperand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCastOperand"):
                listener.exitCastOperand(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCastOperand"):
                return visitor.visitCastOperand(self)
            else:
                return visitor.visitChildren(self)

    def castOperand(self):
        localctx = GQLParser.CastOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_castOperand)
        try:
            self.state = 4081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 460, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4079
                self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4080
                self.nullLiteral()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastTargetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueType(self):
            return self.getTypedRuleContext(GQLParser.ValueTypeContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_castTarget

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCastTarget"):
                listener.enterCastTarget(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCastTarget"):
                listener.exitCastTarget(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCastTarget"):
                return visitor.visitCastTarget(self)
            else:
                return visitor.visitChildren(self)

    def castTarget(self):
        localctx = GQLParser.CastTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_castTarget)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4083
            self.valueType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggregateFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(GQLParser.COUNT, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def ASTERISK(self):
            return self.getToken(GQLParser.ASTERISK, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def generalSetFunction(self):
            return self.getTypedRuleContext(GQLParser.GeneralSetFunctionContext, 0)

        def binarySetFunction(self):
            return self.getTypedRuleContext(GQLParser.BinarySetFunctionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_aggregateFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAggregateFunction"):
                listener.enterAggregateFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAggregateFunction"):
                listener.exitAggregateFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAggregateFunction"):
                return visitor.visitAggregateFunction(self)
            else:
                return visitor.visitChildren(self)

    def aggregateFunction(self):
        localctx = GQLParser.AggregateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_aggregateFunction)
        try:
            self.state = 4091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 461, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4085
                self.match(GQLParser.COUNT)
                self.state = 4086
                self.match(GQLParser.LEFT_PAREN)
                self.state = 4087
                self.match(GQLParser.ASTERISK)
                self.state = 4088
                self.match(GQLParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4089
                self.generalSetFunction()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4090
                self.binarySetFunction()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralSetFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalSetFunctionType(self):
            return self.getTypedRuleContext(GQLParser.GeneralSetFunctionTypeContext, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def setQuantifier(self):
            return self.getTypedRuleContext(GQLParser.SetQuantifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_generalSetFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGeneralSetFunction"):
                listener.enterGeneralSetFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGeneralSetFunction"):
                listener.exitGeneralSetFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGeneralSetFunction"):
                return visitor.visitGeneralSetFunction(self)
            else:
                return visitor.visitChildren(self)

    def generalSetFunction(self):
        localctx = GQLParser.GeneralSetFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_generalSetFunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4093
            self.generalSetFunctionType()
            self.state = 4094
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 22 or _la == 80:
                self.state = 4095
                self.setQuantifier()

            self.state = 4098
            self.valueExpression(0)
            self.state = 4099
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinarySetFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binarySetFunctionType(self):
            return self.getTypedRuleContext(GQLParser.BinarySetFunctionTypeContext, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def dependentValueExpression(self):
            return self.getTypedRuleContext(
                GQLParser.DependentValueExpressionContext, 0
            )

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def independentValueExpression(self):
            return self.getTypedRuleContext(
                GQLParser.IndependentValueExpressionContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_binarySetFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBinarySetFunction"):
                listener.enterBinarySetFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBinarySetFunction"):
                listener.exitBinarySetFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBinarySetFunction"):
                return visitor.visitBinarySetFunction(self)
            else:
                return visitor.visitChildren(self)

    def binarySetFunction(self):
        localctx = GQLParser.BinarySetFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_binarySetFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4101
            self.binarySetFunctionType()
            self.state = 4102
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4103
            self.dependentValueExpression()
            self.state = 4104
            self.match(GQLParser.COMMA)
            self.state = 4105
            self.independentValueExpression()
            self.state = 4106
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralSetFunctionTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(GQLParser.AVG, 0)

        def COUNT(self):
            return self.getToken(GQLParser.COUNT, 0)

        def MAX(self):
            return self.getToken(GQLParser.MAX, 0)

        def MIN(self):
            return self.getToken(GQLParser.MIN, 0)

        def SUM(self):
            return self.getToken(GQLParser.SUM, 0)

        def COLLECT_LIST(self):
            return self.getToken(GQLParser.COLLECT_LIST, 0)

        def STDDEV_SAMP(self):
            return self.getToken(GQLParser.STDDEV_SAMP, 0)

        def STDDEV_POP(self):
            return self.getToken(GQLParser.STDDEV_POP, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_generalSetFunctionType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGeneralSetFunctionType"):
                listener.enterGeneralSetFunctionType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGeneralSetFunctionType"):
                listener.exitGeneralSetFunctionType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGeneralSetFunctionType"):
                return visitor.visitGeneralSetFunctionType(self)
            else:
                return visitor.visitChildren(self)

    def generalSetFunctionType(self):
        localctx = GQLParser.GeneralSetFunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_generalSetFunctionType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4108
            _la = self._input.LA(1)
            if not (
                (((_la) & ~0x3F) == 0 and ((1 << _la) & 4683743621055250432) != 0)
                or (
                    ((_la - 144) & ~0x3F) == 0
                    and ((1 << (_la - 144)) & 792633534417207299) != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetQuantifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(GQLParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(GQLParser.ALL, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_setQuantifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetQuantifier"):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetQuantifier"):
                listener.exitSetQuantifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSetQuantifier"):
                return visitor.visitSetQuantifier(self)
            else:
                return visitor.visitChildren(self)

    def setQuantifier(self):
        localctx = GQLParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_setQuantifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4110
            _la = self._input.LA(1)
            if not (_la == 22 or _la == 80):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinarySetFunctionTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENTILE_CONT(self):
            return self.getToken(GQLParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(GQLParser.PERCENTILE_DISC, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_binarySetFunctionType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBinarySetFunctionType"):
                listener.enterBinarySetFunctionType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBinarySetFunctionType"):
                listener.exitBinarySetFunctionType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBinarySetFunctionType"):
                return visitor.visitBinarySetFunctionType(self)
            else:
                return visitor.visitChildren(self)

    def binarySetFunctionType(self):
        localctx = GQLParser.BinarySetFunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_binarySetFunctionType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4112
            _la = self._input.LA(1)
            if not (_la == 169 or _la == 170):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DependentValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def setQuantifier(self):
            return self.getTypedRuleContext(GQLParser.SetQuantifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_dependentValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDependentValueExpression"):
                listener.enterDependentValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDependentValueExpression"):
                listener.exitDependentValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDependentValueExpression"):
                return visitor.visitDependentValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def dependentValueExpression(self):
        localctx = GQLParser.DependentValueExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 906, self.RULE_dependentValueExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 22 or _la == 80:
                self.state = 4114
                self.setQuantifier()

            self.state = 4117
            self.numericValueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndependentValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_independentValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIndependentValueExpression"):
                listener.enterIndependentValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIndependentValueExpression"):
                listener.exitIndependentValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIndependentValueExpression"):
                return visitor.visitIndependentValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def independentValueExpression(self):
        localctx = GQLParser.IndependentValueExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 908, self.RULE_independentValueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4119
            self.numericValueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_idFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELEMENT_ID(self):
            return self.getToken(GQLParser.ELEMENT_ID, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def elementVariableReference(self):
            return self.getTypedRuleContext(
                GQLParser.ElementVariableReferenceContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_element_idFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElement_idFunction"):
                listener.enterElement_idFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElement_idFunction"):
                listener.exitElement_idFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElement_idFunction"):
                return visitor.visitElement_idFunction(self)
            else:
                return visitor.visitChildren(self)

    def element_idFunction(self):
        localctx = GQLParser.Element_idFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_element_idFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4121
            self.match(GQLParser.ELEMENT_ID)
            self.state = 4122
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4123
            self.elementVariableReference()
            self.state = 4124
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindingVariableReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariable(self):
            return self.getTypedRuleContext(GQLParser.BindingVariableContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_bindingVariableReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBindingVariableReference"):
                listener.enterBindingVariableReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBindingVariableReference"):
                listener.exitBindingVariableReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBindingVariableReference"):
                return visitor.visitBindingVariableReference(self)
            else:
                return visitor.visitChildren(self)

    def bindingVariableReference(self):
        localctx = GQLParser.BindingVariableReferenceContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 912, self.RULE_bindingVariableReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4126
            self.bindingVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_pathValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathValueExpression"):
                listener.enterPathValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathValueExpression"):
                listener.exitPathValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathValueExpression"):
                return visitor.visitPathValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def pathValueExpression(self):
        localctx = GQLParser.PathValueExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_pathValueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4128
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathValueConstructorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathValueConstructorByEnumeration(self):
            return self.getTypedRuleContext(
                GQLParser.PathValueConstructorByEnumerationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_pathValueConstructor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathValueConstructor"):
                listener.enterPathValueConstructor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathValueConstructor"):
                listener.exitPathValueConstructor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathValueConstructor"):
                return visitor.visitPathValueConstructor(self)
            else:
                return visitor.visitChildren(self)

    def pathValueConstructor(self):
        localctx = GQLParser.PathValueConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_pathValueConstructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4130
            self.pathValueConstructorByEnumeration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathValueConstructorByEnumerationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH(self):
            return self.getToken(GQLParser.PATH, 0)

        def LEFT_BRACKET(self):
            return self.getToken(GQLParser.LEFT_BRACKET, 0)

        def pathElementList(self):
            return self.getTypedRuleContext(GQLParser.PathElementListContext, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(GQLParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_pathValueConstructorByEnumeration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathValueConstructorByEnumeration"):
                listener.enterPathValueConstructorByEnumeration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathValueConstructorByEnumeration"):
                listener.exitPathValueConstructorByEnumeration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathValueConstructorByEnumeration"):
                return visitor.visitPathValueConstructorByEnumeration(self)
            else:
                return visitor.visitChildren(self)

    def pathValueConstructorByEnumeration(self):
        localctx = GQLParser.PathValueConstructorByEnumerationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 918, self.RULE_pathValueConstructorByEnumeration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4132
            self.match(GQLParser.PATH)
            self.state = 4133
            self.match(GQLParser.LEFT_BRACKET)
            self.state = 4134
            self.pathElementList()
            self.state = 4135
            self.match(GQLParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathElementListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathElementListStart(self):
            return self.getTypedRuleContext(GQLParser.PathElementListStartContext, 0)

        def pathElementListStep(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.PathElementListStepContext)
            else:
                return self.getTypedRuleContext(GQLParser.PathElementListStepContext, i)

        def getRuleIndex(self):
            return GQLParser.RULE_pathElementList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathElementList"):
                listener.enterPathElementList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathElementList"):
                listener.exitPathElementList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathElementList"):
                return visitor.visitPathElementList(self)
            else:
                return visitor.visitChildren(self)

    def pathElementList(self):
        localctx = GQLParser.PathElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_pathElementList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4137
            self.pathElementListStart()
            self.state = 4141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 4138
                self.pathElementListStep()
                self.state = 4143
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathElementListStartContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nodeReferenceValueExpression(self):
            return self.getTypedRuleContext(
                GQLParser.NodeReferenceValueExpressionContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_pathElementListStart

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathElementListStart"):
                listener.enterPathElementListStart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathElementListStart"):
                listener.exitPathElementListStart(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathElementListStart"):
                return visitor.visitPathElementListStart(self)
            else:
                return visitor.visitChildren(self)

    def pathElementListStart(self):
        localctx = GQLParser.PathElementListStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_pathElementListStart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4144
            self.nodeReferenceValueExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathElementListStepContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def edgeReferenceValueExpression(self):
            return self.getTypedRuleContext(
                GQLParser.EdgeReferenceValueExpressionContext, 0
            )

        def nodeReferenceValueExpression(self):
            return self.getTypedRuleContext(
                GQLParser.NodeReferenceValueExpressionContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_pathElementListStep

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathElementListStep"):
                listener.enterPathElementListStep(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathElementListStep"):
                listener.exitPathElementListStep(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathElementListStep"):
                return visitor.visitPathElementListStep(self)
            else:
                return visitor.visitChildren(self)

    def pathElementListStep(self):
        localctx = GQLParser.PathElementListStepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_pathElementListStep)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4146
            self.match(GQLParser.COMMA)
            self.state = 4147
            self.edgeReferenceValueExpression()
            self.state = 4148
            self.match(GQLParser.COMMA)
            self.state = 4149
            self.nodeReferenceValueExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_listValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListValueExpression"):
                listener.enterListValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListValueExpression"):
                listener.exitListValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListValueExpression"):
                return visitor.visitListValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def listValueExpression(self):
        localctx = GQLParser.ListValueExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_listValueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4151
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListValueFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trimListFunction(self):
            return self.getTypedRuleContext(GQLParser.TrimListFunctionContext, 0)

        def elementsFunction(self):
            return self.getTypedRuleContext(GQLParser.ElementsFunctionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_listValueFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListValueFunction"):
                listener.enterListValueFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListValueFunction"):
                listener.exitListValueFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListValueFunction"):
                return visitor.visitListValueFunction(self)
            else:
                return visitor.visitChildren(self)

    def listValueFunction(self):
        localctx = GQLParser.ListValueFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_listValueFunction)
        try:
            self.state = 4155
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [210]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4153
                self.trimListFunction()
                pass
            elif token in [287]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4154
                self.elementsFunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrimListFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIM(self):
            return self.getToken(GQLParser.TRIM, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def listValueExpression(self):
            return self.getTypedRuleContext(GQLParser.ListValueExpressionContext, 0)

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_trimListFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrimListFunction"):
                listener.enterTrimListFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrimListFunction"):
                listener.exitTrimListFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTrimListFunction"):
                return visitor.visitTrimListFunction(self)
            else:
                return visitor.visitChildren(self)

    def trimListFunction(self):
        localctx = GQLParser.TrimListFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_trimListFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4157
            self.match(GQLParser.TRIM)
            self.state = 4158
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4159
            self.listValueExpression()
            self.state = 4160
            self.match(GQLParser.COMMA)
            self.state = 4161
            self.numericValueExpression(0)
            self.state = 4162
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementsFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELEMENTS(self):
            return self.getToken(GQLParser.ELEMENTS, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def pathValueExpression(self):
            return self.getTypedRuleContext(GQLParser.PathValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_elementsFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementsFunction"):
                listener.enterElementsFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementsFunction"):
                listener.exitElementsFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementsFunction"):
                return visitor.visitElementsFunction(self)
            else:
                return visitor.visitChildren(self)

    def elementsFunction(self):
        localctx = GQLParser.ElementsFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_elementsFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4164
            self.match(GQLParser.ELEMENTS)
            self.state = 4165
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4166
            self.pathValueExpression()
            self.state = 4167
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListValueConstructorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def listValueConstructorByEnumeration(self):
            return self.getTypedRuleContext(
                GQLParser.ListValueConstructorByEnumerationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_listValueConstructor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListValueConstructor"):
                listener.enterListValueConstructor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListValueConstructor"):
                listener.exitListValueConstructor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListValueConstructor"):
                return visitor.visitListValueConstructor(self)
            else:
                return visitor.visitChildren(self)

    def listValueConstructor(self):
        localctx = GQLParser.ListValueConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_listValueConstructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4169
            self.listValueConstructorByEnumeration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListValueConstructorByEnumerationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACKET(self):
            return self.getToken(GQLParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(GQLParser.RIGHT_BRACKET, 0)

        def listValueTypeName(self):
            return self.getTypedRuleContext(GQLParser.ListValueTypeNameContext, 0)

        def listElementList(self):
            return self.getTypedRuleContext(GQLParser.ListElementListContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_listValueConstructorByEnumeration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListValueConstructorByEnumeration"):
                listener.enterListValueConstructorByEnumeration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListValueConstructorByEnumeration"):
                listener.exitListValueConstructorByEnumeration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListValueConstructorByEnumeration"):
                return visitor.visitListValueConstructorByEnumeration(self)
            else:
                return visitor.visitChildren(self)

    def listValueConstructorByEnumeration(self):
        localctx = GQLParser.ListValueConstructorByEnumerationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 936, self.RULE_listValueConstructorByEnumeration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 26 or _la == 133:
                self.state = 4171
                self.listValueTypeName()

            self.state = 4174
            self.match(GQLParser.LEFT_BRACKET)
            self.state = 4176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la) & ~0x3F) == 0 and ((1 << _la) & 8762849302180528028) != 0)
                or (
                    ((_la - 64) & ~0x3F) == 0 and ((1 << (_la - 64)) & 34464073969) != 0
                )
                or (
                    ((_la - 129) & ~0x3F) == 0
                    and ((1 << (_la - 129)) & -8011702113698201677) != 0
                )
                or (
                    ((_la - 193) & ~0x3F) == 0
                    and ((1 << (_la - 193)) & 26393111092643) != 0
                )
                or (
                    ((_la - 277) & ~0x3F) == 0
                    and ((1 << (_la - 277)) & 844424930131967) != 0
                )
                or (((_la - 368) & ~0x3F) == 0 and ((1 << (_la - 368)) & 151) != 0)
            ):
                self.state = 4175
                self.listElementList()

            self.state = 4178
            self.match(GQLParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListElementListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def listElement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.ListElementContext)
            else:
                return self.getTypedRuleContext(GQLParser.ListElementContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_listElementList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListElementList"):
                listener.enterListElementList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListElementList"):
                listener.exitListElementList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListElementList"):
                return visitor.visitListElementList(self)
            else:
                return visitor.visitChildren(self)

    def listElementList(self):
        localctx = GQLParser.ListElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_listElementList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4180
            self.listElement()
            self.state = 4185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 4181
                self.match(GQLParser.COMMA)
                self.state = 4182
                self.listElement()
                self.state = 4187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListElementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_listElement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListElement"):
                listener.enterListElement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListElement"):
                listener.exitListElement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListElement"):
                return visitor.visitListElement(self)
            else:
                return visitor.visitChildren(self)

    def listElement(self):
        localctx = GQLParser.ListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_listElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4188
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordConstructorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldsSpecification(self):
            return self.getTypedRuleContext(GQLParser.FieldsSpecificationContext, 0)

        def RECORD(self):
            return self.getToken(GQLParser.RECORD, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_recordConstructor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRecordConstructor"):
                listener.enterRecordConstructor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRecordConstructor"):
                listener.exitRecordConstructor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRecordConstructor"):
                return visitor.visitRecordConstructor(self)
            else:
                return visitor.visitChildren(self)

    def recordConstructor(self):
        localctx = GQLParser.RecordConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_recordConstructor)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 176:
                self.state = 4190
                self.match(GQLParser.RECORD)

            self.state = 4193
            self.fieldsSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldsSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GQLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GQLParser.RIGHT_BRACE, 0)

        def fieldList(self):
            return self.getTypedRuleContext(GQLParser.FieldListContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_fieldsSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFieldsSpecification"):
                listener.enterFieldsSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFieldsSpecification"):
                listener.exitFieldsSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFieldsSpecification"):
                return visitor.visitFieldsSpecification(self)
            else:
                return visitor.visitChildren(self)

    def fieldsSpecification(self):
        localctx = GQLParser.FieldsSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_fieldsSpecification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4195
            self.match(GQLParser.LEFT_BRACE)
            self.state = 4197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == 4
                or _la == 5
                or (
                    ((_la - 277) & ~0x3F) == 0
                    and ((1 << (_la - 277)) & 281474976710655) != 0
                )
            ):
                self.state = 4196
                self.fieldList()

            self.state = 4199
            self.match(GQLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(GQLParser.FieldContext)
            else:
                return self.getTypedRuleContext(GQLParser.FieldContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(GQLParser.COMMA)
            else:
                return self.getToken(GQLParser.COMMA, i)

        def getRuleIndex(self):
            return GQLParser.RULE_fieldList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFieldList"):
                listener.enterFieldList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFieldList"):
                listener.exitFieldList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFieldList"):
                return visitor.visitFieldList(self)
            else:
                return visitor.visitChildren(self)

    def fieldList(self):
        localctx = GQLParser.FieldListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_fieldList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4201
            self.field()
            self.state = 4206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 360:
                self.state = 4202
                self.match(GQLParser.COMMA)
                self.state = 4203
                self.field()
                self.state = 4208
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(GQLParser.FieldNameContext, 0)

        def COLON(self):
            return self.getToken(GQLParser.COLON, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_field

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterField"):
                listener.enterField(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitField"):
                listener.exitField(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitField"):
                return visitor.visitField(self)
            else:
                return visitor.visitChildren(self)

    def field(self):
        localctx = GQLParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4209
            self.fieldName()
            self.state = 4210
            self.match(GQLParser.COLON)
            self.state = 4211
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TruthValueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN_LITERAL(self):
            return self.getToken(GQLParser.BOOLEAN_LITERAL, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_truthValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTruthValue"):
                listener.enterTruthValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTruthValue"):
                listener.exitTruthValue(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTruthValue"):
                return visitor.visitTruthValue(self)
            else:
                return visitor.visitChildren(self)

    def truthValue(self):
        localctx = GQLParser.TruthValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_truthValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4213
            self.match(GQLParser.BOOLEAN_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sign = None  # Token
            self.operator = None  # Token

        def numericValueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    GQLParser.NumericValueExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    GQLParser.NumericValueExpressionContext, i
                )

        def PLUS_SIGN(self):
            return self.getToken(GQLParser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(GQLParser.MINUS_SIGN, 0)

        def valueExpressionPrimary(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionPrimaryContext, 0)

        def numericValueFunction(self):
            return self.getTypedRuleContext(GQLParser.NumericValueFunctionContext, 0)

        def ASTERISK(self):
            return self.getToken(GQLParser.ASTERISK, 0)

        def SOLIDUS(self):
            return self.getToken(GQLParser.SOLIDUS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_numericValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericValueExpression"):
                listener.enterNumericValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericValueExpression"):
                listener.exitNumericValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericValueExpression"):
                return visitor.visitNumericValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def numericValueExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GQLParser.NumericValueExpressionContext(
            self, self._ctx, _parentState
        )
        _prevctx = localctx
        _startState = 952
        self.enterRecursionRule(localctx, 952, self.RULE_numericValueExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4220
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [372, 375]:
                self.state = 4216
                localctx.sign = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == 372 or _la == 375):
                    localctx.sign = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4217
                self.numericValueExpression(5)
                pass
            elif token in [
                2,
                3,
                4,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                26,
                33,
                46,
                47,
                55,
                56,
                62,
                70,
                71,
                83,
                85,
                130,
                133,
                144,
                145,
                154,
                156,
                166,
                169,
                170,
                176,
                189,
                200,
                201,
                203,
                207,
                208,
                225,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
                326,
                368,
                369,
                370,
            ]:
                self.state = 4218
                self.valueExpressionPrimary(0)
                pass
            elif token in [
                20,
                21,
                30,
                32,
                42,
                45,
                48,
                49,
                51,
                52,
                59,
                60,
                61,
                75,
                90,
                99,
                134,
                139,
                140,
                147,
                157,
                167,
                171,
                174,
                192,
                193,
                194,
                198,
                204,
                205,
            ]:
                self.state = 4219
                self.numericValueFunction()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 4230
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 474, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 4228
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 473, self._ctx)
                    if la_ == 1:
                        localctx = GQLParser.NumericValueExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_numericValueExpression
                        )
                        self.state = 4222
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 4223
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (_la == 358 or _la == 382):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4224
                        self.numericValueExpression(5)
                        pass

                    elif la_ == 2:
                        localctx = GQLParser.NumericValueExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_numericValueExpression
                        )
                        self.state = 4225
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 4226
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (_la == 372 or _la == 375):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4227
                        self.numericValueExpression(4)
                        pass

                self.state = 4232
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 474, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NumericValueFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lengthExpression(self):
            return self.getTypedRuleContext(GQLParser.LengthExpressionContext, 0)

        def cardinalityExpression(self):
            return self.getTypedRuleContext(GQLParser.CardinalityExpressionContext, 0)

        def absoluteValueExpression(self):
            return self.getTypedRuleContext(GQLParser.AbsoluteValueExpressionContext, 0)

        def modulusExpression(self):
            return self.getTypedRuleContext(GQLParser.ModulusExpressionContext, 0)

        def trigonometricFunction(self):
            return self.getTypedRuleContext(GQLParser.TrigonometricFunctionContext, 0)

        def generalLogarithmFunction(self):
            return self.getTypedRuleContext(
                GQLParser.GeneralLogarithmFunctionContext, 0
            )

        def commonLogarithm(self):
            return self.getTypedRuleContext(GQLParser.CommonLogarithmContext, 0)

        def naturalLogarithm(self):
            return self.getTypedRuleContext(GQLParser.NaturalLogarithmContext, 0)

        def exponentialFunction(self):
            return self.getTypedRuleContext(GQLParser.ExponentialFunctionContext, 0)

        def powerFunction(self):
            return self.getTypedRuleContext(GQLParser.PowerFunctionContext, 0)

        def squareRoot(self):
            return self.getTypedRuleContext(GQLParser.SquareRootContext, 0)

        def floorFunction(self):
            return self.getTypedRuleContext(GQLParser.FloorFunctionContext, 0)

        def ceilingFunction(self):
            return self.getTypedRuleContext(GQLParser.CeilingFunctionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_numericValueFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericValueFunction"):
                listener.enterNumericValueFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericValueFunction"):
                listener.exitNumericValueFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericValueFunction"):
                return visitor.visitNumericValueFunction(self)
            else:
                return visitor.visitChildren(self)

    def numericValueFunction(self):
        localctx = GQLParser.NumericValueFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_numericValueFunction)
        try:
            self.state = 4246
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42, 51, 52, 157, 167]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4233
                self.lengthExpression()
                pass
            elif token in [45, 194]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4234
                self.cardinalityExpression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4235
                self.absoluteValueExpression()
                pass
            elif token in [147]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4236
                self.modulusExpression()
                pass
            elif token in [21, 30, 32, 59, 60, 61, 75, 174, 192, 193, 204, 205]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4237
                self.trigonometricFunction()
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4238
                self.generalLogarithmFunction()
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4239
                self.commonLogarithm()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4240
                self.naturalLogarithm()
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4241
                self.exponentialFunction()
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4242
                self.powerFunction()
                pass
            elif token in [198]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4243
                self.squareRoot()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4244
                self.floorFunction()
                pass
            elif token in [48, 49]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4245
                self.ceilingFunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LengthExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charLengthExpression(self):
            return self.getTypedRuleContext(GQLParser.CharLengthExpressionContext, 0)

        def byteLengthExpression(self):
            return self.getTypedRuleContext(GQLParser.ByteLengthExpressionContext, 0)

        def pathLengthExpression(self):
            return self.getTypedRuleContext(GQLParser.PathLengthExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_lengthExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLengthExpression"):
                listener.enterLengthExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLengthExpression"):
                listener.exitLengthExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLengthExpression"):
                return visitor.visitLengthExpression(self)
            else:
                return visitor.visitChildren(self)

    def lengthExpression(self):
        localctx = GQLParser.LengthExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_lengthExpression)
        try:
            self.state = 4251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4248
                self.charLengthExpression()
                pass
            elif token in [42, 157]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4249
                self.byteLengthExpression()
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4250
                self.pathLengthExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CardinalityExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARDINALITY(self):
            return self.getToken(GQLParser.CARDINALITY, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def cardinalityExpressionArgument(self):
            return self.getTypedRuleContext(
                GQLParser.CardinalityExpressionArgumentContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def SIZE(self):
            return self.getToken(GQLParser.SIZE, 0)

        def listValueExpression(self):
            return self.getTypedRuleContext(GQLParser.ListValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_cardinalityExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCardinalityExpression"):
                listener.enterCardinalityExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCardinalityExpression"):
                listener.exitCardinalityExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCardinalityExpression"):
                return visitor.visitCardinalityExpression(self)
            else:
                return visitor.visitChildren(self)

    def cardinalityExpression(self):
        localctx = GQLParser.CardinalityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_cardinalityExpression)
        try:
            self.state = 4263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4253
                self.match(GQLParser.CARDINALITY)
                self.state = 4254
                self.match(GQLParser.LEFT_PAREN)
                self.state = 4255
                self.cardinalityExpressionArgument()
                self.state = 4256
                self.match(GQLParser.RIGHT_PAREN)
                pass
            elif token in [194]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4258
                self.match(GQLParser.SIZE)
                self.state = 4259
                self.match(GQLParser.LEFT_PAREN)
                self.state = 4260
                self.listValueExpression()
                self.state = 4261
                self.match(GQLParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CardinalityExpressionArgumentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_cardinalityExpressionArgument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCardinalityExpressionArgument"):
                listener.enterCardinalityExpressionArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCardinalityExpressionArgument"):
                listener.exitCardinalityExpressionArgument(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCardinalityExpressionArgument"):
                return visitor.visitCardinalityExpressionArgument(self)
            else:
                return visitor.visitChildren(self)

    def cardinalityExpressionArgument(self):
        localctx = GQLParser.CardinalityExpressionArgumentContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 960, self.RULE_cardinalityExpressionArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4265
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharLengthExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def characterStringValueExpression(self):
            return self.getTypedRuleContext(
                GQLParser.CharacterStringValueExpressionContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def CHAR_LENGTH(self):
            return self.getToken(GQLParser.CHAR_LENGTH, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(GQLParser.CHARACTER_LENGTH, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_charLengthExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCharLengthExpression"):
                listener.enterCharLengthExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCharLengthExpression"):
                listener.exitCharLengthExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCharLengthExpression"):
                return visitor.visitCharLengthExpression(self)
            else:
                return visitor.visitChildren(self)

    def charLengthExpression(self):
        localctx = GQLParser.CharLengthExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_charLengthExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4267
            _la = self._input.LA(1)
            if not (_la == 51 or _la == 52):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4268
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4269
            self.characterStringValueExpression()
            self.state = 4270
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ByteLengthExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def byteStringValueExpression(self):
            return self.getTypedRuleContext(
                GQLParser.ByteStringValueExpressionContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def BYTE_LENGTH(self):
            return self.getToken(GQLParser.BYTE_LENGTH, 0)

        def OCTET_LENGTH(self):
            return self.getToken(GQLParser.OCTET_LENGTH, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_byteLengthExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterByteLengthExpression"):
                listener.enterByteLengthExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitByteLengthExpression"):
                listener.exitByteLengthExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitByteLengthExpression"):
                return visitor.visitByteLengthExpression(self)
            else:
                return visitor.visitChildren(self)

    def byteLengthExpression(self):
        localctx = GQLParser.ByteLengthExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_byteLengthExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4272
            _la = self._input.LA(1)
            if not (_la == 42 or _la == 157):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4273
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4274
            self.byteStringValueExpression()
            self.state = 4275
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathLengthExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH_LENGTH(self):
            return self.getToken(GQLParser.PATH_LENGTH, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def pathValueExpression(self):
            return self.getTypedRuleContext(GQLParser.PathValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_pathLengthExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathLengthExpression"):
                listener.enterPathLengthExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathLengthExpression"):
                listener.exitPathLengthExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathLengthExpression"):
                return visitor.visitPathLengthExpression(self)
            else:
                return visitor.visitChildren(self)

    def pathLengthExpression(self):
        localctx = GQLParser.PathLengthExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_pathLengthExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4277
            self.match(GQLParser.PATH_LENGTH)
            self.state = 4278
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4279
            self.pathValueExpression()
            self.state = 4280
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbsoluteValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(GQLParser.ABS, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_absoluteValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbsoluteValueExpression"):
                listener.enterAbsoluteValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbsoluteValueExpression"):
                listener.exitAbsoluteValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAbsoluteValueExpression"):
                return visitor.visitAbsoluteValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def absoluteValueExpression(self):
        localctx = GQLParser.AbsoluteValueExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_absoluteValueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4282
            self.match(GQLParser.ABS)
            self.state = 4283
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4284
            self.valueExpression(0)
            self.state = 4285
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModulusExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOD(self):
            return self.getToken(GQLParser.MOD, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def numericValueExpressionDividend(self):
            return self.getTypedRuleContext(
                GQLParser.NumericValueExpressionDividendContext, 0
            )

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def numericValueExpressionDivisor(self):
            return self.getTypedRuleContext(
                GQLParser.NumericValueExpressionDivisorContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_modulusExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModulusExpression"):
                listener.enterModulusExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModulusExpression"):
                listener.exitModulusExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModulusExpression"):
                return visitor.visitModulusExpression(self)
            else:
                return visitor.visitChildren(self)

    def modulusExpression(self):
        localctx = GQLParser.ModulusExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_modulusExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4287
            self.match(GQLParser.MOD)
            self.state = 4288
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4289
            self.numericValueExpressionDividend()
            self.state = 4290
            self.match(GQLParser.COMMA)
            self.state = 4291
            self.numericValueExpressionDivisor()
            self.state = 4292
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericValueExpressionDividendContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_numericValueExpressionDividend

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericValueExpressionDividend"):
                listener.enterNumericValueExpressionDividend(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericValueExpressionDividend"):
                listener.exitNumericValueExpressionDividend(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericValueExpressionDividend"):
                return visitor.visitNumericValueExpressionDividend(self)
            else:
                return visitor.visitChildren(self)

    def numericValueExpressionDividend(self):
        localctx = GQLParser.NumericValueExpressionDividendContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 972, self.RULE_numericValueExpressionDividend)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4294
            self.numericValueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericValueExpressionDivisorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_numericValueExpressionDivisor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericValueExpressionDivisor"):
                listener.enterNumericValueExpressionDivisor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericValueExpressionDivisor"):
                listener.exitNumericValueExpressionDivisor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericValueExpressionDivisor"):
                return visitor.visitNumericValueExpressionDivisor(self)
            else:
                return visitor.visitChildren(self)

    def numericValueExpressionDivisor(self):
        localctx = GQLParser.NumericValueExpressionDivisorContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 974, self.RULE_numericValueExpressionDivisor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4296
            self.numericValueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrigonometricFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trigonometricFunctionName(self):
            return self.getTypedRuleContext(
                GQLParser.TrigonometricFunctionNameContext, 0
            )

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_trigonometricFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrigonometricFunction"):
                listener.enterTrigonometricFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrigonometricFunction"):
                listener.exitTrigonometricFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTrigonometricFunction"):
                return visitor.visitTrigonometricFunction(self)
            else:
                return visitor.visitChildren(self)

    def trigonometricFunction(self):
        localctx = GQLParser.TrigonometricFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_trigonometricFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4298
            self.trigonometricFunctionName()
            self.state = 4299
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4300
            self.numericValueExpression(0)
            self.state = 4301
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrigonometricFunctionNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIN(self):
            return self.getToken(GQLParser.SIN, 0)

        def COS(self):
            return self.getToken(GQLParser.COS, 0)

        def TAN(self):
            return self.getToken(GQLParser.TAN, 0)

        def COT(self):
            return self.getToken(GQLParser.COT, 0)

        def SINH(self):
            return self.getToken(GQLParser.SINH, 0)

        def COSH(self):
            return self.getToken(GQLParser.COSH, 0)

        def TANH(self):
            return self.getToken(GQLParser.TANH, 0)

        def ASIN(self):
            return self.getToken(GQLParser.ASIN, 0)

        def ACOS(self):
            return self.getToken(GQLParser.ACOS, 0)

        def ATAN(self):
            return self.getToken(GQLParser.ATAN, 0)

        def DEGREES(self):
            return self.getToken(GQLParser.DEGREES, 0)

        def RADIANS(self):
            return self.getToken(GQLParser.RADIANS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_trigonometricFunctionName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrigonometricFunctionName"):
                listener.enterTrigonometricFunctionName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrigonometricFunctionName"):
                listener.exitTrigonometricFunctionName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTrigonometricFunctionName"):
                return visitor.visitTrigonometricFunctionName(self)
            else:
                return visitor.visitChildren(self)

    def trigonometricFunctionName(self):
        localctx = GQLParser.TrigonometricFunctionNameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 978, self.RULE_trigonometricFunctionName)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4303
            _la = self._input.LA(1)
            if not (
                (
                    ((_la - 21) & ~0x3F) == 0
                    and ((1 << (_la - 21)) & 18016322654833153) != 0
                )
                or (
                    ((_la - 174) & ~0x3F) == 0
                    and ((1 << (_la - 174)) & 3222011905) != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralLogarithmFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG_KW(self):
            return self.getToken(GQLParser.LOG_KW, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def generalLogarithmBase(self):
            return self.getTypedRuleContext(GQLParser.GeneralLogarithmBaseContext, 0)

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def generalLogarithmArgument(self):
            return self.getTypedRuleContext(
                GQLParser.GeneralLogarithmArgumentContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_generalLogarithmFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGeneralLogarithmFunction"):
                listener.enterGeneralLogarithmFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGeneralLogarithmFunction"):
                listener.exitGeneralLogarithmFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGeneralLogarithmFunction"):
                return visitor.visitGeneralLogarithmFunction(self)
            else:
                return visitor.visitChildren(self)

    def generalLogarithmFunction(self):
        localctx = GQLParser.GeneralLogarithmFunctionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 980, self.RULE_generalLogarithmFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4305
            self.match(GQLParser.LOG_KW)
            self.state = 4306
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4307
            self.generalLogarithmBase()
            self.state = 4308
            self.match(GQLParser.COMMA)
            self.state = 4309
            self.generalLogarithmArgument()
            self.state = 4310
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralLogarithmBaseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_generalLogarithmBase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGeneralLogarithmBase"):
                listener.enterGeneralLogarithmBase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGeneralLogarithmBase"):
                listener.exitGeneralLogarithmBase(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGeneralLogarithmBase"):
                return visitor.visitGeneralLogarithmBase(self)
            else:
                return visitor.visitChildren(self)

    def generalLogarithmBase(self):
        localctx = GQLParser.GeneralLogarithmBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_generalLogarithmBase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4312
            self.numericValueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralLogarithmArgumentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_generalLogarithmArgument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGeneralLogarithmArgument"):
                listener.enterGeneralLogarithmArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGeneralLogarithmArgument"):
                listener.exitGeneralLogarithmArgument(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGeneralLogarithmArgument"):
                return visitor.visitGeneralLogarithmArgument(self)
            else:
                return visitor.visitChildren(self)

    def generalLogarithmArgument(self):
        localctx = GQLParser.GeneralLogarithmArgumentContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 984, self.RULE_generalLogarithmArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4314
            self.numericValueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommonLogarithmContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG10(self):
            return self.getToken(GQLParser.LOG10, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_commonLogarithm

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCommonLogarithm"):
                listener.enterCommonLogarithm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCommonLogarithm"):
                listener.exitCommonLogarithm(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCommonLogarithm"):
                return visitor.visitCommonLogarithm(self)
            else:
                return visitor.visitChildren(self)

    def commonLogarithm(self):
        localctx = GQLParser.CommonLogarithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_commonLogarithm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4316
            self.match(GQLParser.LOG10)
            self.state = 4317
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4318
            self.numericValueExpression(0)
            self.state = 4319
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NaturalLogarithmContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LN(self):
            return self.getToken(GQLParser.LN, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_naturalLogarithm

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNaturalLogarithm"):
                listener.enterNaturalLogarithm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNaturalLogarithm"):
                listener.exitNaturalLogarithm(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNaturalLogarithm"):
                return visitor.visitNaturalLogarithm(self)
            else:
                return visitor.visitChildren(self)

    def naturalLogarithm(self):
        localctx = GQLParser.NaturalLogarithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_naturalLogarithm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4321
            self.match(GQLParser.LN)
            self.state = 4322
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4323
            self.numericValueExpression(0)
            self.state = 4324
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExponentialFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXP(self):
            return self.getToken(GQLParser.EXP, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_exponentialFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExponentialFunction"):
                listener.enterExponentialFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExponentialFunction"):
                listener.exitExponentialFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExponentialFunction"):
                return visitor.visitExponentialFunction(self)
            else:
                return visitor.visitChildren(self)

    def exponentialFunction(self):
        localctx = GQLParser.ExponentialFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_exponentialFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4326
            self.match(GQLParser.EXP)
            self.state = 4327
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4328
            self.numericValueExpression(0)
            self.state = 4329
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(GQLParser.POWER, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def numericValueExpressionBase(self):
            return self.getTypedRuleContext(
                GQLParser.NumericValueExpressionBaseContext, 0
            )

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def numericValueExpressionExponent(self):
            return self.getTypedRuleContext(
                GQLParser.NumericValueExpressionExponentContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_powerFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPowerFunction"):
                listener.enterPowerFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPowerFunction"):
                listener.exitPowerFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPowerFunction"):
                return visitor.visitPowerFunction(self)
            else:
                return visitor.visitChildren(self)

    def powerFunction(self):
        localctx = GQLParser.PowerFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_powerFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4331
            self.match(GQLParser.POWER)
            self.state = 4332
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4333
            self.numericValueExpressionBase()
            self.state = 4334
            self.match(GQLParser.COMMA)
            self.state = 4335
            self.numericValueExpressionExponent()
            self.state = 4336
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericValueExpressionBaseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_numericValueExpressionBase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericValueExpressionBase"):
                listener.enterNumericValueExpressionBase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericValueExpressionBase"):
                listener.exitNumericValueExpressionBase(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericValueExpressionBase"):
                return visitor.visitNumericValueExpressionBase(self)
            else:
                return visitor.visitChildren(self)

    def numericValueExpressionBase(self):
        localctx = GQLParser.NumericValueExpressionBaseContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 994, self.RULE_numericValueExpressionBase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4338
            self.numericValueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericValueExpressionExponentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_numericValueExpressionExponent

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericValueExpressionExponent"):
                listener.enterNumericValueExpressionExponent(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericValueExpressionExponent"):
                listener.exitNumericValueExpressionExponent(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericValueExpressionExponent"):
                return visitor.visitNumericValueExpressionExponent(self)
            else:
                return visitor.visitChildren(self)

    def numericValueExpressionExponent(self):
        localctx = GQLParser.NumericValueExpressionExponentContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 996, self.RULE_numericValueExpressionExponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4340
            self.numericValueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SquareRootContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQRT(self):
            return self.getToken(GQLParser.SQRT, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_squareRoot

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSquareRoot"):
                listener.enterSquareRoot(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSquareRoot"):
                listener.exitSquareRoot(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSquareRoot"):
                return visitor.visitSquareRoot(self)
            else:
                return visitor.visitChildren(self)

    def squareRoot(self):
        localctx = GQLParser.SquareRootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_squareRoot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4342
            self.match(GQLParser.SQRT)
            self.state = 4343
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4344
            self.numericValueExpression(0)
            self.state = 4345
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FloorFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOOR(self):
            return self.getToken(GQLParser.FLOOR, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_floorFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFloorFunction"):
                listener.enterFloorFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFloorFunction"):
                listener.exitFloorFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFloorFunction"):
                return visitor.visitFloorFunction(self)
            else:
                return visitor.visitChildren(self)

    def floorFunction(self):
        localctx = GQLParser.FloorFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_floorFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4347
            self.match(GQLParser.FLOOR)
            self.state = 4348
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4349
            self.numericValueExpression(0)
            self.state = 4350
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CeilingFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def CEIL(self):
            return self.getToken(GQLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(GQLParser.CEILING, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_ceilingFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCeilingFunction"):
                listener.enterCeilingFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCeilingFunction"):
                listener.exitCeilingFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCeilingFunction"):
                return visitor.visitCeilingFunction(self)
            else:
                return visitor.visitChildren(self)

    def ceilingFunction(self):
        localctx = GQLParser.CeilingFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_ceilingFunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4352
            _la = self._input.LA(1)
            if not (_la == 48 or _la == 49):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4353
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4354
            self.numericValueExpression(0)
            self.state = 4355
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharacterStringValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_characterStringValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCharacterStringValueExpression"):
                listener.enterCharacterStringValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCharacterStringValueExpression"):
                listener.exitCharacterStringValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCharacterStringValueExpression"):
                return visitor.visitCharacterStringValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def characterStringValueExpression(self):
        localctx = GQLParser.CharacterStringValueExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 1004, self.RULE_characterStringValueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4357
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ByteStringValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_byteStringValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterByteStringValueExpression"):
                listener.enterByteStringValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitByteStringValueExpression"):
                listener.exitByteStringValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitByteStringValueExpression"):
                return visitor.visitByteStringValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def byteStringValueExpression(self):
        localctx = GQLParser.ByteStringValueExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 1006, self.RULE_byteStringValueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4359
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrimOperandsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trimCharacterOrByteStringSource(self):
            return self.getTypedRuleContext(
                GQLParser.TrimCharacterOrByteStringSourceContext, 0
            )

        def FROM(self):
            return self.getToken(GQLParser.FROM, 0)

        def trimSpecification(self):
            return self.getTypedRuleContext(GQLParser.TrimSpecificationContext, 0)

        def trimCharacterOrByteString(self):
            return self.getTypedRuleContext(
                GQLParser.TrimCharacterOrByteStringContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_trimOperands

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrimOperands"):
                listener.enterTrimOperands(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrimOperands"):
                listener.exitTrimOperands(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTrimOperands"):
                return visitor.visitTrimOperands(self)
            else:
                return visitor.visitChildren(self)

    def trimOperands(self):
        localctx = GQLParser.TrimOperandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_trimOperands)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 480, self._ctx)
            if la_ == 1:
                self.state = 4362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 39 or _la == 128 or _la == 209:
                    self.state = 4361
                    self.trimSpecification()

                self.state = 4365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la) & ~0x3F) == 0 and ((1 << _la) & 8762849302180528028) != 0)
                    or (
                        ((_la - 64) & ~0x3F) == 0
                        and ((1 << (_la - 64)) & 34464073969) != 0
                    )
                    or (
                        ((_la - 129) & ~0x3F) == 0
                        and ((1 << (_la - 129)) & -8011702113698201677) != 0
                    )
                    or (
                        ((_la - 193) & ~0x3F) == 0
                        and ((1 << (_la - 193)) & 26393111092643) != 0
                    )
                    or (
                        ((_la - 277) & ~0x3F) == 0
                        and ((1 << (_la - 277)) & 844424930131967) != 0
                    )
                    or (((_la - 368) & ~0x3F) == 0 and ((1 << (_la - 368)) & 151) != 0)
                ):
                    self.state = 4364
                    self.trimCharacterOrByteString()

                self.state = 4367
                self.match(GQLParser.FROM)

            self.state = 4370
            self.trimCharacterOrByteStringSource()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrimCharacterOrByteStringSourceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_trimCharacterOrByteStringSource

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrimCharacterOrByteStringSource"):
                listener.enterTrimCharacterOrByteStringSource(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrimCharacterOrByteStringSource"):
                listener.exitTrimCharacterOrByteStringSource(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTrimCharacterOrByteStringSource"):
                return visitor.visitTrimCharacterOrByteStringSource(self)
            else:
                return visitor.visitChildren(self)

    def trimCharacterOrByteStringSource(self):
        localctx = GQLParser.TrimCharacterOrByteStringSourceContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 1010, self.RULE_trimCharacterOrByteStringSource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4372
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrimSpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEADING(self):
            return self.getToken(GQLParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(GQLParser.TRAILING, 0)

        def BOTH(self):
            return self.getToken(GQLParser.BOTH, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_trimSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrimSpecification"):
                listener.enterTrimSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrimSpecification"):
                listener.exitTrimSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTrimSpecification"):
                return visitor.visitTrimSpecification(self)
            else:
                return visitor.visitChildren(self)

    def trimSpecification(self):
        localctx = GQLParser.TrimSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_trimSpecification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4374
            _la = self._input.LA(1)
            if not (_la == 39 or _la == 128 or _la == 209):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrimCharacterOrByteStringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_trimCharacterOrByteString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrimCharacterOrByteString"):
                listener.enterTrimCharacterOrByteString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrimCharacterOrByteString"):
                listener.exitTrimCharacterOrByteString(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTrimCharacterOrByteString"):
                return visitor.visitTrimCharacterOrByteString(self)
            else:
                return visitor.visitChildren(self)

    def trimCharacterOrByteString(self):
        localctx = GQLParser.TrimCharacterOrByteStringContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 1014, self.RULE_trimCharacterOrByteString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4376
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NormalFormContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NFC(self):
            return self.getToken(GQLParser.NFC, 0)

        def NFD(self):
            return self.getToken(GQLParser.NFD, 0)

        def NFKC(self):
            return self.getToken(GQLParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(GQLParser.NFKD, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_normalForm

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNormalForm"):
                listener.enterNormalForm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNormalForm"):
                listener.exitNormalForm(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNormalForm"):
                return visitor.visitNormalForm(self)
            else:
                return visitor.visitChildren(self)

    def normalForm(self):
        localctx = GQLParser.NormalFormContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_normalForm)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4378
            _la = self._input.LA(1)
            if not (((_la - 296) & ~0x3F) == 0 and ((1 << (_la - 296)) & 15) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringLengthContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericValueExpression(self):
            return self.getTypedRuleContext(GQLParser.NumericValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_stringLength

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStringLength"):
                listener.enterStringLength(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStringLength"):
                listener.exitStringLength(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStringLength"):
                return visitor.visitStringLength(self)
            else:
                return visitor.visitChildren(self)

    def stringLength(self):
        localctx = GQLParser.StringLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_stringLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4380
            self.numericValueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatetimeValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_datetimeValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatetimeValueExpression"):
                listener.enterDatetimeValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatetimeValueExpression"):
                listener.exitDatetimeValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatetimeValueExpression"):
                return visitor.visitDatetimeValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def datetimeValueExpression(self):
        localctx = GQLParser.DatetimeValueExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_datetimeValueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4382
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatetimeValueFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateFunction(self):
            return self.getTypedRuleContext(GQLParser.DateFunctionContext, 0)

        def timeFunction(self):
            return self.getTypedRuleContext(GQLParser.TimeFunctionContext, 0)

        def datetimeFunction(self):
            return self.getTypedRuleContext(GQLParser.DatetimeFunctionContext, 0)

        def localtimeFunction(self):
            return self.getTypedRuleContext(GQLParser.LocaltimeFunctionContext, 0)

        def localdatetimeFunction(self):
            return self.getTypedRuleContext(GQLParser.LocaldatetimeFunctionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_datetimeValueFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatetimeValueFunction"):
                listener.enterDatetimeValueFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatetimeValueFunction"):
                listener.exitDatetimeValueFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatetimeValueFunction"):
                return visitor.visitDatetimeValueFunction(self)
            else:
                return visitor.visitChildren(self)

    def datetimeValueFunction(self):
        localctx = GQLParser.DatetimeValueFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_datetimeValueFunction)
        try:
            self.state = 4389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64, 70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4384
                self.dateFunction()
                pass
            elif token in [68, 237]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4385
                self.timeFunction()
                pass
            elif token in [69, 236]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4386
                self.datetimeFunction()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4387
                self.localtimeFunction()
                pass
            elif token in [136, 138]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4388
                self.localdatetimeFunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_DATE(self):
            return self.getToken(GQLParser.CURRENT_DATE, 0)

        def DATE(self):
            return self.getToken(GQLParser.DATE, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def dateFunctionParameters(self):
            return self.getTypedRuleContext(GQLParser.DateFunctionParametersContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_dateFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDateFunction"):
                listener.enterDateFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDateFunction"):
                listener.exitDateFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDateFunction"):
                return visitor.visitDateFunction(self)
            else:
                return visitor.visitChildren(self)

    def dateFunction(self):
        localctx = GQLParser.DateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_dateFunction)
        self._la = 0  # Token type
        try:
            self.state = 4398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4391
                self.match(GQLParser.CURRENT_DATE)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4392
                self.match(GQLParser.DATE)
                self.state = 4393
                self.match(GQLParser.LEFT_PAREN)
                self.state = 4395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 3 or _la == 4 or _la == 176 or _la == 368:
                    self.state = 4394
                    self.dateFunctionParameters()

                self.state = 4397
                self.match(GQLParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_TIME(self):
            return self.getToken(GQLParser.CURRENT_TIME, 0)

        def ZONED_TIME(self):
            return self.getToken(GQLParser.ZONED_TIME, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def timeFunctionParameters(self):
            return self.getTypedRuleContext(GQLParser.TimeFunctionParametersContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_timeFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimeFunction"):
                listener.enterTimeFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimeFunction"):
                listener.exitTimeFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeFunction"):
                return visitor.visitTimeFunction(self)
            else:
                return visitor.visitChildren(self)

    def timeFunction(self):
        localctx = GQLParser.TimeFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_timeFunction)
        self._la = 0  # Token type
        try:
            self.state = 4407
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4400
                self.match(GQLParser.CURRENT_TIME)
                pass
            elif token in [237]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4401
                self.match(GQLParser.ZONED_TIME)
                self.state = 4402
                self.match(GQLParser.LEFT_PAREN)
                self.state = 4404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 3 or _la == 4 or _la == 176 or _la == 368:
                    self.state = 4403
                    self.timeFunctionParameters()

                self.state = 4406
                self.match(GQLParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocaltimeFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_TIME(self):
            return self.getToken(GQLParser.LOCAL_TIME, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def timeFunctionParameters(self):
            return self.getTypedRuleContext(GQLParser.TimeFunctionParametersContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_localtimeFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLocaltimeFunction"):
                listener.enterLocaltimeFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLocaltimeFunction"):
                listener.exitLocaltimeFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLocaltimeFunction"):
                return visitor.visitLocaltimeFunction(self)
            else:
                return visitor.visitChildren(self)

    def localtimeFunction(self):
        localctx = GQLParser.LocaltimeFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_localtimeFunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4409
            self.match(GQLParser.LOCAL_TIME)
            self.state = 4415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 487, self._ctx)
            if la_ == 1:
                self.state = 4410
                self.match(GQLParser.LEFT_PAREN)
                self.state = 4412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 3 or _la == 4 or _la == 176 or _la == 368:
                    self.state = 4411
                    self.timeFunctionParameters()

                self.state = 4414
                self.match(GQLParser.RIGHT_PAREN)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatetimeFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_TIMESTAMP(self):
            return self.getToken(GQLParser.CURRENT_TIMESTAMP, 0)

        def ZONED_DATETIME(self):
            return self.getToken(GQLParser.ZONED_DATETIME, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def datetimeFunctionParameters(self):
            return self.getTypedRuleContext(
                GQLParser.DatetimeFunctionParametersContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_datetimeFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatetimeFunction"):
                listener.enterDatetimeFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatetimeFunction"):
                listener.exitDatetimeFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatetimeFunction"):
                return visitor.visitDatetimeFunction(self)
            else:
                return visitor.visitChildren(self)

    def datetimeFunction(self):
        localctx = GQLParser.DatetimeFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_datetimeFunction)
        self._la = 0  # Token type
        try:
            self.state = 4424
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4417
                self.match(GQLParser.CURRENT_TIMESTAMP)
                pass
            elif token in [236]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4418
                self.match(GQLParser.ZONED_DATETIME)
                self.state = 4419
                self.match(GQLParser.LEFT_PAREN)
                self.state = 4421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 3 or _la == 4 or _la == 176 or _la == 368:
                    self.state = 4420
                    self.datetimeFunctionParameters()

                self.state = 4423
                self.match(GQLParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocaldatetimeFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_TIMESTAMP(self):
            return self.getToken(GQLParser.LOCAL_TIMESTAMP, 0)

        def LOCAL_DATETIME(self):
            return self.getToken(GQLParser.LOCAL_DATETIME, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def datetimeFunctionParameters(self):
            return self.getTypedRuleContext(
                GQLParser.DatetimeFunctionParametersContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_localdatetimeFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLocaldatetimeFunction"):
                listener.enterLocaldatetimeFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLocaldatetimeFunction"):
                listener.exitLocaldatetimeFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLocaldatetimeFunction"):
                return visitor.visitLocaldatetimeFunction(self)
            else:
                return visitor.visitChildren(self)

    def localdatetimeFunction(self):
        localctx = GQLParser.LocaldatetimeFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_localdatetimeFunction)
        self._la = 0  # Token type
        try:
            self.state = 4433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4426
                self.match(GQLParser.LOCAL_TIMESTAMP)
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4427
                self.match(GQLParser.LOCAL_DATETIME)
                self.state = 4428
                self.match(GQLParser.LEFT_PAREN)
                self.state = 4430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 3 or _la == 4 or _la == 176 or _la == 368:
                    self.state = 4429
                    self.datetimeFunctionParameters()

                self.state = 4432
                self.match(GQLParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateFunctionParametersContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateString(self):
            return self.getTypedRuleContext(GQLParser.DateStringContext, 0)

        def recordConstructor(self):
            return self.getTypedRuleContext(GQLParser.RecordConstructorContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_dateFunctionParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDateFunctionParameters"):
                listener.enterDateFunctionParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDateFunctionParameters"):
                listener.exitDateFunctionParameters(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDateFunctionParameters"):
                return visitor.visitDateFunctionParameters(self)
            else:
                return visitor.visitChildren(self)

    def dateFunctionParameters(self):
        localctx = GQLParser.DateFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_dateFunctionParameters)
        try:
            self.state = 4437
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4435
                self.dateString()
                pass
            elif token in [176, 368]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4436
                self.recordConstructor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeFunctionParametersContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeString(self):
            return self.getTypedRuleContext(GQLParser.TimeStringContext, 0)

        def recordConstructor(self):
            return self.getTypedRuleContext(GQLParser.RecordConstructorContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_timeFunctionParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimeFunctionParameters"):
                listener.enterTimeFunctionParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimeFunctionParameters"):
                listener.exitTimeFunctionParameters(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeFunctionParameters"):
                return visitor.visitTimeFunctionParameters(self)
            else:
                return visitor.visitChildren(self)

    def timeFunctionParameters(self):
        localctx = GQLParser.TimeFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_timeFunctionParameters)
        try:
            self.state = 4441
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4439
                self.timeString()
                pass
            elif token in [176, 368]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4440
                self.recordConstructor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatetimeFunctionParametersContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datetimeString(self):
            return self.getTypedRuleContext(GQLParser.DatetimeStringContext, 0)

        def recordConstructor(self):
            return self.getTypedRuleContext(GQLParser.RecordConstructorContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_datetimeFunctionParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatetimeFunctionParameters"):
                listener.enterDatetimeFunctionParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatetimeFunctionParameters"):
                listener.exitDatetimeFunctionParameters(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatetimeFunctionParameters"):
                return visitor.visitDatetimeFunctionParameters(self)
            else:
                return visitor.visitChildren(self)

    def datetimeFunctionParameters(self):
        localctx = GQLParser.DatetimeFunctionParametersContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 1038, self.RULE_datetimeFunctionParameters)
        try:
            self.state = 4445
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4443
                self.datetimeString()
                pass
            elif token in [176, 368]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4444
                self.recordConstructor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurationValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(GQLParser.ValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_durationValueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDurationValueExpression"):
                listener.enterDurationValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDurationValueExpression"):
                listener.exitDurationValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDurationValueExpression"):
                return visitor.visitDurationValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def durationValueExpression(self):
        localctx = GQLParser.DurationValueExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_durationValueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4447
            self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatetimeSubtractionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DURATION_BETWEEN(self):
            return self.getToken(GQLParser.DURATION_BETWEEN, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def datetimeSubtractionParameters(self):
            return self.getTypedRuleContext(
                GQLParser.DatetimeSubtractionParametersContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def temporalDurationQualifier(self):
            return self.getTypedRuleContext(
                GQLParser.TemporalDurationQualifierContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_datetimeSubtraction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatetimeSubtraction"):
                listener.enterDatetimeSubtraction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatetimeSubtraction"):
                listener.exitDatetimeSubtraction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatetimeSubtraction"):
                return visitor.visitDatetimeSubtraction(self)
            else:
                return visitor.visitChildren(self)

    def datetimeSubtraction(self):
        localctx = GQLParser.DatetimeSubtractionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_datetimeSubtraction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4449
            self.match(GQLParser.DURATION_BETWEEN)
            self.state = 4450
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4451
            self.datetimeSubtractionParameters()
            self.state = 4452
            self.match(GQLParser.RIGHT_PAREN)
            self.state = 4454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 495, self._ctx)
            if la_ == 1:
                self.state = 4453
                self.temporalDurationQualifier()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatetimeSubtractionParametersContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datetimeValueExpression1(self):
            return self.getTypedRuleContext(
                GQLParser.DatetimeValueExpression1Context, 0
            )

        def COMMA(self):
            return self.getToken(GQLParser.COMMA, 0)

        def datetimeValueExpression2(self):
            return self.getTypedRuleContext(
                GQLParser.DatetimeValueExpression2Context, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_datetimeSubtractionParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatetimeSubtractionParameters"):
                listener.enterDatetimeSubtractionParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatetimeSubtractionParameters"):
                listener.exitDatetimeSubtractionParameters(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatetimeSubtractionParameters"):
                return visitor.visitDatetimeSubtractionParameters(self)
            else:
                return visitor.visitChildren(self)

    def datetimeSubtractionParameters(self):
        localctx = GQLParser.DatetimeSubtractionParametersContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 1044, self.RULE_datetimeSubtractionParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4456
            self.datetimeValueExpression1()
            self.state = 4457
            self.match(GQLParser.COMMA)
            self.state = 4458
            self.datetimeValueExpression2()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatetimeValueExpression1Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datetimeValueExpression(self):
            return self.getTypedRuleContext(GQLParser.DatetimeValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_datetimeValueExpression1

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatetimeValueExpression1"):
                listener.enterDatetimeValueExpression1(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatetimeValueExpression1"):
                listener.exitDatetimeValueExpression1(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatetimeValueExpression1"):
                return visitor.visitDatetimeValueExpression1(self)
            else:
                return visitor.visitChildren(self)

    def datetimeValueExpression1(self):
        localctx = GQLParser.DatetimeValueExpression1Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 1046, self.RULE_datetimeValueExpression1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4460
            self.datetimeValueExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatetimeValueExpression2Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datetimeValueExpression(self):
            return self.getTypedRuleContext(GQLParser.DatetimeValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_datetimeValueExpression2

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatetimeValueExpression2"):
                listener.enterDatetimeValueExpression2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatetimeValueExpression2"):
                listener.exitDatetimeValueExpression2(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatetimeValueExpression2"):
                return visitor.visitDatetimeValueExpression2(self)
            else:
                return visitor.visitChildren(self)

    def datetimeValueExpression2(self):
        localctx = GQLParser.DatetimeValueExpression2Context(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 1048, self.RULE_datetimeValueExpression2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4462
            self.datetimeValueExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurationValueFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def durationFunction(self):
            return self.getTypedRuleContext(GQLParser.DurationFunctionContext, 0)

        def absoluteValueExpression(self):
            return self.getTypedRuleContext(GQLParser.AbsoluteValueExpressionContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_durationValueFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDurationValueFunction"):
                listener.enterDurationValueFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDurationValueFunction"):
                listener.exitDurationValueFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDurationValueFunction"):
                return visitor.visitDurationValueFunction(self)
            else:
                return visitor.visitChildren(self)

    def durationValueFunction(self):
        localctx = GQLParser.DurationValueFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_durationValueFunction)
        try:
            self.state = 4466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4464
                self.durationFunction()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4465
                self.absoluteValueExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurationFunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DURATION(self):
            return self.getToken(GQLParser.DURATION, 0)

        def LEFT_PAREN(self):
            return self.getToken(GQLParser.LEFT_PAREN, 0)

        def durationFunctionParameters(self):
            return self.getTypedRuleContext(
                GQLParser.DurationFunctionParametersContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(GQLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_durationFunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDurationFunction"):
                listener.enterDurationFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDurationFunction"):
                listener.exitDurationFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDurationFunction"):
                return visitor.visitDurationFunction(self)
            else:
                return visitor.visitChildren(self)

    def durationFunction(self):
        localctx = GQLParser.DurationFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_durationFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4468
            self.match(GQLParser.DURATION)
            self.state = 4469
            self.match(GQLParser.LEFT_PAREN)
            self.state = 4470
            self.durationFunctionParameters()
            self.state = 4471
            self.match(GQLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurationFunctionParametersContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def durationString(self):
            return self.getTypedRuleContext(GQLParser.DurationStringContext, 0)

        def recordConstructor(self):
            return self.getTypedRuleContext(GQLParser.RecordConstructorContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_durationFunctionParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDurationFunctionParameters"):
                listener.enterDurationFunctionParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDurationFunctionParameters"):
                listener.exitDurationFunctionParameters(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDurationFunctionParameters"):
                return visitor.visitDurationFunctionParameters(self)
            else:
                return visitor.visitChildren(self)

    def durationFunctionParameters(self):
        localctx = GQLParser.DurationFunctionParametersContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 1054, self.RULE_durationFunctionParameters)
        try:
            self.state = 4475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4473
                self.durationString()
                pass
            elif token in [176, 368]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4474
                self.recordConstructor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GQLParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_objectName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterObjectName"):
                listener.enterObjectName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitObjectName"):
                listener.exitObjectName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitObjectName"):
                return visitor.visitObjectName(self)
            else:
                return visitor.visitChildren(self)

    def objectName(self):
        localctx = GQLParser.ObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_objectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4477
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectNameOrBindingVariableContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regularIdentifier(self):
            return self.getTypedRuleContext(GQLParser.RegularIdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_objectNameOrBindingVariable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterObjectNameOrBindingVariable"):
                listener.enterObjectNameOrBindingVariable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitObjectNameOrBindingVariable"):
                listener.exitObjectNameOrBindingVariable(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitObjectNameOrBindingVariable"):
                return visitor.visitObjectNameOrBindingVariable(self)
            else:
                return visitor.visitChildren(self)

    def objectNameOrBindingVariable(self):
        localctx = GQLParser.ObjectNameOrBindingVariableContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 1058, self.RULE_objectNameOrBindingVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4479
            self.regularIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectoryNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GQLParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_directoryName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDirectoryName"):
                listener.enterDirectoryName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDirectoryName"):
                listener.exitDirectoryName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDirectoryName"):
                return visitor.visitDirectoryName(self)
            else:
                return visitor.visitChildren(self)

    def directoryName(self):
        localctx = GQLParser.DirectoryNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_directoryName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4481
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SchemaNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GQLParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_schemaName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSchemaName"):
                listener.enterSchemaName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSchemaName"):
                listener.exitSchemaName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSchemaName"):
                return visitor.visitSchemaName(self)
            else:
                return visitor.visitChildren(self)

    def schemaName(self):
        localctx = GQLParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4483
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regularIdentifier(self):
            return self.getTypedRuleContext(GQLParser.RegularIdentifierContext, 0)

        def delimitedGraphName(self):
            return self.getTypedRuleContext(GQLParser.DelimitedGraphNameContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_graphName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphName"):
                listener.enterGraphName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphName"):
                listener.exitGraphName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphName"):
                return visitor.visitGraphName(self)
            else:
                return visitor.visitChildren(self)

    def graphName(self):
        localctx = GQLParser.GraphNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_graphName)
        try:
            self.state = 4487
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4485
                self.regularIdentifier()
                pass
            elif token in [4, 5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4486
                self.delimitedGraphName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DelimitedGraphNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_CHARACTER_SEQUENCE(self):
            return self.getToken(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0)

        def ACCENT_QUOTED_CHARACTER_SEQUENCE(self):
            return self.getToken(GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_delimitedGraphName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDelimitedGraphName"):
                listener.enterDelimitedGraphName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDelimitedGraphName"):
                listener.exitDelimitedGraphName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDelimitedGraphName"):
                return visitor.visitDelimitedGraphName(self)
            else:
                return visitor.visitChildren(self)

    def delimitedGraphName(self):
        localctx = GQLParser.DelimitedGraphNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_delimitedGraphName)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4489
            _la = self._input.LA(1)
            if not (_la == 4 or _la == 5):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphTypeNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GQLParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_graphTypeName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphTypeName"):
                listener.enterGraphTypeName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphTypeName"):
                listener.exitGraphTypeName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphTypeName"):
                return visitor.visitGraphTypeName(self)
            else:
                return visitor.visitChildren(self)

    def graphTypeName(self):
        localctx = GQLParser.GraphTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_graphTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4491
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeTypeNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GQLParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nodeTypeName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodeTypeName"):
                listener.enterNodeTypeName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodeTypeName"):
                listener.exitNodeTypeName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodeTypeName"):
                return visitor.visitNodeTypeName(self)
            else:
                return visitor.visitChildren(self)

    def nodeTypeName(self):
        localctx = GQLParser.NodeTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_nodeTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4493
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeTypeNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GQLParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgeTypeName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeTypeName"):
                listener.enterEdgeTypeName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeTypeName"):
                listener.exitEdgeTypeName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeTypeName"):
                return visitor.visitEdgeTypeName(self)
            else:
                return visitor.visitChildren(self)

    def edgeTypeName(self):
        localctx = GQLParser.EdgeTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_edgeTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4495
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindingTableNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regularIdentifier(self):
            return self.getTypedRuleContext(GQLParser.RegularIdentifierContext, 0)

        def delimitedBindingTableName(self):
            return self.getTypedRuleContext(
                GQLParser.DelimitedBindingTableNameContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_bindingTableName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBindingTableName"):
                listener.enterBindingTableName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBindingTableName"):
                listener.exitBindingTableName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBindingTableName"):
                return visitor.visitBindingTableName(self)
            else:
                return visitor.visitChildren(self)

    def bindingTableName(self):
        localctx = GQLParser.BindingTableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_bindingTableName)
        try:
            self.state = 4499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4497
                self.regularIdentifier()
                pass
            elif token in [4, 5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4498
                self.delimitedBindingTableName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DelimitedBindingTableNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_CHARACTER_SEQUENCE(self):
            return self.getToken(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0)

        def ACCENT_QUOTED_CHARACTER_SEQUENCE(self):
            return self.getToken(GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_delimitedBindingTableName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDelimitedBindingTableName"):
                listener.enterDelimitedBindingTableName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDelimitedBindingTableName"):
                listener.exitDelimitedBindingTableName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDelimitedBindingTableName"):
                return visitor.visitDelimitedBindingTableName(self)
            else:
                return visitor.visitChildren(self)

    def delimitedBindingTableName(self):
        localctx = GQLParser.DelimitedBindingTableNameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 1076, self.RULE_delimitedBindingTableName)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4501
            _la = self._input.LA(1)
            if not (_la == 4 or _la == 5):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GQLParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_procedureName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProcedureName"):
                listener.enterProcedureName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProcedureName"):
                listener.exitProcedureName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProcedureName"):
                return visitor.visitProcedureName(self)
            else:
                return visitor.visitChildren(self)

    def procedureName(self):
        localctx = GQLParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4503
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GQLParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_labelName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabelName"):
                listener.enterLabelName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabelName"):
                listener.exitLabelName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabelName"):
                return visitor.visitLabelName(self)
            else:
                return visitor.visitChildren(self)

    def labelName(self):
        localctx = GQLParser.LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_labelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4505
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GQLParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_propertyName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertyName"):
                listener.enterPropertyName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertyName"):
                listener.exitPropertyName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertyName"):
                return visitor.visitPropertyName(self)
            else:
                return visitor.visitChildren(self)

    def propertyName(self):
        localctx = GQLParser.PropertyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_propertyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4507
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(GQLParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_fieldName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFieldName"):
                listener.enterFieldName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFieldName"):
                listener.exitFieldName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFieldName"):
                return visitor.visitFieldName(self)
            else:
                return visitor.visitChildren(self)

    def fieldName(self):
        localctx = GQLParser.FieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_fieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4509
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementVariableContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariable(self):
            return self.getTypedRuleContext(GQLParser.BindingVariableContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_elementVariable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementVariable"):
                listener.enterElementVariable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementVariable"):
                listener.exitElementVariable(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementVariable"):
                return visitor.visitElementVariable(self)
            else:
                return visitor.visitChildren(self)

    def elementVariable(self):
        localctx = GQLParser.ElementVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1086, self.RULE_elementVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4511
            self.bindingVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathVariableContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingVariable(self):
            return self.getTypedRuleContext(GQLParser.BindingVariableContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_pathVariable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathVariable"):
                listener.enterPathVariable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathVariable"):
                listener.exitPathVariable(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathVariable"):
                return visitor.visitPathVariable(self)
            else:
                return visitor.visitChildren(self)

    def pathVariable(self):
        localctx = GQLParser.PathVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1088, self.RULE_pathVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4513
            self.bindingVariable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubpathVariableContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regularIdentifier(self):
            return self.getTypedRuleContext(GQLParser.RegularIdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_subpathVariable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubpathVariable"):
                listener.enterSubpathVariable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubpathVariable"):
                listener.exitSubpathVariable(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubpathVariable"):
                return visitor.visitSubpathVariable(self)
            else:
                return visitor.visitChildren(self)

    def subpathVariable(self):
        localctx = GQLParser.SubpathVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1090, self.RULE_subpathVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4515
            self.regularIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BindingVariableContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regularIdentifier(self):
            return self.getTypedRuleContext(GQLParser.RegularIdentifierContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_bindingVariable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBindingVariable"):
                listener.enterBindingVariable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBindingVariable"):
                listener.exitBindingVariable(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBindingVariable"):
                return visitor.visitBindingVariable(self)
            else:
                return visitor.visitChildren(self)

    def bindingVariable(self):
        localctx = GQLParser.BindingVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1092, self.RULE_bindingVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4517
            self.regularIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnsignedLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedNumericLiteral(self):
            return self.getTypedRuleContext(GQLParser.UnsignedNumericLiteralContext, 0)

        def generalLiteral(self):
            return self.getTypedRuleContext(GQLParser.GeneralLiteralContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_unsignedLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnsignedLiteral"):
                listener.enterUnsignedLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnsignedLiteral"):
                listener.exitUnsignedLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnsignedLiteral"):
                return visitor.visitUnsignedLiteral(self)
            else:
                return visitor.visitChildren(self)

    def unsignedLiteral(self):
        localctx = GQLParser.UnsignedLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1094, self.RULE_unsignedLiteral)
        try:
            self.state = 4521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4519
                self.unsignedNumericLiteral()
                pass
            elif token in [
                2,
                3,
                4,
                7,
                26,
                70,
                71,
                83,
                133,
                154,
                176,
                207,
                208,
                368,
                369,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4520
                self.generalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN_LITERAL(self):
            return self.getToken(GQLParser.BOOLEAN_LITERAL, 0)

        def characterStringLiteral(self):
            return self.getTypedRuleContext(GQLParser.CharacterStringLiteralContext, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(GQLParser.BYTE_STRING_LITERAL, 0)

        def temporalLiteral(self):
            return self.getTypedRuleContext(GQLParser.TemporalLiteralContext, 0)

        def durationLiteral(self):
            return self.getTypedRuleContext(GQLParser.DurationLiteralContext, 0)

        def nullLiteral(self):
            return self.getTypedRuleContext(GQLParser.NullLiteralContext, 0)

        def listLiteral(self):
            return self.getTypedRuleContext(GQLParser.ListLiteralContext, 0)

        def recordLiteral(self):
            return self.getTypedRuleContext(GQLParser.RecordLiteralContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_generalLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGeneralLiteral"):
                listener.enterGeneralLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGeneralLiteral"):
                listener.exitGeneralLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGeneralLiteral"):
                return visitor.visitGeneralLiteral(self)
            else:
                return visitor.visitChildren(self)

    def generalLiteral(self):
        localctx = GQLParser.GeneralLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1096, self.RULE_generalLiteral)
        try:
            self.state = 4531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4523
                self.match(GQLParser.BOOLEAN_LITERAL)
                pass
            elif token in [3, 4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4524
                self.characterStringLiteral()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4525
                self.match(GQLParser.BYTE_STRING_LITERAL)
                pass
            elif token in [70, 71, 207, 208]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4526
                self.temporalLiteral()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4527
                self.durationLiteral()
                pass
            elif token in [154]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4528
                self.nullLiteral()
                pass
            elif token in [26, 133, 369]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4529
                self.listLiteral()
                pass
            elif token in [176, 368]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4530
                self.recordLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemporalLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateLiteral(self):
            return self.getTypedRuleContext(GQLParser.DateLiteralContext, 0)

        def timeLiteral(self):
            return self.getTypedRuleContext(GQLParser.TimeLiteralContext, 0)

        def datetimeLiteral(self):
            return self.getTypedRuleContext(GQLParser.DatetimeLiteralContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_temporalLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemporalLiteral"):
                listener.enterTemporalLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemporalLiteral"):
                listener.exitTemporalLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTemporalLiteral"):
                return visitor.visitTemporalLiteral(self)
            else:
                return visitor.visitChildren(self)

    def temporalLiteral(self):
        localctx = GQLParser.TemporalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1098, self.RULE_temporalLiteral)
        try:
            self.state = 4536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4533
                self.dateLiteral()
                pass
            elif token in [207]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4534
                self.timeLiteral()
                pass
            elif token in [71, 208]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4535
                self.datetimeLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(GQLParser.DATE, 0)

        def dateString(self):
            return self.getTypedRuleContext(GQLParser.DateStringContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_dateLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDateLiteral"):
                listener.enterDateLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDateLiteral"):
                listener.exitDateLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDateLiteral"):
                return visitor.visitDateLiteral(self)
            else:
                return visitor.visitChildren(self)

    def dateLiteral(self):
        localctx = GQLParser.DateLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1100, self.RULE_dateLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4538
            self.match(GQLParser.DATE)
            self.state = 4539
            self.dateString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME(self):
            return self.getToken(GQLParser.TIME, 0)

        def timeString(self):
            return self.getTypedRuleContext(GQLParser.TimeStringContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_timeLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimeLiteral"):
                listener.enterTimeLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimeLiteral"):
                listener.exitTimeLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeLiteral"):
                return visitor.visitTimeLiteral(self)
            else:
                return visitor.visitChildren(self)

    def timeLiteral(self):
        localctx = GQLParser.TimeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1102, self.RULE_timeLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4541
            self.match(GQLParser.TIME)
            self.state = 4542
            self.timeString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatetimeLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datetimeString(self):
            return self.getTypedRuleContext(GQLParser.DatetimeStringContext, 0)

        def DATETIME(self):
            return self.getToken(GQLParser.DATETIME, 0)

        def TIMESTAMP(self):
            return self.getToken(GQLParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_datetimeLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatetimeLiteral"):
                listener.enterDatetimeLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatetimeLiteral"):
                listener.exitDatetimeLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatetimeLiteral"):
                return visitor.visitDatetimeLiteral(self)
            else:
                return visitor.visitChildren(self)

    def datetimeLiteral(self):
        localctx = GQLParser.DatetimeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1104, self.RULE_datetimeLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4544
            _la = self._input.LA(1)
            if not (_la == 71 or _la == 208):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4545
            self.datetimeString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def listValueConstructorByEnumeration(self):
            return self.getTypedRuleContext(
                GQLParser.ListValueConstructorByEnumerationContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_listLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListLiteral"):
                listener.enterListLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListLiteral"):
                listener.exitListLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListLiteral"):
                return visitor.visitListLiteral(self)
            else:
                return visitor.visitChildren(self)

    def listLiteral(self):
        localctx = GQLParser.ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1106, self.RULE_listLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4547
            self.listValueConstructorByEnumeration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordConstructor(self):
            return self.getTypedRuleContext(GQLParser.RecordConstructorContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_recordLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRecordLiteral"):
                listener.enterRecordLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRecordLiteral"):
                listener.exitRecordLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRecordLiteral"):
                return visitor.visitRecordLiteral(self)
            else:
                return visitor.visitChildren(self)

    def recordLiteral(self):
        localctx = GQLParser.RecordLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1108, self.RULE_recordLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4549
            self.recordConstructor()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regularIdentifier(self):
            return self.getTypedRuleContext(GQLParser.RegularIdentifierContext, 0)

        def DOUBLE_QUOTED_CHARACTER_SEQUENCE(self):
            return self.getToken(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0)

        def ACCENT_QUOTED_CHARACTER_SEQUENCE(self):
            return self.getToken(GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_identifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifier"):
                listener.enterIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifier"):
                listener.exitIdentifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIdentifier"):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)

    def identifier(self):
        localctx = GQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1110, self.RULE_identifier)
        try:
            self.state = 4554
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4551
                self.regularIdentifier()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4552
                self.match(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4553
                self.match(GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RegularIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGULAR_IDENTIFIER(self):
            return self.getToken(GQLParser.REGULAR_IDENTIFIER, 0)

        def nonReservedWords(self):
            return self.getTypedRuleContext(GQLParser.NonReservedWordsContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_regularIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRegularIdentifier"):
                listener.enterRegularIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRegularIdentifier"):
                listener.exitRegularIdentifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRegularIdentifier"):
                return visitor.visitRegularIdentifier(self)
            else:
                return visitor.visitChildren(self)

    def regularIdentifier(self):
        localctx = GQLParser.RegularIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1112, self.RULE_regularIdentifier)
        try:
            self.state = 4558
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [324]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4556
                self.match(GQLParser.REGULAR_IDENTIFIER)
                pass
            elif token in [
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4557
                self.nonReservedWords()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeZoneStringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def characterStringLiteral(self):
            return self.getTypedRuleContext(GQLParser.CharacterStringLiteralContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_timeZoneString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimeZoneString"):
                listener.enterTimeZoneString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimeZoneString"):
                listener.exitTimeZoneString(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeZoneString"):
                return visitor.visitTimeZoneString(self)
            else:
                return visitor.visitChildren(self)

    def timeZoneString(self):
        localctx = GQLParser.TimeZoneStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1114, self.RULE_timeZoneString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4560
            self.characterStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharacterStringLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_QUOTED_CHARACTER_SEQUENCE(self):
            return self.getToken(GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE, 0)

        def DOUBLE_QUOTED_CHARACTER_SEQUENCE(self):
            return self.getToken(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_characterStringLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCharacterStringLiteral"):
                listener.enterCharacterStringLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCharacterStringLiteral"):
                listener.exitCharacterStringLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCharacterStringLiteral"):
                return visitor.visitCharacterStringLiteral(self)
            else:
                return visitor.visitChildren(self)

    def characterStringLiteral(self):
        localctx = GQLParser.CharacterStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1116, self.RULE_characterStringLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4562
            _la = self._input.LA(1)
            if not (_la == 3 or _la == 4):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnsignedNumericLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exactNumericLiteral(self):
            return self.getTypedRuleContext(GQLParser.ExactNumericLiteralContext, 0)

        def approximateNumericLiteral(self):
            return self.getTypedRuleContext(
                GQLParser.ApproximateNumericLiteralContext, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_unsignedNumericLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnsignedNumericLiteral"):
                listener.enterUnsignedNumericLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnsignedNumericLiteral"):
                listener.exitUnsignedNumericLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnsignedNumericLiteral"):
                return visitor.visitUnsignedNumericLiteral(self)
            else:
                return visitor.visitChildren(self)

    def unsignedNumericLiteral(self):
        localctx = GQLParser.UnsignedNumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1118, self.RULE_unsignedNumericLiteral)
        try:
            self.state = 4566
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 11, 12, 14, 16, 17, 18, 19]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4564
                self.exactNumericLiteral()
                pass
            elif token in [9, 10, 13, 15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4565
                self.approximateNumericLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExactNumericLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX(self):
            return self.getToken(
                GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX,
                0,
            )

        def UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX(self):
            return self.getToken(
                GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX,
                0,
            )

        def UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX(self):
            return self.getToken(
                GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX, 0
            )

        def UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX(self):
            return self.getToken(
                GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX, 0
            )

        def unsignedInteger(self):
            return self.getTypedRuleContext(GQLParser.UnsignedIntegerContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_exactNumericLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExactNumericLiteral"):
                listener.enterExactNumericLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExactNumericLiteral"):
                listener.exitExactNumericLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExactNumericLiteral"):
                return visitor.visitExactNumericLiteral(self)
            else:
                return visitor.visitChildren(self)

    def exactNumericLiteral(self):
        localctx = GQLParser.ExactNumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1120, self.RULE_exactNumericLiteral)
        try:
            self.state = 4573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4568
                self.match(
                    GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX
                )
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4569
                self.match(
                    GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX
                )
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4570
                self.match(GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4571
                self.match(GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX)
                pass
            elif token in [16, 17, 18, 19]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4572
                self.unsignedInteger()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ApproximateNumericLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX(
            self,
        ):
            return self.getToken(
                GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX,
                0,
            )

        def UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX(self):
            return self.getToken(
                GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX, 0
            )

        def UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX(self):
            return self.getToken(
                GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX,
                0,
            )

        def UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX(self):
            return self.getToken(
                GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX, 0
            )

        def getRuleIndex(self):
            return GQLParser.RULE_approximateNumericLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterApproximateNumericLiteral"):
                listener.enterApproximateNumericLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitApproximateNumericLiteral"):
                listener.exitApproximateNumericLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitApproximateNumericLiteral"):
                return visitor.visitApproximateNumericLiteral(self)
            else:
                return visitor.visitChildren(self)

    def approximateNumericLiteral(self):
        localctx = GQLParser.ApproximateNumericLiteralContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 1122, self.RULE_approximateNumericLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4575
            _la = self._input.LA(1)
            if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 42496) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnsignedIntegerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def UNSIGNED_HEXADECIMAL_INTEGER(self):
            return self.getToken(GQLParser.UNSIGNED_HEXADECIMAL_INTEGER, 0)

        def UNSIGNED_OCTAL_INTEGER(self):
            return self.getToken(GQLParser.UNSIGNED_OCTAL_INTEGER, 0)

        def UNSIGNED_BINARY_INTEGER(self):
            return self.getToken(GQLParser.UNSIGNED_BINARY_INTEGER, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_unsignedInteger

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnsignedInteger"):
                listener.enterUnsignedInteger(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnsignedInteger"):
                listener.exitUnsignedInteger(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnsignedInteger"):
                return visitor.visitUnsignedInteger(self)
            else:
                return visitor.visitChildren(self)

    def unsignedInteger(self):
        localctx = GQLParser.UnsignedIntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1124, self.RULE_unsignedInteger)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4577
            _la = self._input.LA(1)
            if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 983040) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnsignedDecimalIntegerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_DECIMAL_INTEGER(self):
            return self.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_unsignedDecimalInteger

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnsignedDecimalInteger"):
                listener.enterUnsignedDecimalInteger(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnsignedDecimalInteger"):
                listener.exitUnsignedDecimalInteger(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnsignedDecimalInteger"):
                return visitor.visitUnsignedDecimalInteger(self)
            else:
                return visitor.visitChildren(self)

    def unsignedDecimalInteger(self):
        localctx = GQLParser.UnsignedDecimalIntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1126, self.RULE_unsignedDecimalInteger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4579
            self.match(GQLParser.UNSIGNED_DECIMAL_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NullLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_KW(self):
            return self.getToken(GQLParser.NULL_KW, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nullLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNullLiteral"):
                listener.enterNullLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNullLiteral"):
                listener.exitNullLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNullLiteral"):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)

    def nullLiteral(self):
        localctx = GQLParser.NullLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1128, self.RULE_nullLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4581
            self.match(GQLParser.NULL_KW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateStringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def characterStringLiteral(self):
            return self.getTypedRuleContext(GQLParser.CharacterStringLiteralContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_dateString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDateString"):
                listener.enterDateString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDateString"):
                listener.exitDateString(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDateString"):
                return visitor.visitDateString(self)
            else:
                return visitor.visitChildren(self)

    def dateString(self):
        localctx = GQLParser.DateStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1130, self.RULE_dateString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4583
            self.characterStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeStringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def characterStringLiteral(self):
            return self.getTypedRuleContext(GQLParser.CharacterStringLiteralContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_timeString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimeString"):
                listener.enterTimeString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimeString"):
                listener.exitTimeString(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeString"):
                return visitor.visitTimeString(self)
            else:
                return visitor.visitChildren(self)

    def timeString(self):
        localctx = GQLParser.TimeStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1132, self.RULE_timeString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4585
            self.characterStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatetimeStringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def characterStringLiteral(self):
            return self.getTypedRuleContext(GQLParser.CharacterStringLiteralContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_datetimeString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatetimeString"):
                listener.enterDatetimeString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatetimeString"):
                listener.exitDatetimeString(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatetimeString"):
                return visitor.visitDatetimeString(self)
            else:
                return visitor.visitChildren(self)

    def datetimeString(self):
        localctx = GQLParser.DatetimeStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1134, self.RULE_datetimeString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4587
            self.characterStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurationLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DURATION(self):
            return self.getToken(GQLParser.DURATION, 0)

        def durationString(self):
            return self.getTypedRuleContext(GQLParser.DurationStringContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_durationLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDurationLiteral"):
                listener.enterDurationLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDurationLiteral"):
                listener.exitDurationLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDurationLiteral"):
                return visitor.visitDurationLiteral(self)
            else:
                return visitor.visitChildren(self)

    def durationLiteral(self):
        localctx = GQLParser.DurationLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1136, self.RULE_durationLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4589
            self.match(GQLParser.DURATION)
            self.state = 4590
            self.durationString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurationStringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def characterStringLiteral(self):
            return self.getTypedRuleContext(GQLParser.CharacterStringLiteralContext, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_durationString

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDurationString"):
                listener.enterDurationString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDurationString"):
                listener.exitDurationString(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDurationString"):
                return visitor.visitDurationString(self)
            else:
                return visitor.visitChildren(self)

    def durationString(self):
        localctx = GQLParser.DurationStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1138, self.RULE_durationString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4592
            self.characterStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NodeSynonymContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NODE(self):
            return self.getToken(GQLParser.NODE, 0)

        def VERTEX(self):
            return self.getToken(GQLParser.VERTEX, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nodeSynonym

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNodeSynonym"):
                listener.enterNodeSynonym(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNodeSynonym"):
                listener.exitNodeSynonym(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNodeSynonym"):
                return visitor.visitNodeSynonym(self)
            else:
                return visitor.visitChildren(self)

    def nodeSynonym(self):
        localctx = GQLParser.NodeSynonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1140, self.RULE_nodeSynonym)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4594
            _la = self._input.LA(1)
            if not (_la == 301 or _la == 319):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgesSynonymContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EDGES(self):
            return self.getToken(GQLParser.EDGES, 0)

        def RELATIONSHIPS(self):
            return self.getToken(GQLParser.RELATIONSHIPS, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgesSynonym

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgesSynonym"):
                listener.enterEdgesSynonym(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgesSynonym"):
                listener.exitEdgesSynonym(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgesSynonym"):
                return visitor.visitEdgesSynonym(self)
            else:
                return visitor.visitChildren(self)

    def edgesSynonym(self):
        localctx = GQLParser.EdgesSynonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1142, self.RULE_edgesSynonym)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4596
            _la = self._input.LA(1)
            if not (_la == 285 or _la == 308):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EdgeSynonymContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EDGE(self):
            return self.getToken(GQLParser.EDGE, 0)

        def RELATIONSHIP(self):
            return self.getToken(GQLParser.RELATIONSHIP, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_edgeSynonym

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEdgeSynonym"):
                listener.enterEdgeSynonym(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEdgeSynonym"):
                listener.exitEdgeSynonym(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEdgeSynonym"):
                return visitor.visitEdgeSynonym(self)
            else:
                return visitor.visitChildren(self)

    def edgeSynonym(self):
        localctx = GQLParser.EdgeSynonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1144, self.RULE_edgeSynonym)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4598
            _la = self._input.LA(1)
            if not (_la == 284 or _la == 307):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonReservedWordsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACYCLIC(self):
            return self.getToken(GQLParser.ACYCLIC, 0)

        def BINDING(self):
            return self.getToken(GQLParser.BINDING, 0)

        def BINDINGS(self):
            return self.getToken(GQLParser.BINDINGS, 0)

        def CONNECTING(self):
            return self.getToken(GQLParser.CONNECTING, 0)

        def DESTINATION(self):
            return self.getToken(GQLParser.DESTINATION, 0)

        def DIFFERENT(self):
            return self.getToken(GQLParser.DIFFERENT, 0)

        def DIRECTED(self):
            return self.getToken(GQLParser.DIRECTED, 0)

        def EDGE(self):
            return self.getToken(GQLParser.EDGE, 0)

        def EDGES(self):
            return self.getToken(GQLParser.EDGES, 0)

        def ELEMENT(self):
            return self.getToken(GQLParser.ELEMENT, 0)

        def ELEMENTS(self):
            return self.getToken(GQLParser.ELEMENTS, 0)

        def FIRST(self):
            return self.getToken(GQLParser.FIRST, 0)

        def GRAPH(self):
            return self.getToken(GQLParser.GRAPH, 0)

        def GROUPS(self):
            return self.getToken(GQLParser.GROUPS, 0)

        def KEEP(self):
            return self.getToken(GQLParser.KEEP, 0)

        def LABEL(self):
            return self.getToken(GQLParser.LABEL, 0)

        def LABELED(self):
            return self.getToken(GQLParser.LABELED, 0)

        def LABELS(self):
            return self.getToken(GQLParser.LABELS, 0)

        def LAST(self):
            return self.getToken(GQLParser.LAST, 0)

        def NFC(self):
            return self.getToken(GQLParser.NFC, 0)

        def NFD(self):
            return self.getToken(GQLParser.NFD, 0)

        def NFKC(self):
            return self.getToken(GQLParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(GQLParser.NFKD, 0)

        def NO(self):
            return self.getToken(GQLParser.NO, 0)

        def NODE(self):
            return self.getToken(GQLParser.NODE, 0)

        def NORMALIZED(self):
            return self.getToken(GQLParser.NORMALIZED, 0)

        def ONLY(self):
            return self.getToken(GQLParser.ONLY, 0)

        def ORDINALITY(self):
            return self.getToken(GQLParser.ORDINALITY, 0)

        def PROPERTY(self):
            return self.getToken(GQLParser.PROPERTY, 0)

        def READ(self):
            return self.getToken(GQLParser.READ, 0)

        def RELATIONSHIP(self):
            return self.getToken(GQLParser.RELATIONSHIP, 0)

        def RELATIONSHIPS(self):
            return self.getToken(GQLParser.RELATIONSHIPS, 0)

        def REPEATABLE(self):
            return self.getToken(GQLParser.REPEATABLE, 0)

        def SHORTEST(self):
            return self.getToken(GQLParser.SHORTEST, 0)

        def SIMPLE(self):
            return self.getToken(GQLParser.SIMPLE, 0)

        def SOURCE(self):
            return self.getToken(GQLParser.SOURCE, 0)

        def TABLE(self):
            return self.getToken(GQLParser.TABLE, 0)

        def TO(self):
            return self.getToken(GQLParser.TO, 0)

        def TRAIL(self):
            return self.getToken(GQLParser.TRAIL, 0)

        def TRANSACTION(self):
            return self.getToken(GQLParser.TRANSACTION, 0)

        def TYPE(self):
            return self.getToken(GQLParser.TYPE, 0)

        def UNDIRECTED(self):
            return self.getToken(GQLParser.UNDIRECTED, 0)

        def VERTEX(self):
            return self.getToken(GQLParser.VERTEX, 0)

        def WALK(self):
            return self.getToken(GQLParser.WALK, 0)

        def WITHOUT(self):
            return self.getToken(GQLParser.WITHOUT, 0)

        def WRITE(self):
            return self.getToken(GQLParser.WRITE, 0)

        def ZONE(self):
            return self.getToken(GQLParser.ZONE, 0)

        def getRuleIndex(self):
            return GQLParser.RULE_nonReservedWords

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNonReservedWords"):
                listener.enterNonReservedWords(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNonReservedWords"):
                listener.exitNonReservedWords(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonReservedWords"):
                return visitor.visitNonReservedWords(self)
            else:
                return visitor.visitChildren(self)

    def nonReservedWords(self):
        localctx = GQLParser.NonReservedWordsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1146, self.RULE_nonReservedWords)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4600
            _la = self._input.LA(1)
            if not (
                ((_la - 277) & ~0x3F) == 0
                and ((1 << (_la - 277)) & 140737488355327) != 0
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates is None:
            self._predicates = {}
        self._predicates[92] = self.compositeQueryExpression_sempred
        self._predicates[214] = self.labelExpression_sempred
        self._predicates[233] = self.simplifiedTerm_sempred
        self._predicates[234] = self.simplifiedFactorLow_sempred
        self._predicates[337] = self.valueType_sempred
        self._predicates[409] = self.valueExpression_sempred
        self._predicates[421] = self.valueExpressionPrimary_sempred
        self._predicates[476] = self.numericValueExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def compositeQueryExpression_sempred(
        self, localctx: CompositeQueryExpressionContext, predIndex: int
    ):
        if predIndex == 0:
            return self.precpred(self._ctx, 2)

    def labelExpression_sempred(self, localctx: LabelExpressionContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 5)

        if predIndex == 2:
            return self.precpred(self._ctx, 4)

    def simplifiedTerm_sempred(self, localctx: SimplifiedTermContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 1)

    def simplifiedFactorLow_sempred(
        self, localctx: SimplifiedFactorLowContext, predIndex: int
    ):
        if predIndex == 4:
            return self.precpred(self._ctx, 1)

    def valueType_sempred(self, localctx: ValueTypeContext, predIndex: int):
        if predIndex == 5:
            return self.precpred(self._ctx, 1)

        if predIndex == 6:
            return self.precpred(self._ctx, 7)

    def valueExpression_sempred(self, localctx: ValueExpressionContext, predIndex: int):
        if predIndex == 7:
            return self.precpred(self._ctx, 14)

        if predIndex == 8:
            return self.precpred(self._ctx, 13)

        if predIndex == 9:
            return self.precpred(self._ctx, 12)

        if predIndex == 10:
            return self.precpred(self._ctx, 11)

        if predIndex == 11:
            return self.precpred(self._ctx, 6)

        if predIndex == 12:
            return self.precpred(self._ctx, 5)

        if predIndex == 13:
            return self.precpred(self._ctx, 9)

        if predIndex == 14:
            return self.precpred(self._ctx, 7)

    def valueExpressionPrimary_sempred(
        self, localctx: ValueExpressionPrimaryContext, predIndex: int
    ):
        if predIndex == 15:
            return self.precpred(self._ctx, 7)

    def numericValueExpression_sempred(
        self, localctx: NumericValueExpressionContext, predIndex: int
    ):
        if predIndex == 16:
            return self.precpred(self._ctx, 4)

        if predIndex == 17:
            return self.precpred(self._ctx, 3)
